{
  "parser": "babel-eslint",
  "env": {
    "browser": true,
    "node": true,
    "es6": true,
    "jest": true,
    "cypress/globals": true
  },
  "parserOptions": {
    "ecmaFeatures": {
      "modules": true,
      "jsx": true
    }
  },
  "plugins": [
    "babel",
    "react",
    "jsx-a11y",
    "import",
    "jest",
    "lodash",
    "react-hooks",
    "prettier",
    "unicorn",
    "testing-library",
    "cypress"
  ],
  "settings": {
    "react": {
      "version": "16.4" // React version, default to the latest React stable release
    }
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:jsx-a11y/recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:jest/recommended",
    "airbnb",
    "prettier",
    "prettier/react",
    "plugin:testing-library/react",
    "plugin:cypress/recommended"
  ],
  "globals": {
    "__WEBPACK__": true,
    "__DEV__": false
  },
  "rules": {
    "react/prop-types": [
      2,
      {
        "ignore": [
          "intl",
          "initialize",
          "handleSubmit",
          "location",
          "match",
          "history",
          "input",
          "className"
        ]
      }
    ],
    "react/jsx-closing-bracket-location": 0,
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "import/first": [2, "absolute-first"],
    "import/order": [
      2,
      {
        "newlines-between": "always"
      }
    ],
    "no-prototype-builtins": 0, // not needed as we never mess with prototype
    "no-nested-ternary": 0,
    "react/jsx-one-expression-per-line": 0,
    "react/no-did-update-set-state": 0, //not needed after react 16: https://github.com/yannickcr/eslint-plugin-react/issues/1754
    "react/no-array-index-key": 0,
    "import/prefer-default-export": 0,
    // https://nolanlawson.com/2018/03/20/smaller-lodash-bundles-with-webpack-and-babel/
    "lodash/chaining": [2, "never"],
    "lodash/import-scope": [2, "method"],
    "react/destructuring-assignment": [2, "always", { "ignoreClassFields": true }],
    "jest/expect-expect": "error",
    "jest/prefer-hooks-on-top": "error",
    "jest/consistent-test-it": ["error", { "fn": "test", "withinDescribe": "it" }],
    "unicorn/no-abusive-eslint-disable": "error",
    "testing-library/prefer-screen-queries": "error",
    "testing-library/prefer-wait-for": "error"
  },
  // Testcases have less eslint rules applied to them
  "overrides": [
    {
      "files": [
        "**/*-fixture.{js,jsx}",
        "**/*.test.{js,jsx}",
        "**/*.test.a11y.{js,jsx}",
        "**/*.story.{js,jsx}"
      ],
      "rules": {
        "import/no-extraneous-dependencies": ["error", { "devDependencies": true }],
        "no-underscore-dangle": 0,
        "no-shadow": 0,
        "no-console": 0,
        "no-extend-native": 0,
        "no-restricted-imports": [
          "error",
          {
            "paths": [
              {
                "name": "@testing-library/jest-dom",
                "message": "@testing-library/jest-dom is already imported globally in /config/jest/setupTest.js"
              },
              {
                "name": "@storybook/react",
                "importNames": ["storiesOf"],
                "message": "`storiesOf` is deprecated. Please use Component Story Format (CSF) instead of `storiesOf`. https://storybook.js.org/docs/react/api/csf"
              }
            ],
            // would really like this to have a custom message, but its not available for patterns
            // SVGs can't be imported directly. They must be convert to react components via svgr cli first
            // https://github.com/carbon-design-system/carbon-addons-iot-react/blob/next/.github/CONTRIBUTING.MD#adding-new-svg-images
            "patterns": ["*.svg"]
          }
        ],
        "no-template-curly-in-string": 0,
        "react/prop-types": 0,
        "react/jsx-no-bind": 0
      }
    },
    {
      "files": ["**/*.test.e2e.{js,jsx}", "cypress/**"],
      "rules": {
        "jest/expect-expect": "off",
        "jest/valid-expect": "off",
        "jest/valid-describe": "off",
        "jest/valid-expect-in-promise": "off",
        "no-unused-expressions": "off",
        "testing-library/prefer-screen-queries": "off",
        "import/no-extraneous-dependencies": "off",
        "global-require": "off"
      }
    }
  ]
}
