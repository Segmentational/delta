{"version":3,"sources":["webpack://src/pages/GitLab/SCSS/Activity.module.scss","webpack://src/pages/GitLab/SCSS/Paginator.module.scss","webpack://src/pages/GitLab/SCSS/Overflow.scss","webpack://src/pages/GitLab/SCSS/Light.module.scss","webpack://src/pages/GitLab/SCSS/Bold.module.scss","webpack://src/pages/GitLab/SCSS/Tag.module.scss","webpack://src/pages/GitLab/SCSS/Code.module.scss","webpack://src/pages/Development/Code-Snippet-Awaitable/SCSS/Snippet.scss","webpack://src/Application.scss","webpack://node_modules/@carbon/grid/scss/modules/_breakpoint.scss","webpack://src/pages/Development/Code-Snippet-Awaitable/SCSS/Snippet.module.scss"],"names":[],"mappings":"AAAA,0BACI,eAAA,CAEA,qDACI,mBAAA,CACA,6BAAA,CAAA,0BAAA,CAAA,qBAAA,CCCR,uDACI,UAAA,CAEA,6CAAA,CAGJ,wBAKI,uDACI,gBAAA,CAAA,CClBR,yDACI,YAAA,CACA,UAAA,CAEA,qGACI,UAAA,CCJJ,yBACI,eAAA,CCDJ,uBACI,eAAA,CCFR,gBACI,6BAAA,CAAA,0BAAA,CAAA,qBAAA,CCDJ,kBACI,wBAAA,CAAA,qBAAA,CAAA,oBAAA,CAAA,gBAAA,CACA,kBAAA,CACA,gDAAA,CCHJ,wBACI,UAAA,CCoBJ,SACI,yBAAA,CACA,+BAAA,CACA,sBAAA,CAIJ,6BACI,gCAAA,CACA,eAAA,CACA,6BAAA,CACA,SAAA,CAIJ,oCACI,cAAA,CACA,kBAAA,CAIJ,2DACI,cAAA,CCqIE,wBDtIN,2DAGQ,iBAAA,CACA,kBAAA,CACA,mBAAA,CAAA,CASR,2aACI,WAAA,CAIA,yFACI,aAAA,CAMJ,iHACI,SAAA,CACA,iBAAA,CACA,UAAA,CACA,UAAA,CAIA,wKACI,gBAAA,CAIR,yHACI,kBAAA,CAKR,6HACI,oDAAA,CACA,uDAAA,CACA,0CAAA,CACA,gDAAA,CAIJ,8NAEI,cAAA,CAIJ,iJACI,oBAAA,CAIJ,kFACI,yBAAA,CAAA,0CAAA,CACA,mBAAA,CACA,UAAA,CAIJ,0EACI,6CAAA,CAIJ,sCACI,wCAAA,CAIJ,uCACI,iDAAA,CAIJ,6HACI,4CAAA,CACA,+CAAA,CACA,kCAAA,CACA,wCAAA,CAIJ,4FACI,yDAAA,CACA,sDAAA,CAIJ,8FACI,SAAA,CAGJ,kCACI,gCAAA,CAGJ,iCACI,4BAAA,CAGJ,oBACI,gCAAA,CAGJ,mBACI,4BAAA,CAOJ,wBACI,2DACI,iBAAA,CACA,kBAAA,CACA,mBAAA,CAAA,CAIR,6CACI,2DACI,mBAAA,CACA,oBAAA,CACA,qBAAA,CAAA,CAIR,wBACI,yCACI,cAAA,CAAA,CAqER,oFAlDI,wBAAA,CAEA,qBAAA,CACA,oBAAA,CAEA,gBAAA,CAqDJ,6DA5BI,uBAAA,CAEA,oBAAA,CACA,mBAAA,CAEA,eAAA,CE3OA,4BACI,UAAA,CFsNJ,wBAAA,CAEA,qBAAA,CACA,oBAAA,CAEA,gBAAA","file":"10.8019026b.chunk.css","sourcesContent":[".activity {\n    min-width: 110px;\n\n    & .paragraph {\n        display: inline-flex;\n        min-width: max-content;\n    }\n}\n",".paginator {\n    width: calc(100%);\n\n    border-top: 1px solid var(--cds-border-subtle);\n}\n\n.skeleton {\n    width: calc(100%);\n\n    border-top: 1px solid var(--cds-border-subtle);\n}\n\n@media (max-width: 42rem) {\n    .paginator {\n        overflow: visible;\n    }\n\n    .skeleton {\n        overflow: visible;\n    }\n}\n",".cds--menu.cds--menu--open.cds--menu--root.cds--menu--md {\n    outline: none;\n    color: white;\n\n    .cds--overflow-menu-options__option-content {\n        color: white;\n    }\n}\n",".light {\n    code {\n        font-weight: 300;\n    }\n}\n",".bold {\n    code {\n        font-weight: 800;\n    }\n}\n",".tag {\n    min-width: max-content;\n}\n",".code {\n    user-select: auto;\n    will-change: height;\n    transition: height 150ms cubic-bezier(0.2, 0, 0.38, 0.9);\n}\n",".cds--snippet-container {\n    width: 100%;\n}","/* =============================================================================\n --> Application Style Sheet (SCSS)\n*//*========================================================================= */\n\n$prefix: \"cds\";\n\n/* -------------------\n --> Namespace Imports\n*//*-----------------*/\n\n@use \"@carbon/react/scss/breakpoint\" as *;\n\n/* -------------------\n --> Global Overwrites\n*//*------------------ */\n\n/* -------------------------\n --> Table User Agent Styles\n*/\n// -----------------------\n\nth, tr, td {\n    box-shadow:     none !important;\n    vertical-align: middle !important;\n    outline:        none !important;\n}\n\n// Primary Content Container\n.#{$prefix}--content {\n    background: var(--cds-background);\n    margin-top: 3.0rem;\n    min-height: calc(100vh - 3.0rem);\n    padding:    0.0rem;\n}\n\n// Spinner\n.#{$prefix}--inline-loading {\n    height:     1.25rem;\n    min-height: 1.25rem;\n}\n\n// Content Container + Grid\n.#{$prefix}--content .#{$prefix}--css-grid {\n    max-width: 100%;\n    @include breakpoint(md) {\n        padding-left:   20px;\n        padding-right:  20px;\n        padding-bottom: 20px;\n    }\n}\n\n// Menu Notification Border\n.c4p--notifications-panel__container .c4p--notifications-panel__notification:focus {\n    //box-shadow: inset 0 0 0 2px var(--cds-focus),inset 0 0 0 2px var(--cds-focus);\n}\n\n.c4p--notifications-panel__container .c4p--notifications-panel__notification-today:not(:first-of-type):before, .c4p--notifications-panel__container .c4p--notifications-panel__notification-yesterday:not(:first-of-type):before, .c4p--notifications-panel__container .c4p--notifications-panel__notification-previous:not(:first-of-type):before {\n    top: 0.295rem;\n}\n\n.c4p--notifications-panel__settings-button {\n    .cds--btn__icon {\n        margin-left: 0.0rem;\n    }\n}\n\n// Menu Notifications Label\n.c4p--notifications-panel__container {\n    .c4p--notifications-panel__time-section-label {\n        z-index:  1;\n        position: absolute;\n        width:    100%;\n        top:      6.5rem;\n    }\n\n    .c4p--notifications-panel__notification {\n        .c4p--notifications-panel__notifications-link {\n            margin-top: 0.5rem;\n        }\n    }\n\n    .c4p--notifications-panel__notification:first-of-type {\n        margin-top: 1.75rem;\n    }\n}\n\n// Data Table Borders\ntr.#{$prefix}--parent-row.#{$prefix}--data-table--selected:not(.#{$prefix}--expandable-row):hover td {\n    border-top:    1px solid var(--cds-layer-selected-hover);\n    border-bottom: 1px solid var(--cds-layer-selected-hover);\n    background:    var(--cds-layer-selected-hover);\n    box-shadow:    0 1px var(--cds-layer-selected-hover);\n}\n\n// Data Table Checkboxes\n.#{$prefix}--data-table th.#{$prefix}--table-expand + .#{$prefix}--table-column-checkbox,\n.#{$prefix}--data-table td.#{$prefix}--table-expand + .#{$prefix}--table-column-checkbox {\n    min-width: 35px;\n}\n\n// Data Table Highlight Selected Row (*:--last-of-type)\ntr.#{$prefix}--parent-row.#{$prefix}--data-table--selected.#{$prefix}--expandable-row + tr[data-child-row]:last-of-type td {\n    padding-bottom: unset;\n}\n\n// Code Snippets\n.#{$prefix}--snippet--single .#{$prefix}--snippet-container:focus {\n    outline:        2px solid var(--cds-focus, #0F62FE);\n    outline-offset: -2px;\n    width:          100%;\n}\n\n// Data Table Pagination Separator\n.#{$prefix}--data-table-container + .#{$prefix}--pagination {\n    border-top: 1px solid var(--cds-border-subtle);\n}\n\n// Data Table Header Background\n.#{$prefix}--data-table thead {\n    background-color: var(--cds-layer-accent);\n}\n\n// Data Table Title + Header Separator\n.#{$prefix}--data-table-header {\n    border-bottom: 1px solid var(--cds-border-inverse) inset;\n}\n\n// Data Table Data Cell Expander\ntr.#{$prefix}--parent-row.#{$prefix}--data-table--selected:not(.#{$prefix}--expandable-row):hover td {\n    border-top:    1px solid var(--cds-layer-active);\n    border-bottom: 1px solid var(--cds-layer-active);\n    background:    var(--cds-layer-active);\n    box-shadow:    0 1px var(--cds-layer-active);\n}\n\n// Data Table Data Cell Expander\ntr.#{$prefix}--parent-row.#{$prefix}--data-table--selected:first-of-type td {\n    border-bottom: 1px solid var(--cds-layer-active) !important;\n    border-top:    1px solid var(--cds-layer-active) !important;\n}\n\n// Data Table Row & Expandable Optimizations\ntr.#{$prefix}--parent-row:not(.#{$prefix}--expandable-row) + tr[data-child-row] {\n    opacity: 0;\n}\n\ntr.#{$prefix}--parent-row {\n    will-change: background !important\n}\n\ntr.#{$prefix}--child-row {\n    will-change: height !important\n}\n\ntr[data-parent-row] {\n    will-change: background !important;\n}\n\ntr[data-child-row] {\n    will-change: height !important;\n}\n\n/* ------------------\n --> Media Queries\n*//*----------------- */\n\n@media (max-width: 42rem) {\n    .#{$prefix}--content .#{$prefix}--css-grid {\n        padding-left:   1.0rem;\n        padding-right:  1.0rem;\n        padding-bottom: 1.0rem;\n    }\n}\n\n@media (min-width: 42rem) and (min-width: 42rem) {\n    .#{$prefix}--content .#{$prefix}--css-grid {\n        padding-left:   1.5rem;\n        padding-right:  1.5rem;\n        padding-bottom: 1.5rem;\n    }\n}\n\n@media (min-width: 99rem) {\n    .#{$prefix}--inline-notification {\n        max-width: 100%;\n    }\n}\n\n;\n\n/* -------------------\n --> Functional Mixins\n*//*-----------------*/\n\n// @Unselectable, Highlightable Element(s)\n\n@mixin disable-selection { /*** Supported by Chrome, Edge, Opera and Firefox */\n    // - [] @Task: Test on Mobile\n    // >>> -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\n    // - [] @Task: Test on Mobile\n    // >>> -webkit-touch-callout: none; /* iOS Safari */\n\n    -webkit-user-select: none; /* Safari */\n    -khtml-user-select:  none; /* Konqueror HTML */\n    -moz-user-select:    none; /* Old versions of Firefox */\n    -ms-user-select:     none; /* Internet Explorer/Edge */\n\n    user-select:         none;\n}\n\n@mixin enable-selection-auto { /*** Supported by Chrome, Edge, Opera and Firefox */\n    // - [] @Task: Test on Mobile\n    // >>> -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\n    // - [] @Task: Test on Mobile\n    // >>> -webkit-touch-callout: none; /* iOS Safari */\n\n    -webkit-user-select: auto; /* Safari */\n    -khtml-user-select:  auto; /* Konqueror HTML */\n    -moz-user-select:    auto; /* Old versions of Firefox */\n    -ms-user-select:     auto; /* Internet Explorer/Edge */\n\n    user-select:         auto;\n}\n\n@mixin enable-selection-all { /*** Supported by Chrome, Edge, Opera and Firefox */\n    // - [] @Task: Test on Mobile\n    // >>> -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\n    // - [] @Task: Test on Mobile\n    // >>> -webkit-touch-callout: none; /* iOS Safari */\n\n    -webkit-user-select: all; /* Safari */\n    -khtml-user-select:  all; /* Konqueror HTML */\n    -moz-user-select:    all; /* Old versions of Firefox */\n    -ms-user-select:     all; /* Internet Explorer/Edge */\n\n    user-select:         all;\n}\n\n/* -------------------\n --> Utility Selectors\n*//*-----------------*/\n\n.no-select {\n    @include disable-selection();\n}\n\n.unselectable {\n    @include disable-selection();\n}\n\n.no-highlight {\n    @include disable-selection();\n}\n\n.select-all {\n    @include enable-selection-all();\n}\n\n.enable-select-all {\n    @include enable-selection-all();\n}\n\n/*\n    @Task -- Theme\n    @media (prefers-color-scheme: dark) {\n        [data-color-mode=auto][data-dark-theme=dark] {\n            --color-example-1: red;\n            --color-example-2: red;\n            --color-example-3: red;\n        }\n    }\n\n    @media (prefers-color-scheme: dark) {\n        [data-color-mode=auto][data-dark-theme=dark] {\n            --color-example-1: red;\n            --color-example-2: red;\n            --color-example-3: red;\n        }\n    }\n*/\n","//\n// Copyright IBM Corp. 2018, 2018\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n\n// https://github.com/twbs/bootstrap/blob/v4-dev/scss/mixins/_breakpoints.scss\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:meta';\n@use '@carbon/layout/scss/modules/convert';\n\n/// Map deep get\n/// @author Hugo Giraudel\n/// @access public\n/// @param {Map} $map - Map\n/// @param {Arglist} $keys - Key chain\n/// @return {*} Desired value\n/// @group @carbon/layout\n@function map-deep-get($map, $keys...) {\n  @each $key in $keys {\n    $map: map-get($map, $key);\n  }\n  @return $map;\n}\n\n/// Provide a map and index, and get back the relevant key value\n/// @access public\n/// @param {Map} $map - Map\n/// @param {Integer} $index - Key chain\n/// @return {String} Desired value\n/// @group @carbon/layout\n@function key-by-index($map, $index) {\n  $keys: map-keys($map);\n  @return nth($keys, $index);\n}\n\n/// Pass in a map, and get the last one in the list back\n/// @access public\n/// @param {Map} $map - Map\n/// @return {*} Desired value\n/// @group @carbon/layout\n@function last-map-item($map) {\n  $total-length: length($map);\n  @return map-get($map, key-by-index($map, $total-length));\n}\n\n/// Carbon gutter size in rem\n/// @type Number\n/// @access public\n/// @group @carbon/layout\n$grid-gutter: convert.rem(32px);\n\n/// Carbon condensed gutter size in rem\n/// @type Number\n/// @access public\n/// @group @carbon/layout\n$grid-gutter--condensed: convert.rem(1px);\n\n// Initial map of our breakpoints and their values\n/// @type Map\n/// @access public\n/// @group @carbon/layout\n$grid-breakpoints: (\n  sm: (\n    columns: 4,\n    margin: 0,\n    width: convert.rem(320px),\n  ),\n  md: (\n    columns: 8,\n    margin: convert.rem(16px),\n    width: convert.rem(672px),\n  ),\n  lg: (\n    columns: 16,\n    margin: convert.rem(16px),\n    width: convert.rem(1056px),\n  ),\n  xlg: (\n    columns: 16,\n    margin: convert.rem(16px),\n    width: convert.rem(1312px),\n  ),\n  max: (\n    columns: 16,\n    margin: convert.rem(24px),\n    width: convert.rem(1584px),\n  ),\n) !default;\n\n/// Get the value of the next breakpoint, or null for the last breakpoint\n/// @param {String} $name - The name of the breakpoint\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name of the breakpoint and the value is the values for the breakpoint\n/// @param {List} $breakpoint-names [map-keys($breakpoints)] - A list of names from the `$breakpoints` map\n/// @return {String}\n/// @access public\n/// @group @carbon/layout\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map.keys($breakpoints)\n) {\n  $n: list.index($breakpoint-names, $name);\n  @if $n != null and $n < list.length($breakpoint-names) {\n    @return list.nth($breakpoint-names, $n + 1);\n  }\n  @return null;\n}\n\n/// Get the value of the previous breakpoint, or null for the first breakpoint\n/// @param {String} $name - The name of the breakpoint\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name of the breakpoint and the value is the values for the breakpoint\n/// @param {List} $breakpoint-names [map-keys($breakpoints)] - A list of names from the `$breakpoints` map\n/// @return {String}\n/// @access public\n/// @group @carbon/layout\n@function breakpoint-prev(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map.keys($breakpoints)\n) {\n  $n: list.index($breakpoint-names, $name);\n  @if $n != null and $n > 1 {\n    @return list.nth($breakpoint-names, $n - 1);\n  }\n  @return null;\n}\n\n/// Check to see if the given breakpoint name\n/// @param {String} $name - The name of the breakpoint\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name of the breakpoint and the value is the values for the breakpoint\n/// @return {Bool}\n/// @access public\n/// @group @carbon/layout\n@function is-smallest-breakpoint($name, $breakpoints: $grid-breakpoints) {\n  @return list.index(map.keys($breakpoints), $name) == 1;\n}\n\n/// Returns the largest breakpoint name\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @return {String}\n/// @access public\n/// @group @carbon/layout\n@function largest-breakpoint-name($breakpoints: $grid-breakpoints) {\n  $total-breakpoints: list.length($breakpoints);\n  @return key-by-index($breakpoints, $total-breakpoints);\n}\n\n/// Get the infix for a given breakpoint in a list of breakpoints. Useful for generating the size part in a selector, for example: `.prefix--col-sm-2`.\n/// @param {String} $name - The name of the breakpoint\n/// @return {String}\n/// @access public\n/// @group @carbon/layout\n@function breakpoint-infix($name) {\n  @return '-#{$name}';\n}\n\n/// Generate a media query from the width of the given breakpoint to infinity\n/// @param {String | Number} $name\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  @if meta.type-of($name) == 'number' {\n    @media (min-width: $name) {\n      @content;\n    }\n  } @else if map.has-key($breakpoints, $name) {\n    $breakpoint: map.get($breakpoints, $name);\n    $width: map.get($breakpoint, width);\n    @if is-smallest-breakpoint($name, $breakpoints) {\n      @content;\n    } @else {\n      @media (min-width: $width) {\n        @content;\n      }\n    }\n  } @else {\n    @error 'Unable to find a breakpoint with name `#{$name}`. Expected one of: (#{map.keys($breakpoints)})';\n  }\n}\n\n/// Generate a media query for the maximum width of the given styles\n/// @param {String | Number} $name\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  @if meta.type-of($name) == 'number' {\n    @media (max-width: $name) {\n      @content;\n    }\n  } @else if map.has-key($breakpoints, $name) {\n    // We borrow this logic from bootstrap for specifying the value of the\n    // max-width. The maximum width is calculated by finding the breakpoint and\n    // subtracting .02 from its value. This value is used instead of .01 to\n    // avoid rounding issues in Safari\n    // https://github.com/twbs/bootstrap/blob/c5b1919deaf5393fcca9e9b9d7ce9c338160d99d/scss/mixins/_breakpoints.scss#L34-L46\n    $breakpoint: map.get($breakpoints, $name);\n    $width: map.get($breakpoint, width) - 0.02;\n    @media (max-width: $width) {\n      @content;\n    }\n  } @else {\n    @error 'Unable to find a breakpoint with name `#{$name}`. Expected one of: (#{map.keys($breakpoints)})';\n  }\n}\n\n/// Generate a media query for the range between the lower and upper breakpoints\n/// @param {String | Number} $lower\n/// @param {String | Number} $upper\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $is-number-lower: meta.type-of($lower) == 'number';\n  $is-number-upper: meta.type-of($upper) == 'number';\n  $min: if($is-number-lower, $lower, map.get($breakpoints, $lower));\n  $max: if($is-number-upper, $upper, map.get($breakpoints, $upper));\n\n  @if $min and $max {\n    $min-width: if(not $is-number-lower and $min, map.get($min, width), $min);\n    $max-width: if(not $is-number-upper and $max, map.get($max, width), $max);\n    @media (min-width: $min-width) and (max-width: $max-width) {\n      @content;\n    }\n  } @else if $min != null and $max == null {\n    @include breakpoint-up($lower) {\n      @content;\n    }\n  } @else if $min == null and $max != null {\n    @include breakpoint-down($upper) {\n      @content;\n    }\n  } @else {\n    @error 'Unable to find a breakpoint to satisfy: (#{$lower},#{$upper}). Expected both to be one of (#{map.keys($breakpoints)}).';\n  }\n}\n\n/// Generate media query for the largest breakpoint\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin largest-breakpoint($breakpoints: $grid-breakpoints) {\n  @include breakpoint(largest-breakpoint-name()) {\n    @content;\n  }\n}\n\n/// Generate a media query for a given breakpoint\n/// @param {String | Number} $name\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin breakpoint($name, $breakpoints: $grid-breakpoints) {\n  @include breakpoint-up($name, $breakpoints) {\n    @content;\n  }\n}\n","@use \"./../../../../Application\" as *;\n\n.snippet {\n    pre {\n        width: 100%;\n        @include enable-selection-auto();\n    }\n}"]}