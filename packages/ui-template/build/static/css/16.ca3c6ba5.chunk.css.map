{"version":3,"sources":["webpack://src/pages/Blog-3/SCSS/Grid.scss","webpack://src/pages/Blog-3/SCSS/Index.module.scss","webpack://node_modules/@carbon/type/scss/modules/_styles.scss","webpack://node_modules/@carbon/layout/scss/modules/generated/_spacing.scss","webpack://node_modules/@carbon/grid/scss/modules/_breakpoint.scss","webpack://src/pages/Blog-3/SCSS/Filter.scss","webpack://src/pages/Blog-3/SCSS/Card.scss","webpack://src/pages/Blog-3/List/SCSS/Index.scss","webpack://src/pages/Blog-3/List/SCSS/Index.module.scss"],"names":[],"mappings":"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","file":"16.ca3c6ba5.chunk.css","sourcesContent":[".blog-grid {\n    .blog-side-panel {\n        margin-right: 1.5rem;\n    }\n\n    .blog-grid-call-to-action {\n        margin-left:  -1.5rem;\n        margin-right: -1.5rem;\n    }\n\n    .blog-primary-content {\n        display:         flex;\n        flex-wrap:       wrap;\n\n        justify-content: space-around;\n\n        flex-basis:      100%;\n        max-width:       100%;\n\n        margin-bottom:   1.5rem;\n\n        .blog-content-card {\n            background: rgb(0, 0, 0);\n            padding:    1.25rem;\n\n            .blog-content-card-header-image {\n                width: 100%;\n            }\n        }\n\n        .blog-primary-content-showcase-item {\n            flex-basis: calc(42.5% - 1.0rem);\n            max-width:  calc(42.5% - 1.0rem);\n            margin:     0.0rem 0.0rem 0.0rem 0.0rem;\n        }\n\n        .blog-primary-content-normalized-item {\n            .blog-content-card-header-title {\n                text-align:    left;\n                margin-top:    1.0rem;\n                margin-bottom: 1.0rem;\n            }\n        }\n\n        .blog-primary-content-container {\n            flex-basis: calc(25% - 1.0rem);\n            max-width:  calc(25% - 1.0rem);\n            margin:     0.0rem 0.0rem 0.0rem 0.5rem;\n\n            .blog-primary-content-normalized-item {\n                margin-left:  auto;\n                margin-right: auto;\n            }\n\n            .blog-primary-content-normalized-item:not(:last-of-type) {\n                margin-bottom: 1.5rem;\n            }\n        }\n    }\n}","@use \"@carbon/react/scss/type\" as *;\n@use \"@carbon/react/scss/spacing\" as *;\n@use \"@carbon/react/scss/breakpoint\" as *;\n\n@use \"@carbon/styles/scss/utilities/convert\" as *;\n\n@mixin disable-selection { /*** Supported by Chrome, Edge, Opera and Firefox */\n    // - [] @Task: Test on Mobile\n    // >>> -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\n    // - [] @Task: Test on Mobile\n    // >>> -webkit-touch-callout: none; /* iOS Safari */\n\n    -webkit-user-select: none; /* Safari */\n    -khtml-user-select:  none; /* Konqueror HTML */\n    -moz-user-select:    none; /* Old versions of Firefox */\n    -ms-user-select:     none; /* Internet Explorer/Edge */\n\n    user-select:         none;\n}\n\n.page {\n    #{&}-heading {\n        @include type-style(\"productive-heading-07\");\n    }\n\n    #{&}-subheading {\n        @include type-style(\"productive-heading-03\");\n\n        font-weight: 600;\n    }\n\n    #{&}-primary-image {\n        max-width: 100%;\n    }\n\n    #{&}-call-to-action {\n        min-height: 100vh;\n    }\n\n    #{&}-page-banner {\n        padding-top:    $spacing-05;\n        padding-bottom: $spacing-07 * 4;\n        padding-left:   $spacing-06;\n\n        position:       relative;\n    }\n\n    #{&}-paragraph {\n        @include type-style(\"productive-heading-03\");\n        margin-top:    $spacing-05;\n        margin-bottom: $spacing-08;\n\n        @include breakpoint-between((320px + 1), md) {\n            max-width: 75%;\n        }\n    }\n\n    #{&}-row-2 {\n        margin-top:      var(--cds-spacing-01);\n        transform:       translateZ(0);\n        justify-content: flex-end;\n\n        .navigators {\n            padding-top:      $spacing-05;\n            padding-bottom:   $spacing-05;\n\n            background-color: transparent;\n            border-color:     transparent;\n            outline-color:    transparent;\n\n            box-shadow:       none;\n        }\n\n        .navigation {\n            background-color:    transparent;\n            border-color:        transparent;\n            outline-color:       transparent;\n\n            box-shadow:          none;\n\n            transition-property: all;\n\n            button {\n                background-color: transparent;\n                box-shadow:       none;\n                margin-left:      1.0rem;\n            }\n        }\n\n        .navigation:first-child {\n            button {\n                background-color: transparent;\n                box-shadow:       none;\n                margin-left:      0.0rem;\n            }\n        }\n    }\n\n    #{&}-row-3 {\n        background:   black;\n        margin-left:  -1.5rem;\n        margin-right: -1.5rem;\n\n        padding:      $spacing-09 $spacing-06;\n        position:     relative;\n    }\n\n    #{&}-info-section-heading {\n        @include type-style(\"heading-03\");\n    }\n\n    #{&}-info-card {\n        margin-top:     $spacing-09;\n        display:        flex;\n        flex-direction: column;\n        padding-left:   1rem;\n\n        svg {\n            margin-top: $spacing-09;\n        }\n\n        // top border in only small breakpoints to prevent overrides\n        @include breakpoint-down(md) {\n            &:not(:nth-child(2)) {\n                padding-top: $spacing-09;\n\n                border-top:  1px solid var(--cds-border-inverse);\n            }\n        }\n\n        // left border in just the 2nd column items\n        @include breakpoint(md) {\n            border-left: 1px solid var(--cds-border-inverse);\n        }\n\n        // left border in all items\n        @include breakpoint(lg) {\n            margin-top:  0;\n\n            border-left: 1px solid var(--cds-border-inverse);\n\n            svg {\n                margin-top: $spacing-12;\n            }\n        }\n    }\n\n    #{&}-info-card-heading {\n        @include type-style(\"productive-heading-03\");\n    }\n\n    #{&}-info-card-body {\n        margin-top: $spacing-06;\n\n        flex-grow:  1; // fill space so icons are bottom aligned\n\n        @include type-style(\"body-long-01\");\n\n        // prevent large line lengths between small and medium viewports\n        @include breakpoint-between(321px, md) {\n            max-width: 75%;\n        }\n    }\n\n    @media (max-width: 60.0rem) {\n        #{&}-primary-image {\n            display: none;\n        }\n\n    }\n}\n\n.component {\n    @include disable-selection();\n}\n\n.heading {\n    @include type-style(\"productive-heading-07\");\n}\n\n.subheading {\n    @include type-style(\"productive-heading-03\");\n    margin: $spacing-03 $spacing-06;\n}","//\n// Copyright IBM Corp. 2018, 2018\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n\n// stylelint-disable number-max-precision\n\n@use 'sass:map';\n@use '@carbon/layout';\n@use 'font-family';\n@use 'scale';\n\n/// @type Map\n/// @access public\n/// @deprecated\n/// @group @carbon/type\n$caption-01: (\n  font-size: scale.type-scale(1),\n  font-weight: font-family.font-weight('regular'),\n  line-height: 1.33333,\n  letter-spacing: 0.32px,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$label-01: (\n  font-size: scale.type-scale(1),\n  font-weight: font-family.font-weight('regular'),\n  line-height: 1.33333,\n  letter-spacing: 0.32px,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$legal-01: (\n  font-size: scale.type-scale(1),\n  font-weight: font-family.font-weight('regular'),\n  line-height: 1.33333,\n  letter-spacing: 0.32px,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$legal-02: (\n  font-size: scale.type-scale(2),\n  font-weight: font-family.font-weight('regular'),\n  line-height: 1.28572,\n  letter-spacing: 0.16px,\n) !default;\n\n/// @type Map\n/// @access public\n/// @deprecated\n/// @group @carbon/type\n$helper-text-01: (\n  font-size: scale.type-scale(1),\n  line-height: 1.33333,\n  letter-spacing: 0.32px,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$body-short-01: (\n  font-size: scale.type-scale(2),\n  font-weight: font-family.font-weight('regular'),\n  line-height: 1.28572,\n  letter-spacing: 0.16px,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$body-compact-01: $body-short-01 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$body-long-01: (\n  font-size: scale.type-scale(2),\n  font-weight: font-family.font-weight('regular'),\n  line-height: 1.42857,\n  letter-spacing: 0.16px,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$body-01: $body-long-01 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$body-short-02: (\n  font-size: scale.type-scale(3),\n  font-weight: font-family.font-weight('regular'),\n  line-height: 1.375,\n  letter-spacing: 0,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$body-compact-02: $body-short-02 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$body-long-02: (\n  font-size: scale.type-scale(3),\n  font-weight: font-family.font-weight('regular'),\n  line-height: 1.5,\n  letter-spacing: 0,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$body-02: $body-long-02 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$code-01: (\n  font-family: font-family.font-family('mono'),\n  font-size: scale.type-scale(1),\n  font-weight: font-family.font-weight('regular'),\n  line-height: 1.33333,\n  letter-spacing: 0.32px,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$code-02: (\n  font-family: font-family.font-family('mono'),\n  font-size: scale.type-scale(2),\n  font-weight: font-family.font-weight('regular'),\n  line-height: 1.42857,\n  letter-spacing: 0.32px,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$heading-01: (\n  font-size: scale.type-scale(2),\n  font-weight: font-family.font-weight('semibold'),\n  line-height: 1.42857,\n  letter-spacing: 0.16px,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$productive-heading-01: (\n  font-size: scale.type-scale(2),\n  font-weight: font-family.font-weight('semibold'),\n  line-height: 1.28572,\n  letter-spacing: 0.16px,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$heading-compact-01: $productive-heading-01 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$heading-02: (\n  font-size: scale.type-scale(3),\n  font-weight: font-family.font-weight('semibold'),\n  line-height: 1.5,\n  letter-spacing: 0,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$productive-heading-02: (\n  font-size: scale.type-scale(3),\n  font-weight: font-family.font-weight('semibold'),\n  line-height: 1.375,\n  letter-spacing: 0,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$heading-compact-02: $productive-heading-02 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$productive-heading-03: (\n  font-size: scale.type-scale(5),\n  font-weight: font-family.font-weight('regular'),\n  line-height: 1.4,\n  letter-spacing: 0,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$heading-03: $productive-heading-03 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$productive-heading-04: (\n  font-size: scale.type-scale(7),\n  font-weight: font-family.font-weight('regular'),\n  line-height: 1.28572,\n  letter-spacing: 0,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$heading-04: $productive-heading-04 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$productive-heading-05: (\n  font-size: scale.type-scale(8),\n  font-weight: font-family.font-weight('regular'),\n  line-height: 1.25,\n  letter-spacing: 0,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$heading-05: $productive-heading-05 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$productive-heading-06: (\n  font-size: scale.type-scale(8),\n  font-weight: font-family.font-weight('light'),\n  // Extra digit needed for precision in Chrome\n  line-height: 1.199,\n  letter-spacing: 0,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$heading-06: $productive-heading-06 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$productive-heading-07: (\n  font-size: scale.type-scale(10),\n  font-weight: font-family.font-weight('light'),\n  line-height: 1.19,\n  letter-spacing: 0,\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$heading-07: $productive-heading-07 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$expressive-heading-01: $heading-01 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$expressive-heading-02: $heading-02 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$expressive-heading-03: (\n  font-size: scale.type-scale(5),\n  font-weight: font-family.font-weight('regular'),\n  line-height: 1.4,\n  letter-spacing: 0,\n  breakpoints: (\n    xlg: (\n      font-size: scale.type-scale(5),\n      line-height: 1.25,\n    ),\n    max: (\n      font-size: scale.type-scale(6),\n      line-height: 1.334,\n    ),\n  ),\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$fluid-heading-03: $expressive-heading-03 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$expressive-heading-04: (\n  font-size: scale.type-scale(7),\n  font-weight: font-family.font-weight('regular'),\n  line-height: 1.28572,\n  letter-spacing: 0,\n  breakpoints: (\n    xlg: (\n      font-size: scale.type-scale(7),\n      line-height: 1.25,\n    ),\n    max: (\n      font-size: scale.type-scale(8),\n    ),\n  ),\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$fluid-heading-04: $expressive-heading-04 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$expressive-heading-05: (\n  font-size: scale.type-scale(8),\n  font-weight: font-family.font-weight('regular'),\n  line-height: 1.25,\n  letter-spacing: 0,\n  breakpoints: (\n    md: (\n      font-size: scale.type-scale(9),\n      font-weight: font-family.font-weight('light'),\n      line-height: 1.22,\n    ),\n    lg: (\n      font-size: scale.type-scale(10),\n      line-height: 1.19,\n    ),\n    xlg: (\n      font-size: scale.type-scale(11),\n      line-height: 1.17,\n    ),\n    max: (\n      font-size: scale.type-scale(13),\n    ),\n  ),\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$fluid-heading-05: $expressive-heading-05 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$expressive-heading-06: (\n  font-size: scale.type-scale(8),\n  font-weight: font-family.font-weight('semibold'),\n  line-height: 1.25,\n  letter-spacing: 0,\n  breakpoints: (\n    md: (\n      font-size: scale.type-scale(9),\n      line-height: 1.22,\n    ),\n    lg: (\n      font-size: scale.type-scale(10),\n      line-height: 1.19,\n    ),\n    xlg: (\n      font-size: scale.type-scale(11),\n      line-height: 1.17,\n    ),\n    max: (\n      font-size: scale.type-scale(13),\n    ),\n  ),\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$fluid-heading-06: $expressive-heading-06 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$expressive-paragraph-01: (\n  font-size: scale.type-scale(6),\n  font-weight: font-family.font-weight('light'),\n  line-height: 1.334,\n  letter-spacing: 0,\n  breakpoints: (\n    lg: (\n      font-size: scale.type-scale(7),\n      line-height: 1.28572,\n    ),\n    max: (\n      font-size: scale.type-scale(8),\n      line-height: 1.25,\n    ),\n  ),\n);\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$fluid-paragraph-01: $expressive-paragraph-01 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$quotation-01: (\n  font-family: font-family.font-family('serif'),\n  font-size: scale.type-scale(5),\n  font-weight: font-family.font-weight('regular'),\n  line-height: 1.3,\n  letter-spacing: 0,\n  breakpoints: (\n    md: (\n      font-size: scale.type-scale(5),\n    ),\n    lg: (\n      font-size: scale.type-scale(6),\n      line-height: 1.334,\n    ),\n    xlg: (\n      font-size: scale.type-scale(7),\n      line-height: 1.28572,\n    ),\n    max: (\n      font-size: scale.type-scale(8),\n      line-height: 1.25,\n    ),\n  ),\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$fluid-quotation-01: $quotation-01 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$quotation-02: (\n  font-family: font-family.font-family('serif'),\n  font-size: scale.type-scale(8),\n  font-weight: font-family.font-weight('light'),\n  line-height: 1.25,\n  letter-spacing: 0,\n  breakpoints: (\n    md: (\n      font-size: scale.type-scale(9),\n      line-height: 1.22,\n    ),\n    lg: (\n      font-size: scale.type-scale(10),\n      line-height: 1.19,\n    ),\n    xlg: (\n      font-size: scale.type-scale(11),\n      line-height: 1.17,\n    ),\n    max: (\n      font-size: scale.type-scale(13),\n    ),\n  ),\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$fluid-quotation-02: $quotation-02 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$display-01: (\n  font-size: scale.type-scale(10),\n  font-weight: font-family.font-weight('light'),\n  line-height: 1.19,\n  letter-spacing: 0,\n  breakpoints: (\n    md: (\n      font-size: scale.type-scale(10),\n    ),\n    lg: (\n      font-size: scale.type-scale(12),\n    ),\n    xlg: (\n      font-size: scale.type-scale(13),\n      line-height: 1.17,\n    ),\n    max: (\n      font-size: scale.type-scale(15),\n      line-height: 1.13,\n    ),\n  ),\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$fluid-display-01: $display-01 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$display-02: (\n  font-size: scale.type-scale(10),\n  font-weight: font-family.font-weight('semibold'),\n  line-height: 1.19,\n  letter-spacing: 0,\n  breakpoints: (\n    md: (\n      font-size: scale.type-scale(10),\n    ),\n    lg: (\n      font-size: scale.type-scale(12),\n    ),\n    xlg: (\n      font-size: scale.type-scale(13),\n      line-height: 1.16,\n    ),\n    max: (\n      font-size: scale.type-scale(15),\n      line-height: 1.13,\n    ),\n  ),\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$fluid-display-02: $display-02 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$display-03: (\n  font-size: scale.type-scale(10),\n  font-weight: font-family.font-weight('light'),\n  line-height: 1.19,\n  letter-spacing: 0,\n  breakpoints: (\n    md: (\n      font-size: scale.type-scale(14),\n      line-height: 1.15,\n    ),\n    lg: (\n      font-size: scale.type-scale(17),\n      line-height: 1.11,\n      letter-spacing: -0.64px,\n    ),\n    xlg: (\n      font-size: scale.type-scale(20),\n      line-height: 1.07,\n      letter-spacing: -0.64px,\n    ),\n    max: (\n      font-size: scale.type-scale(23),\n      line-height: 1.05,\n      letter-spacing: -0.96px,\n    ),\n  ),\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$fluid-display-03: $display-03 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$display-04: (\n  font-size: scale.type-scale(10),\n  font-weight: font-family.font-weight('semibold'),\n  line-height: 1.19,\n  letter-spacing: 0,\n  breakpoints: (\n    md: (\n      font-size: scale.type-scale(14),\n      line-height: 1.15,\n    ),\n    lg: (\n      font-size: scale.type-scale(17),\n      line-height: 1.11,\n      letter-spacing: -0.64px,\n    ),\n    xlg: (\n      font-size: scale.type-scale(20),\n      line-height: 1.07,\n      letter-spacing: -0.64px,\n    ),\n    max: (\n      font-size: scale.type-scale(23),\n      line-height: 1.05,\n      letter-spacing: -0.96px,\n    ),\n  ),\n) !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$fluid-display-04: $display-04 !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/type\n$tokens: (\n  caption-01: $caption-01,\n  label-01: $label-01,\n  helper-text-01: $helper-text-01,\n  body-short-01: $body-short-01,\n  body-short-02: $body-short-02,\n  body-long-01: $body-long-01,\n  body-long-02: $body-long-02,\n  code-01: $code-01,\n  code-02: $code-02,\n  heading-01: $heading-01,\n  heading-02: $heading-02,\n  productive-heading-01: $productive-heading-01,\n  productive-heading-02: $productive-heading-02,\n  productive-heading-03: $productive-heading-03,\n  productive-heading-04: $productive-heading-04,\n  productive-heading-05: $productive-heading-05,\n  productive-heading-06: $productive-heading-06,\n  productive-heading-07: $productive-heading-07,\n  expressive-paragraph-01: $expressive-paragraph-01,\n  expressive-heading-01: $expressive-heading-01,\n  expressive-heading-02: $expressive-heading-02,\n  expressive-heading-03: $expressive-heading-03,\n  expressive-heading-04: $expressive-heading-04,\n  expressive-heading-05: $expressive-heading-05,\n  expressive-heading-06: $expressive-heading-06,\n  quotation-01: $quotation-01,\n  quotation-02: $quotation-02,\n  display-01: $display-01,\n  display-02: $display-02,\n  display-03: $display-03,\n  display-04: $display-04,\n  // V11 Tokens\n  legal-01: $legal-01,\n  legal-02: $legal-02,\n  body-compact-01: $body-compact-01,\n  body-compact-02: $body-compact-02,\n  heading-compact-01: $heading-compact-01,\n  heading-compact-02: $heading-compact-02,\n  body-01: $body-01,\n  body-02: $body-02,\n  heading-03: $heading-03,\n  heading-04: $heading-04,\n  heading-05: $heading-05,\n  heading-06: $heading-06,\n  heading-07: $heading-07,\n  fluid-heading-03: $fluid-heading-03,\n  fluid-heading-04: $fluid-heading-04,\n  fluid-heading-05: $fluid-heading-05,\n  fluid-heading-06: $fluid-heading-06,\n  fluid-paragraph-01: $fluid-paragraph-01,\n  fluid-quotation-01: $fluid-quotation-01,\n  fluid-quotation-02: $fluid-quotation-02,\n  fluid-display-01: $fluid-display-01,\n  fluid-display-02: $fluid-display-02,\n  fluid-display-03: $fluid-display-03,\n  fluid-display-04: $fluid-display-04,\n);\n\n/// @param {Map} $map\n/// @access public\n/// @group @carbon/type\n@mixin properties($map) {\n  @each $name, $value in $map {\n    #{$name}: $value;\n  }\n}\n\n/// @param {Number} $value - Number with units\n/// @return {Number} Without units\n/// @access public\n/// @group @carbon/type\n@function strip-unit($value) {\n  @return $value / ($value * 0 + 1);\n}\n\n/// This helper includes fluid type styles for the given token value. Fluid type\n/// means that the `font-size` is computed using `calc()` in order to be\n/// determined by the screen size instead of a breakpoint. As a result, fluid\n/// styles should be used with caution in fixed width contexts.\n///\n/// In addition, we make use of %-based line-heights so that the line-height of\n/// each type style is computed correctly due to the dynamic nature of the\n/// `font-size`.\n///\n/// Most of the logic for this work comes from CSS Tricks:\n/// https://css-tricks.com/snippets/css/fluid-typography/\n///\n/// @param {Map} $type-styles - The value of a given type token\n/// @param {Map} $breakpoints [$grid-breakpoints] - Custom breakpoints to use\n/// @access public\n/// @group @carbon/type\n@mixin fluid-type($type-styles, $breakpoints: layout.$grid-breakpoints) {\n  // Include the initial styles for the given token by default without any\n  // media query guard. This includes `font-size` as a fallback in the case\n  // that a browser does not support `calc()`\n  @include properties(map.remove($type-styles, breakpoints));\n  // We also need to include the `sm` styles by default since they don't\n  // appear in the fluid styles for tokens\n  @include fluid-type-size($type-styles, sm, $breakpoints);\n\n  // Finally, we need to go through all the breakpoints defined in the type\n  // token and apply the properties and fluid type size for that given\n  // breakpoint\n  @each $name, $values in map.get($type-styles, breakpoints) {\n    @include layout.breakpoint($name) {\n      @include properties($values);\n      @include fluid-type-size($type-styles, $name, $breakpoints);\n    }\n  }\n}\n\n/// Computes the fluid `font-size` for a given type style and breakpoint\n/// @param {Map} $type-styles - The styles for a given token\n/// @param {String} $name - The name of the breakpoint to which we apply the fluid\n/// @param {Map} $breakpoints [$grid-breakpoints] - The breakpoints for the grid system\n/// @access public\n/// @group @carbon/type\n@mixin fluid-type-size(\n  $type-styles,\n  $name,\n  $breakpoints: layout.$grid-breakpoints\n) {\n  // Get the information about the breakpoint we're currently working in. Useful\n  // for getting initial width information\n  $breakpoint: map.get($breakpoints, $name);\n\n  // Our fluid styles are captured under the 'breakpoints' property in our type\n  // styles map. These define what values to treat as `max-` variables below\n  $fluid-sizes: map.get($type-styles, breakpoints);\n  $fluid-breakpoint: ();\n  // Special case for `sm` because the styles for small are on the type style\n  // directly\n  @if $name == sm {\n    $fluid-breakpoint: map.remove($type-styles, breakpoints);\n  } @else {\n    $fluid-breakpoint: map.get($fluid-sizes, $name);\n  }\n\n  // Initialize our font-sizes to the default size for the type style\n  $max-font-size: map.get($type-styles, font-size);\n  $min-font-size: map.get($type-styles, font-size);\n  @if map.has-key($fluid-breakpoint, font-size) {\n    $min-font-size: map.get($fluid-breakpoint, font-size);\n  }\n\n  // Initialize our min and max width to the width of the current breakpoint\n  $max-vw: map.get($breakpoint, width);\n  $min-vw: map.get($breakpoint, width);\n\n  // We can use `breakpoint-next` to see if there is another breakpoint we can\n  // use to update `max-font-size` and `max-vw` with larger values\n  $next-breakpoint-available: layout.breakpoint-next($name, $breakpoints);\n  $next-fluid-breakpoint-name: null;\n\n  // We need to figure out what the next available fluid breakpoint is for our\n  // given $type-styles. In this loop we try and iterate through breakpoints\n  // until we either manually set $next-breakpoint-available to null or\n  // `breakpoint-next` returns null.\n  @while $next-breakpoint-available {\n    @if map.has-key($fluid-sizes, $next-breakpoint-available) {\n      $next-fluid-breakpoint-name: $next-breakpoint-available;\n      $next-breakpoint-available: null;\n    } @else {\n      $next-breakpoint-available: layout.breakpoint-next(\n        $next-breakpoint-available,\n        $breakpoints\n      );\n    }\n  }\n\n  // If we have found the next available fluid breakpoint name, then we know\n  // that we have values that we can use to set max-font-size and max-vw as both\n  // values derive from the next breakpoint\n  @if $next-fluid-breakpoint-name {\n    $next-fluid-breakpoint: map.get($breakpoints, $next-fluid-breakpoint-name);\n    $max-font-size: map.get(\n      map.get($fluid-sizes, $next-fluid-breakpoint-name),\n      font-size\n    );\n    $max-vw: map.get($next-fluid-breakpoint, width);\n\n    // prettier-ignore\n    font-size: calc(#{$min-font-size} +\n      #{strip-unit($max-font-size - $min-font-size)} *\n      ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})\n    );\n  } @else {\n    // Otherwise, just default to setting the font size found from the type\n    // style or the given fluid breakpoint in the type style\n    font-size: $min-font-size;\n  }\n}\n\n// TODO move following variable and `custom-property` mixin into shared file for\n// both `@carbon/type` and `@carbon/themes`\n\n/// @access private\n/// @group @carbon/type\n$custom-property-prefix: 'cds' !default;\n\n/// @access private\n/// @group @carbon/type\n@mixin custom-properties($name, $value) {\n  @each $property, $value in $value {\n    #{$property}: var(\n      --#{$custom-property-prefix}-#{$name}-#{$property},\n      #{$value}\n    );\n  }\n}\n\n/// Helper mixin to include the styles for a given token in any selector in your\n/// project. Also includes an optional fluid option that will enable fluid\n/// styles for the token if they are defined. Fluid styles will cause the\n/// token's font-size to be computed based on the viewport size. As a result, use\n/// with caution in fixed contexts.\n/// @param {String} $name - The name of the token to get the styles for\n/// @param {Boolean} $fluid [false] - Specify whether to include fluid styles for the\n/// @param {Map} $breakpoints [$grid-breakpoints] - Provide a custom breakpoint map to use\n/// @access public\n/// @group @carbon/type\n@mixin type-style(\n  $name,\n  $fluid: false,\n  $breakpoints: layout.$grid-breakpoints\n) {\n  @if not map.has-key($tokens, $name) {\n    @error 'Unable to find a token with the name: `#{$name}`';\n  }\n\n  $token: map.get($tokens, $name);\n\n  // If $fluid is set to true and the token has breakpoints defined for fluid\n  // styles, delegate to the fluid-type helper for the given token\n  @if $fluid == true and map.has-key($token, 'breakpoints') {\n    @include fluid-type($token, $breakpoints);\n  } @else {\n    @if global-variable-exists('feature-flags') and\n      map.get($feature-flags, 'enable-css-custom-properties')\n    {\n      @include custom-properties($name, $token);\n    } @else {\n      // Otherwise, we just include all the property declarations directly on the\n      // selector\n      @include properties(map.remove($token, 'breakpoints'));\n    }\n  }\n}\n","// Code generated by @carbon/layout. DO NOT EDIT.\n//\n// Copyright IBM Corp. 2018, 2019\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n\n/// @type Number\n/// @access public\n/// @group @carbon/layout\n$spacing-01: 0.125rem !default;\n\n/// @type Number\n/// @access public\n/// @group @carbon/layout\n$spacing-02: 0.25rem !default;\n\n/// @type Number\n/// @access public\n/// @group @carbon/layout\n$spacing-03: 0.5rem !default;\n\n/// @type Number\n/// @access public\n/// @group @carbon/layout\n$spacing-04: 0.75rem !default;\n\n/// @type Number\n/// @access public\n/// @group @carbon/layout\n$spacing-05: 1rem !default;\n\n/// @type Number\n/// @access public\n/// @group @carbon/layout\n$spacing-06: 1.5rem !default;\n\n/// @type Number\n/// @access public\n/// @group @carbon/layout\n$spacing-07: 2rem !default;\n\n/// @type Number\n/// @access public\n/// @group @carbon/layout\n$spacing-08: 2.5rem !default;\n\n/// @type Number\n/// @access public\n/// @group @carbon/layout\n$spacing-09: 3rem !default;\n\n/// @type Number\n/// @access public\n/// @group @carbon/layout\n$spacing-10: 4rem !default;\n\n/// @type Number\n/// @access public\n/// @group @carbon/layout\n$spacing-11: 5rem !default;\n\n/// @type Number\n/// @access public\n/// @group @carbon/layout\n$spacing-12: 6rem !default;\n\n/// @type Number\n/// @access public\n/// @group @carbon/layout\n$spacing-13: 10rem !default;\n\n/// @type Map\n/// @access public\n/// @group @carbon/layout\n$spacing: (\n  spacing-01: $spacing-01,\n  spacing-02: $spacing-02,\n  spacing-03: $spacing-03,\n  spacing-04: $spacing-04,\n  spacing-05: $spacing-05,\n  spacing-06: $spacing-06,\n  spacing-07: $spacing-07,\n  spacing-08: $spacing-08,\n  spacing-09: $spacing-09,\n  spacing-10: $spacing-10,\n  spacing-11: $spacing-11,\n  spacing-12: $spacing-12,\n  spacing-13: $spacing-13,\n);\n","//\n// Copyright IBM Corp. 2018, 2018\n//\n// This source code is licensed under the Apache-2.0 license found in the\n// LICENSE file in the root directory of this source tree.\n//\n\n// https://github.com/twbs/bootstrap/blob/v4-dev/scss/mixins/_breakpoints.scss\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:meta';\n@use '@carbon/layout/scss/modules/convert';\n\n/// Map deep get\n/// @author Hugo Giraudel\n/// @access public\n/// @param {Map} $map - Map\n/// @param {Arglist} $keys - Key chain\n/// @return {*} Desired value\n/// @group @carbon/layout\n@function map-deep-get($map, $keys...) {\n  @each $key in $keys {\n    $map: map-get($map, $key);\n  }\n  @return $map;\n}\n\n/// Provide a map and index, and get back the relevant key value\n/// @access public\n/// @param {Map} $map - Map\n/// @param {Integer} $index - Key chain\n/// @return {String} Desired value\n/// @group @carbon/layout\n@function key-by-index($map, $index) {\n  $keys: map-keys($map);\n  @return nth($keys, $index);\n}\n\n/// Pass in a map, and get the last one in the list back\n/// @access public\n/// @param {Map} $map - Map\n/// @return {*} Desired value\n/// @group @carbon/layout\n@function last-map-item($map) {\n  $total-length: length($map);\n  @return map-get($map, key-by-index($map, $total-length));\n}\n\n/// Carbon gutter size in rem\n/// @type Number\n/// @access public\n/// @group @carbon/layout\n$grid-gutter: convert.rem(32px);\n\n/// Carbon condensed gutter size in rem\n/// @type Number\n/// @access public\n/// @group @carbon/layout\n$grid-gutter--condensed: convert.rem(1px);\n\n// Initial map of our breakpoints and their values\n/// @type Map\n/// @access public\n/// @group @carbon/layout\n$grid-breakpoints: (\n  sm: (\n    columns: 4,\n    margin: 0,\n    width: convert.rem(320px),\n  ),\n  md: (\n    columns: 8,\n    margin: convert.rem(16px),\n    width: convert.rem(672px),\n  ),\n  lg: (\n    columns: 16,\n    margin: convert.rem(16px),\n    width: convert.rem(1056px),\n  ),\n  xlg: (\n    columns: 16,\n    margin: convert.rem(16px),\n    width: convert.rem(1312px),\n  ),\n  max: (\n    columns: 16,\n    margin: convert.rem(24px),\n    width: convert.rem(1584px),\n  ),\n) !default;\n\n/// Get the value of the next breakpoint, or null for the last breakpoint\n/// @param {String} $name - The name of the breakpoint\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name of the breakpoint and the value is the values for the breakpoint\n/// @param {List} $breakpoint-names [map-keys($breakpoints)] - A list of names from the `$breakpoints` map\n/// @return {String}\n/// @access public\n/// @group @carbon/layout\n@function breakpoint-next(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map.keys($breakpoints)\n) {\n  $n: list.index($breakpoint-names, $name);\n  @if $n != null and $n < list.length($breakpoint-names) {\n    @return list.nth($breakpoint-names, $n + 1);\n  }\n  @return null;\n}\n\n/// Get the value of the previous breakpoint, or null for the first breakpoint\n/// @param {String} $name - The name of the breakpoint\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name of the breakpoint and the value is the values for the breakpoint\n/// @param {List} $breakpoint-names [map-keys($breakpoints)] - A list of names from the `$breakpoints` map\n/// @return {String}\n/// @access public\n/// @group @carbon/layout\n@function breakpoint-prev(\n  $name,\n  $breakpoints: $grid-breakpoints,\n  $breakpoint-names: map.keys($breakpoints)\n) {\n  $n: list.index($breakpoint-names, $name);\n  @if $n != null and $n > 1 {\n    @return list.nth($breakpoint-names, $n - 1);\n  }\n  @return null;\n}\n\n/// Check to see if the given breakpoint name\n/// @param {String} $name - The name of the breakpoint\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name of the breakpoint and the value is the values for the breakpoint\n/// @return {Bool}\n/// @access public\n/// @group @carbon/layout\n@function is-smallest-breakpoint($name, $breakpoints: $grid-breakpoints) {\n  @return list.index(map.keys($breakpoints), $name) == 1;\n}\n\n/// Returns the largest breakpoint name\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @return {String}\n/// @access public\n/// @group @carbon/layout\n@function largest-breakpoint-name($breakpoints: $grid-breakpoints) {\n  $total-breakpoints: list.length($breakpoints);\n  @return key-by-index($breakpoints, $total-breakpoints);\n}\n\n/// Get the infix for a given breakpoint in a list of breakpoints. Useful for generating the size part in a selector, for example: `.prefix--col-sm-2`.\n/// @param {String} $name - The name of the breakpoint\n/// @return {String}\n/// @access public\n/// @group @carbon/layout\n@function breakpoint-infix($name) {\n  @return '-#{$name}';\n}\n\n/// Generate a media query from the width of the given breakpoint to infinity\n/// @param {String | Number} $name\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  @if meta.type-of($name) == 'number' {\n    @media (min-width: $name) {\n      @content;\n    }\n  } @else if map.has-key($breakpoints, $name) {\n    $breakpoint: map.get($breakpoints, $name);\n    $width: map.get($breakpoint, width);\n    @if is-smallest-breakpoint($name, $breakpoints) {\n      @content;\n    } @else {\n      @media (min-width: $width) {\n        @content;\n      }\n    }\n  } @else {\n    @error 'Unable to find a breakpoint with name `#{$name}`. Expected one of: (#{map.keys($breakpoints)})';\n  }\n}\n\n/// Generate a media query for the maximum width of the given styles\n/// @param {String | Number} $name\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  @if meta.type-of($name) == 'number' {\n    @media (max-width: $name) {\n      @content;\n    }\n  } @else if map.has-key($breakpoints, $name) {\n    // We borrow this logic from bootstrap for specifying the value of the\n    // max-width. The maximum width is calculated by finding the breakpoint and\n    // subtracting .02 from its value. This value is used instead of .01 to\n    // avoid rounding issues in Safari\n    // https://github.com/twbs/bootstrap/blob/c5b1919deaf5393fcca9e9b9d7ce9c338160d99d/scss/mixins/_breakpoints.scss#L34-L46\n    $breakpoint: map.get($breakpoints, $name);\n    $width: map.get($breakpoint, width) - 0.02;\n    @media (max-width: $width) {\n      @content;\n    }\n  } @else {\n    @error 'Unable to find a breakpoint with name `#{$name}`. Expected one of: (#{map.keys($breakpoints)})';\n  }\n}\n\n/// Generate a media query for the range between the lower and upper breakpoints\n/// @param {String | Number} $lower\n/// @param {String | Number} $upper\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $is-number-lower: meta.type-of($lower) == 'number';\n  $is-number-upper: meta.type-of($upper) == 'number';\n  $min: if($is-number-lower, $lower, map.get($breakpoints, $lower));\n  $max: if($is-number-upper, $upper, map.get($breakpoints, $upper));\n\n  @if $min and $max {\n    $min-width: if(not $is-number-lower and $min, map.get($min, width), $min);\n    $max-width: if(not $is-number-upper and $max, map.get($max, width), $max);\n    @media (min-width: $min-width) and (max-width: $max-width) {\n      @content;\n    }\n  } @else if $min != null and $max == null {\n    @include breakpoint-up($lower) {\n      @content;\n    }\n  } @else if $min == null and $max != null {\n    @include breakpoint-down($upper) {\n      @content;\n    }\n  } @else {\n    @error 'Unable to find a breakpoint to satisfy: (#{$lower},#{$upper}). Expected both to be one of (#{map.keys($breakpoints)}).';\n  }\n}\n\n/// Generate media query for the largest breakpoint\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin largest-breakpoint($breakpoints: $grid-breakpoints) {\n  @include breakpoint(largest-breakpoint-name()) {\n    @content;\n  }\n}\n\n/// Generate a media query for a given breakpoint\n/// @param {String | Number} $name\n/// @param {Map} $breakpoints [$grid-breakpoints] - A map of breakpoints where the key is the name\n/// @content\n/// @access public\n/// @group @carbon/layout\n@mixin breakpoint($name, $breakpoints: $grid-breakpoints) {\n  @include breakpoint-up($name, $breakpoints) {\n    @content;\n  }\n}\n",".blog-side-panel {\n    display: flex;\n}\n\n.blog-side-panel-filter {\n    //width: 100%;\n\n    margin-top:    auto;\n    margin-bottom: auto;\n\n    display:       inline-flex;\n\n    .cds--accordion__heading {\n        background-color: black\n    }\n\n    .cds--accordion__item--active {\n        overflow: scroll;\n    }\n\n    .cds--accordion__item--active .cds--accordion__content {\n        padding-bottom: 1.0rem;\n    }\n\n    .security--filter-panel {\n        background-color: black;\n    }\n\n    .security--filter-panel__category-list {\n        background-color: black;\n    }\n\n    .security--filter-category {\n        background-color: black;\n    }\n\n    .security--filter-category__title {\n        margin: 0.75rem;\n    }\n\n    .security--filter-panel__title {\n        padding: 0.5rem;\n    }\n\n    .security--filter-search__results {\n        padding: 1.0rem;\n    }\n\n    h1 {\n        font-size: 1.125rem;\n    }\n\n    h2 {\n        font-size: 1.00rem;\n    }\n\n    h3 {\n        font-size: 1.00rem;\n    }\n\n    .security--filter-search__subcategory {\n        ul {\n            padding-left: 1.5rem;\n        }\n\n        ul:last-of-type {\n            margin-bottom: 0.5rem;\n        }\n    }\n}",".blog-content-card-header-title {\n    font-size: 3.0rem;\n}\n\n.blog-content-card-header-image {\n    max-width:    150px;\n    margin-right: auto;\n    margin-left:  auto;\n    display:      flex;\n}\n\n.blog-content-card-author-name {\n    margin-top:    1.0rem;\n    margin-bottom: 1.0rem;\n    color:         gray;\n    font-size:     0.915rem;\n}\n\n.blog-content-card-header-title {\n    text-align:    left;\n    font-size:     3.5rem;\n    margin-top:    1.0rem;\n    margin-bottom: 1.0rem;\n}\n\n.blog-content-card-estimated-read-duration {\n    margin-top:     1.0rem;\n    margin-bottom:  1.0rem;\n    display:        flex;\n    vertical-align: middle;\n    color:          gray;\n    font-size:      0.915rem;\n}\n\n.blog-content-card-estimated-read-duration-icon {\n    margin-right: 0.5rem;\n}\n\n.blog-content-card-synopsis {\n    font-size: 1.25rem;\n}\n\n.blog-grid {\n    .blog-primary-content {\n        .blog-content-card {\n            border:                     1px solid white;\n\n            outline:                    1px solid white;\n            outline-offset:             -2px;\n\n            max-height:                 min-content;\n\n            transition-duration:        150ms;\n            transition-property:        box-shadow;\n            transition-timing-function: cubic-bezier(0.2, 0, 0.38, 0.9);\n\n            margin-top:                 auto;\n            margin-bottom:              auto;\n\n        }\n\n        .blog-content-card:hover {\n            cursor:     pointer;\n\n            box-shadow: 0px 1px 15px 7.5px black;\n        }\n    }\n}",".primary-data-column {\n    width: auto;\n}\n\n.data-table-row-selection-navigator {\n    margin-top: 1.0rem;\n}",".body {\n    & .row {\n        .tag {\n            margin: 0.25rem;\n        }\n\n        //.tag:not(:last-of-type) {\n        //    margin-right: 0.5rem;\n        //}\n    }\n\n    & .row:hover {\n        background-color: var(--cds-background-hover) !important;\n    }\n}"]}