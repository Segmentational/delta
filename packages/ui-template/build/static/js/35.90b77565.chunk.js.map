{"version":3,"sources":["pages/Error/Test.js"],"names":["namespace","labels","DATA_DECORATOR_PRIMARY_BUTTON","DATA_DECORATOR_SECONDARY_BUTTON","DATA_DECORATOR_CLOSE_BUTTON","FILTER_PANEL_CATEGORY_EXPAND_LABEL","FILTER_PANEL_CATEGORY_COLLAPSE_LABEL","FILTER_PANEL_SEARCH_LABEL","FILTER_PANEL_SEARCH_NO_RESULTS_LABEL","FILTER_PANEL_SEARCH_CLOSE_BUTTON","PANEL_CONTAINER_PRIMARY_BUTTON","PANEL_CONTAINER_SECONDARY_BUTTON","PANEL_CONTAINER_CLOSE_BUTTON","SEARCH_LABEL","SEARCH_PLACEHOLDER_LABEL","SEARCH_CLOSE_BUTTON","TAG_REMOVE_BUTTON","TAG_WALL_LABEL","TAG_WALL_ADD_BUTTON","TAG_WALL_REMOVE_BUTTON","TEARSHEET_PRIMARY_BUTTON","TEARSHEET_SECONDARY_BUTTON","TEARSHEET_DELETE_BUTTON","TEARSHEET_CLOSE_BUTTON","TEARSHEET_TERTIARY_BUTTON","TEARSHEET_TERTIARY_SECONDARY_TEXT","TEARSHEET_SMALL_PRIMARY_BUTTON","TEARSHEET_SMALL_SECONDARY_BUTTON","TEARSHEET_SMALL_CLOSE_BUTTON","WIZARD_FINISH_BUTTON","WIZARD_NEXT_BUTTON","WIZARD_CANCEL_BUTTON","WIZARD_BACK_BUTTON","WIZARD_TERTIARY_BUTTON","WIZARD_TERTIARY_SECONDARY_TEXT","WIZARD_TEARSHEET_DELETE_BUTTON","ERRORS","TITLE","ERRORNAME","ERRORMESSAGE","default","forbidden","backgroundImage","backgroundSize","backgroundPosition","minHeight","errorIllustrations","ErrorPage","formattedBackgroundImage","className","title","statusCode","errorName","errorMessage","links","other","classes","classnames","errorLabels","style","length","map","external","id","text","href","icon","Link","target","rel","undefined","alt","src","defaultProps"],"mappings":"iWAYMA,EAAY,MAIZC,EAAS,CAGXC,8BAA+B,GAE/BC,gCAAiC,GAEjCC,4BAA6B,QAI7BC,mCAAoC,GAEpCC,qCAAsC,GAEtCC,0BAA2B,GAE3BC,qCAAsC,GAEtCC,iCAAkC,eAIlCC,+BAAgC,GAEhCC,iCAAkC,GAElCC,6BAA8B,QAI9BC,aAAc,GAEdC,yBAA0B,GAE1BC,oBAAqB,eAIrBC,kBAAmB,SAInBC,eAAgB,GAGhBC,oBAAqB,GAGrBC,uBAAwB,GAIxBC,yBAA0B,OAE1BC,2BAA4B,SAE5BC,wBAAyB,SAEzBC,uBAAwB,QAExBC,0BAA2B,eAE3BC,kCAAmC,0CAInCC,+BAAgC,OAEhCC,iCAAkC,SAElCC,6BAA8B,QAI9BC,qBAAsB,SAEtBC,mBAAoB,OAEpBC,qBAAsB,SAEtBC,mBAAoB,OAEpBC,uBAAwB,SAExBC,+BAAgC,0CAEhCC,+BAAgC,oBAIhCC,OAAQ,CACJ,IAAK,CACDC,MAAO,MACPC,UAAW,iBACXC,aACI,oGAER,IAAK,CACDF,MAAO,MACPC,UAAW,gBACXC,aACI,uGAER,IAAK,CACDF,MAAO,MACPC,UAAW,wBACXC,aACI,yEAERC,QAAS,CACLH,MAAO,kBAKNI,EAAY,CACrBC,gBAvHoB,6BAwHpBC,eAAgB,cAChBC,mBAAoB,cACpBC,UAAW,SAGTC,EAAqB,CACvB,IAAI,2BACIL,GADR,IAEIC,gBAAgB,yCAEpBF,QAAS,CACLE,gBAAgB,uCAChBC,eAAgB,cAChBC,mBAAoB,cACpBC,UAAW,UAObE,EAAY,SAAC,GASO,IAWlBC,EAnBeN,EAQE,EARFA,gBACAO,EAOE,EAPFA,UACAC,EAME,EANFA,MACAC,EAKE,EALFA,WACAC,EAIE,EAJFA,UACAC,EAGE,EAHFA,aACAC,EAEE,EAFFA,MACIC,EACF,iBACfC,EAAUC,IAAWR,EAAWjD,GAEhC0D,EAAczD,EAAOmC,OAAOe,GAkBlC,OAjBMD,IACFA,EAAQQ,EAAcA,EAAYrB,MAAQpC,EAAOmC,OAAOI,QAAQH,OAEpEe,GAAaA,GAAaM,EAAcA,EAAYpB,UAAYc,EAChEC,GACKA,GAAgBK,EAAcA,EAAYnB,aAAec,EAS1DL,EALEN,EAKyB,CAAEA,mBAJFI,EAAmBK,GAAnB,eACfL,EAAmBK,IADJ,eAEfL,EAAmBN,SAM/B,iDAASS,UAAYO,EAAUG,MAAQX,GAAiCO,GAAxE,aACI,qBAAKN,UAAS,UAAOjD,EAAP,qBAAd,SACI,sBAAKiD,UAAS,UAAOjD,EAAP,aAAd,UACI,oBAAIiD,UAAS,UAAOjD,EAAP,WAAb,SAA4CkD,IAC5C,oBAAID,UAAS,UAAOjD,EAAP,eAAb,SAAgDoD,IAC9CC,GACE,mBAAGJ,UAAS,UAAOjD,EAAP,iBAAZ,SAAiDqD,IAEnDC,EAAMM,OAAS,GACjBN,EAAMO,KAAI,oBAAGC,gBAAH,SAAqBC,EAArB,EAAqBA,GAAIC,EAAzB,EAAyBA,KAAMC,EAA/B,EAA+BA,KAAMC,EAArC,EAAqCA,KAArC,OACN,eAACC,EAAA,EAAD,CACIJ,GAAKA,EAELE,KAAOA,EACPG,OAASN,EAAW,SAAW,UAC/BO,IAAI,sBACJpB,UAAS,UAAOjD,EAAP,UANb,eAQesE,IAATJ,GACE,qBACIK,IAAMP,EACNf,UAAS,UAAOjD,EAAP,gBACTwE,IAAMN,IAGZF,IAbID,eAoClChB,EAAU0B,aAAe,CACrB/B,gBAAiB,GACjBO,UAAW,GACXE,WAAY,KACZC,UAAW,GACXC,aAAc,GACdC,MAAO,GACPJ,MAAO,IA0BIH","file":"static/js/35.90b77565.chunk.js","sourcesContent":["/**\n * @file Error view component.\n * @copyright IBM Security 2019, 2021\n */\n\nimport classnames from \"classnames\";\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport Link from \"./../../components/Link\";\n\nconst namespace = \"cds\";\n\nconst backgroundImage = \"/Images/entitlement@2x.png\";\n\nconst labels = {\n    // DataDecorator\n    /** @type {string} the primary button label for the DataDecorator's PanelContainer */\n    DATA_DECORATOR_PRIMARY_BUTTON: \"\",\n    /** @type {string} the secondary button label for the DataDecorator's PanelContainer */\n    DATA_DECORATOR_SECONDARY_BUTTON: \"\",\n    /** @type {string} the close button aria label for the DataDecorator's PanelContainer */\n    DATA_DECORATOR_CLOSE_BUTTON: \"Close\",\n\n    // FilterPanel\n    /** @type {string} Label for truncated filters list to expand */\n    FILTER_PANEL_CATEGORY_EXPAND_LABEL: \"\",\n    /** @type {string} Label for expanded filters list to collapse */\n    FILTER_PANEL_CATEGORY_COLLAPSE_LABEL: \"\",\n    /** @type {string} Label for filter search input */\n    FILTER_PANEL_SEARCH_LABEL: \"\",\n    /** @type {string} Label for filter search when no filters are found */\n    FILTER_PANEL_SEARCH_NO_RESULTS_LABEL: \"\",\n    /** @type {string} The default aria label for the Search input clear button */\n    FILTER_PANEL_SEARCH_CLOSE_BUTTON: \"Clear search\",\n\n    // Panel\n    /** @type {string} The PanelContainer's primary button label */\n    PANEL_CONTAINER_PRIMARY_BUTTON: \"\",\n    /** @type {string} The PanelContainer's secondary button label */\n    PANEL_CONTAINER_SECONDARY_BUTTON: \"\",\n    /** @type {string} The PanelContainer's close button aria label */\n    PANEL_CONTAINER_CLOSE_BUTTON: \"Close\",\n\n    // Search\n    /** @type {string} aria label for the Search activate btn and input */\n    SEARCH_LABEL: \"\",\n    /** @type {string} Placeholder text to be displayed in the search input. */\n    SEARCH_PLACEHOLDER_LABEL: \"\",\n    /** @type {string} An aria label for the search input clear button. */\n    SEARCH_CLOSE_BUTTON: \"Clear search\",\n\n    // `Tag`\n    /** @type {string} Label for the button used to remove the tag. */\n    TAG_REMOVE_BUTTON: \"Remove\",\n\n    // `TagWall`\n    /** @type {string} Label. */\n    TAG_WALL_LABEL: \"\",\n\n    /** @type {string} Tag wall 'add' button. */\n    TAG_WALL_ADD_BUTTON: \"\",\n\n    /** @type {string} Tag 'remove' button. */\n    TAG_WALL_REMOVE_BUTTON: \"\",\n\n    // Tearsheet\n    /** @type {string} label for the tearsheet primary button */\n    TEARSHEET_PRIMARY_BUTTON: \"Okay\",\n    /** @type {string} label for the tearsheet secondary button */\n    TEARSHEET_SECONDARY_BUTTON: \"Cancel\",\n    /** @type {string} label for the tearsheet delete button */\n    TEARSHEET_DELETE_BUTTON: \"Delete\",\n    /** @type {string} aria label for the tearsheet close button */\n    TEARSHEET_CLOSE_BUTTON: \"Close\",\n    /** @type {string} Text for the tearsheet cancel setup button */\n    TEARSHEET_TERTIARY_BUTTON: \"Cancel setup\",\n    /** @type {string} Secondary text for the tearsheet cancel setup button */\n    TEARSHEET_TERTIARY_SECONDARY_TEXT: \"Information will not be saved upon exit\",\n\n    // TearsheetSmall\n    /** @type {string} label for the tearsheet primary button */\n    TEARSHEET_SMALL_PRIMARY_BUTTON: \"Save\",\n    /** @type {string} label for the tearsheet secondary button */\n    TEARSHEET_SMALL_SECONDARY_BUTTON: \"Cancel\",\n    /** @type {string} aria label for the tearsheet close button */\n    TEARSHEET_SMALL_CLOSE_BUTTON: \"Close\",\n\n    // Wizard.\n    /** @type {string} The finish button label for the Wizard component's Tearsheet */\n    WIZARD_FINISH_BUTTON: \"Finish\",\n    /** @type {string} The next button label for the Wizard component's Tearsheet */\n    WIZARD_NEXT_BUTTON: \"Next\",\n    /** @type {string} The cancel button label for the Wizard component's Tearsheet */\n    WIZARD_CANCEL_BUTTON: \"Cancel\",\n    /** @type {string} The back button label for the Wizard component's Tearsheet */\n    WIZARD_BACK_BUTTON: \"Back\",\n    /** @type {string} The cancel setup button for the Wizard component's Tearsheet */\n    WIZARD_TERTIARY_BUTTON: \"Cancel\",\n    /** @type {string} Secondary text for the Wizard component Tearsheet cancel setup button */\n    WIZARD_TERTIARY_SECONDARY_TEXT: \"Information will not be saved upon exit\",\n    /** @type {string} The delete button label for the Wizard component's Tearsheet */\n    WIZARD_TEARSHEET_DELETE_BUTTON: \"Delete connection\",\n\n    // ErrorPage\n    /** @type {object} List of Error objects */\n    ERRORS: {\n        404: {\n            TITLE: \"404\",\n            ERRORNAME: \"Page not found\",\n            ERRORMESSAGE:\n                \"We could not find the page you were looking for, but here are some helpful places to start from:\"\n        },\n        403: {\n            TITLE: \"403\",\n            ERRORNAME: \"Access denied\",\n            ERRORMESSAGE:\n                \"You do not have the correct subscription to access this content. Please contact your administrator.\"\n        },\n        500: {\n            TITLE: \"500\",\n            ERRORNAME: \"Internal server error\",\n            ERRORMESSAGE:\n                \"An internal server error occurred when trying to access this content.\"\n        },\n        default: {\n            TITLE: \"UnknownError\"\n        }\n    }\n};\n\nexport const forbidden = {\n    backgroundImage,\n    backgroundSize: \"574px 300px\",\n    backgroundPosition: \"701px 233px\",\n    minHeight: \"701px\"\n};\n\nconst errorIllustrations = {\n    403: {\n        ... forbidden,\n        backgroundImage: `url(\"/Images/entitlement@2x.png\") })`\n    },\n    default: {\n        backgroundImage: `url(\"/Images/entitlement@2x.png\") })`,\n        backgroundSize: \"275px 322px\",\n        backgroundPosition: \"814px 222px\",\n        minHeight: \"814px\"\n    }\n};\n\n/**\n * Error view component.\n */\nconst ErrorPage = ({\n                       backgroundImage,\n                       className,\n                       title,\n                       statusCode,\n                       errorName,\n                       errorMessage,\n                       links,\n                       ... other\n                   }) => {\n    const classes = classnames(className, namespace);\n\n    const errorLabels = labels.ERRORS[statusCode];\n    if ( !title ) {\n        title = errorLabels ? errorLabels.TITLE : labels.ERRORS.default.TITLE;\n    }\n    errorName = !errorName && errorLabels ? errorLabels.ERRORNAME : errorName;\n    errorMessage =\n        !errorMessage && errorLabels ? errorLabels.ERRORMESSAGE : errorMessage;\n\n    let formattedBackgroundImage;\n\n    if ( !backgroundImage ) {\n        formattedBackgroundImage = errorIllustrations[statusCode]\n            ? { ... errorIllustrations[statusCode] }\n            : { ... errorIllustrations.default };\n    } else {\n        formattedBackgroundImage = { backgroundImage };\n    }\n\n    return (\n        <section className={ classes } style={ formattedBackgroundImage } { ... other }>\n            <div className={ `${ namespace }__content-wrapper` }>\n                <div className={ `${ namespace }__content` }>\n                    <h2 className={ `${ namespace }__title` }>{ title }</h2>\n                    <h3 className={ `${ namespace }__sub-title` }>{ errorName }</h3>\n                    { errorMessage && (\n                        <p className={ `${ namespace }__description` }>{ errorMessage }</p>\n                    ) }\n                    { links.length > 0 &&\n                    links.map(({ external = false, id, text, href, icon }) => (\n                        <Link\n                            id={ id }\n                            key={ id }\n                            href={ href }\n                            target={ external ? \"_blank\" : \"_parent\" }\n                            rel=\"noopener noreferrer\"\n                            className={ `${ namespace }__link` }\n                        >\n                            { icon !== undefined && (\n                                <img\n                                    alt={ text }\n                                    className={ `${ namespace }__link__icon` }\n                                    src={ icon }\n                                />\n                            ) }\n                            { text }\n                        </Link>\n                    )) }\n                </div>\n            </div>\n        </section>\n    );\n};\n\nconst link = {\n    /** @type {node} Provide the identifier for the <a> node */\n    id: PropTypes.string.isRequired,\n\n    /** @type {node} Provide the text for the Link. */\n    text: PropTypes.string.isRequired,\n\n    /** @type {string} Provide the `href` attribute for the <a> node */\n    href: PropTypes.string.isRequired,\n\n    /** @type {string} Provide the `src` attribute for an icon */\n    icon: PropTypes.string\n};\n\nErrorPage.defaultProps = {\n    backgroundImage: \"\",\n    className: \"\",\n    statusCode: null,\n    errorName: \"\",\n    errorMessage: \"\",\n    links: [],\n    title: \"\"\n};\n\nErrorPage.propTypes = {\n    /** @type {string} Background image data URI. */\n    backgroundImage: PropTypes.oneOfType([ PropTypes.string, PropTypes.object ]),\n\n    /** @type {string} The class name of the section. */\n    className: PropTypes.string,\n\n    /** @type {string} errorMessage for the ErrorPage section. */\n    errorMessage: PropTypes.string,\n\n    /** @type {string} errorName for the ErrorPage section. */\n    errorName: PropTypes.string,\n\n    /** @type {Array<Object.*>} An array list of links. */\n    links: PropTypes.arrayOf(PropTypes.shape(link)),\n\n    /** @type {string} statusCode for the ErrorPage section. */\n    statusCode: PropTypes.number,\n\n    /** @type {string} The title of the section. */\n    title: PropTypes.string\n};\n\nexport default ErrorPage;"],"sourceRoot":""}