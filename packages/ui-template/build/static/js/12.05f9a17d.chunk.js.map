{"version":3,"sources":["components/Divider/Component.js","components/Divider/Index.js","components/Dashboard/Grid.js","components/Dashboard/Content.js","components/Dashboard/Header/Component.js","components/Dashboard/Header/Index.js","components/Dashboard/Container.js","components/Dashboard/Side-Navigation.js","components/Dashboard/Index.js","pages/Dashboard/Tables/Repositories/Query.js","pages/Dashboard/Demo/Example-1.js","pages/Dashboard/Tables/Repositories/Table.js","pages/Dashboard/Tables/Repositories/Skeleton.js","pages/Dashboard/Tables/Repositories/Awaitable.js","pages/Dashboard/Tables/Repositories/Index.js","pages/Dashboard/Tables/Repositories/Page.js","components/Modal/API-Key/Example.js","components/Tearsheet/Content.js","components/Modal/Import/Component.js","pages/Dashboard/Pages/Index.js"],"names":["Title","Content","Divider","Children","className","Component","Text","children","Filler","String","Bare","Icons","Dashboard","style","height","width","fill","Table","Mobile","Base","Route","endpoint","slice","useState","isRail","defaultExpanded","isFixedNav","isChildOfHeader","isPersistent","tabIndex","renderIcon","href","async","title","Container","Request","require","Adapter","Forage","STORE","Cancellation","CancelToken","source","Store","createInstance","name","storeName","description","driver","INDEXEDDB","Cache","setupCache","debug","clearOnStale","ignoreCache","limit","clearOnError","readHeaders","readOnError","maxAge","store","API","create","adapter","cache","cancelToken","token","Methods","Responses","Buffer","Binary","DOM","JSON","Stream","Object","URL","Awaitable","AIO","process","data","setData","loading","setLoading","error","setError","useEffect","ignore","fetch","a","Value","getItem","then","Key","console","catch","Handler","setItem","response","get","method","timeout","withCredentials","responseType","onUploadProgress","log","onDownloadProgress","finally","Result","Collection","clear","Query","Clear","total","iterator","length","Response","Waiter","Error","Total","State","Data","One","display","verticalAlign","marginTop","marginBottom","Two","Three","Four","Five","url","home","Link","Headers","Pages","Projects","Array","forEach","Repository","Index","id","visibility","toUpperCase","last_activity_at","web_url","DataTable","rows","headers","isSortable","size","render","getTableProps","getTableContainerProps","getExpandHeaderProps","getSelectionProps","getHeaderProps","getRowProps","getToolbarProps","getBatchActionProps","TableContainer","TableHead","TableRow","TableExpandHeader","enableExpando","map","Header","value","TableHeader","header","colSpan","TableBody","Row","TableExpandRow","expandIconDescription","row","TableCell","UID","CodeSnippet","type","feedback","copyButtonDescription","hideCopyButton","copyLabel","cells","shift","light","Name","Activity","Visibility","Tag","onClick","window","open","TableExpandedRow","Pagination","backwardText","forwardText","itemsPerPageText","pageNumberText","pageSize","Size","pageSizes","Sizes","totalItems","page","onChange","Setter","Fragment","Rows","DataTableSkeleton","compact","columnCount","rowCount","showHeader","showToolbar","zebra","setRows","setPage","awaiting","setAwaiting","key","sortable","Offset","pop","Skeleton","Page","Label","isOpen","setIsOpen","isAPIKeyModalLoading","apiKeyVisibility","apiKeyDownloadLink","apiKeyGlobalAccessToggleEnabled","setAPIKeyGlobalAccessToggleEnabled","applicationName","setApplicationName","legendText","autoFocus","labelText","hideLabel","event","target","placeholder","fontSize","defaultChecked","disabled","Access","onSubmit","labelA","labelB","invalidText","defaultValue","text","label","APIKeyModal","modalLabel","apiKey","apiKeyLabel","closeButtonText","copyButtonText","copyIconDescription","customSteps","content","valid","downloadBodyText","downloadFileName","downloadFileType","downloadLinkText","editSuccessTitle","generateButtonText","generateSuccessBody","generateSuccessTitle","hasAPIKeyVisibilityToggle","hasDownloadLink","nameRequired","nameHelperText","hideAPIKeyLabel","loadingText","nextStepButtonText","previousStepButtonText","onRequestEdit","onRequestGenerate","showAPIKeyLabel","onClose","Tearsheet","actions","kind","closeIconDescription","navigation","onSelectionChange","Types","Properties","Type","modalVisible","setModalVisible","ImportModal","accept","defaultErrorBody","defaultErrorHeader","fetchErrorBody","fetchErrorHeader","fileDropLabel","fileUploadLabel","inputButtonText","inputId","inputPlaceholder","invalidFileTypeErrorBody","invalidFileTypeErrorHeader","invalidIconDescription","maxFileSize","maxFileSizeErrorBody","maxFileSizeErrorHeader","primaryButtonText","secondaryButtonText"],"mappings":"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","file":"static/js/12.05f9a17d.chunk.js","sourcesContent":["const Title = ({ Content }) => (\n    (Content)\n        ? <h3>\n            {Content}\n        </h3>\n        : <></>\n);\n\nconst Divider = ({ Children }) => {\n    return (\n        <div className=\"io-divider-container\">\n            <div className=\"io-divider-border\"/>\n            <span className=\"io-divider-content\">\n                {Children}\n            </span>\n            <div className=\"io-divider-border\"/>\n        </div>\n    );\n};\n\nconst Component = ({ Text = null }) => {\n    return (\n        <Divider Children={(\n            <Title Content={Text}/>\n        )}/>\n    );\n};\n\nexport default Component;\n","import \"./SCSS/Index.scss\";\n\nimport { default as Component } from \"./Component\";\n\nexport default Component;\n","import \"./SCSS/Grid.scss\";\n\nimport { Grid } from \"@carbon/react\";\n\nconst Component = ({children}) => (\n    <Grid className={\"io-dashboard-grid\"}>\n        {\n            children\n        }\n    </Grid>\n);\n\nexport default Component;\n","import \"./SCSS/Content.scss\";\n\nimport { Content } from \"@carbon/react\";\n\nconst Component = ({children}) => (\n    <Content className={\"io-dashboard-control-primary-content\"}>\n        {\n            children\n        }\n    </Content>\n);\n\nexport default Component;\n","import { default as props } from \"prop-types\";\n\nconst Filler = () => (\n    <div className={ \"io-grid-column-filler\" }/>\n);\n\nimport { default as Divider } from \"./../../Divider/Index\";\nimport { default as Version } from \"./../../Version/Component\";\n\n/*****\n *\n * @param Title\n * @returns {JSX.Element}\n * @constructor\n */\n\nconst Component = (... { Title = \"[Title]\" }) => {\n    return (\n        <>\n            <div className={ \"io-global-page-header\" }>\n                <h1 aria-label={ \"IO-Dashboard-Global-Header\" }>\n                    {\n                        (Title)\n                            ? <span>\n                                {\n                                    String(\"Nexus\" + \" - \" + Title)\n                                }\n                        </span>\n                            : String(\"Nexus\")\n                    }\n                </h1>\n                <Filler/>\n                <Version/>\n            </div>\n            <Divider/>\n        </>\n    );\n};\n\nComponent.propTypes = {\n    Title: props.string\n};\n\nexport default Component;\n","import { default as Component } from \"./Component\";\n\nexport default Component;\n","/*****\n *\n * @param children\n * @returns {JSX.Element}\n * @constructor\n */\n\nconst Bare = ({children}) => (\n    <div className={\"io-dashboard-container\"}>\n        {\n            children\n        }\n    </div>\n);\n\n/*****\n *\n * @param children\n * @returns {JSX.Element}\n * @constructor\n */\n\nconst Component = ({children}) => (\n    <Bare>\n        {\n            children\n        }\n    </Bare>\n);\n\nexport default Component;\n","import \"./SCSS/Side-Navigation.scss\";\n\nimport {\n    SideNav, SideNavIcon,\n    SideNavItems,\n    SideNavLink,\n    SideNavMenu,\n    SideNavMenuItem\n} from \"@carbon/react\";\n\nimport {\n    Search20,\n    DataVis_120,\n    Debug20,\n    Switcher20,\n    Development20,\n    Home24 as Dashboard,\n    DataTable24 as Table,\n    MobileCheck24 as Mobile\n} from \"@carbon/icons-react\";\nimport { useState } from \"react\";\n\n/*****\n *\n * @param href\n * @returns {JSX.Element}\n * @constructor\n */\n\nconst Item = (href, s) => {\n    return (\n        <SideNavMenuItem href={ href }>\n            {\n                header\n            }\n        </SideNavMenuItem>\n    );\n};\n\n/*****\n *\n * @returns {{children}}\n * @constructor\n */\n\nconst Items = (items = [ Item(location.href, \"[Link]\") ]) => {\n    const Collection = {\n        Items: []\n    };\n\n    items.forEach((Item, index) => Collection.Items.push((<Item key={ index }/>)));\n\n    return Collection.Items;\n};\n\n/*****\n *\n * @param title\n * @param Items\n * @param items\n * @returns {*}\n * @constructor\n */\n\nconst Collapsable = ({ title = \"[Aria-Title]\" }, Items = Items) => {\n    return (\n        <SideNavMenu title={ title }>\n            <Items/>\n        </SideNavMenu>\n    );\n\n};\n\nconst Icons = {\n    Dashboard: () => (<Dashboard style={ { height: \"20px\", width: \"20px\", fill: \"rgba(185, 185, 185, 0.825)\" } }/>),\n    Table: () => (<Table style={ { height: \"20px\", width: \"20px\", fill: \"rgba(185, 185, 185, 0.825)\" } }/>),\n    Mobile: () => (<Mobile style={ { height: \"20px\", width: \"20px\", fill: \"rgba(185, 185, 185, 0.825)\" } }/>)\n};\n\nconst Base = \"/#/dashboard\";\n\n/*****\n *\n * @param endpoint {string}\n * @returns \"/#/dashboard/{endpoint}\" {string}\n * @constructor\n */\n\nconst Route = (endpoint) => (endpoint.slice(0, 1) === \"/\") ? Base + String(endpoint)\n    : Base + \"/\" + String(endpoint);\n\nconst Component = () => {\n    const [ rail, setRail ] = useState(true);\n\n    return (\n        <SideNav\n            isRail={ false }\n\n            defaultExpanded={ true }\n            isFixedNav={ true }\n            isChildOfHeader={ false }\n            isPersistent={ true }\n            aria-label=\"Side navigation\"\n            className={ \"io-dashboard-left-side-menu\" }\n            tabIndex={ 0 }\n        >\n            <SideNavItems>\n                <SideNavLink /// --> Dashboard Home Page\n                    renderIcon={ Icons.Dashboard }\n                    href={ Base }\n                    async={ true }\n                    children={ \"Home\" }\n                />\n                <SideNavLink /// --> Table Page\n                    renderIcon={ Icons.Mobile }\n                    href={ Route(\"mobile\") }\n                    async={ true }\n                    children={ \"Mobile\" }\n                />\n                <SideNavLink /// --> Table Page\n                    renderIcon={ Icons.Table }\n                    href={ Route(\"table\") }\n                    async={ true }\n                    children={ \"Table\" }\n                />\n                {/* <SideNavMenu title=\"Category One\">         */ }\n                {/*     <SideNavMenuItem href={location.href}> */ }\n                {/*         Link                               */ }\n                {/*     </SideNavMenuItem>                     */ }\n                {/*     <SideNavMenuItem href={location.href}> */ }\n                {/*         Link                               */ }\n                {/*     </SideNavMenuItem>                     */ }\n                {/*     <SideNavMenuItem href={location.href}> */ }\n                {/*         Link                               */ }\n                {/*     </SideNavMenuItem>                     */ }\n                {/* </SideNavMenu>                             */ }\n            </SideNavItems>\n        </SideNav>\n    );\n};\n\nexport default Component;\n","import {default as Grid} from \"./Grid\";\nimport {default as Content} from \"./Content\";\nimport {default as Header} from \"./Header/Index\";\nimport {default as Container} from \"./Container\";\nimport {default as Navigation} from \"./Side-Navigation\";\n\n/*****\n *\n * @param children\n * @param title\n * @returns {JSX.Element}\n * @constructor\n */\n\nconst Component = ({children}, ... {title = \"[IO-Dashboard-Title]\"}) => {\n    return (\n        <Container>\n            <Grid>\n                <Navigation/>\n                <Content>\n                    <Header Title={title}/>\n                    {\n                        children\n                    }\n                </Content>\n            </Grid>\n        </Container>\n    );\n};\n\nexport default Component;\n","import { useState, useEffect    } from \"react\";\n\nconst Request = require(\"axios\");\nconst Adapter = require(\"axios-cache-adapter\");\nconst Forage =  require(\"localforage\");\n\nconst STORE = \"Gitlab-Project-Pages\";\nconst NAME = \"Nexus-UI\";\nconst DESCRIPTION = \"Cache Key-Value Table for VCS\";\n\nconst Cancellation = Request.CancelToken.source();\n\nconst Store = Forage.createInstance({\n    name: NAME,\n    storeName: STORE,\n    description: DESCRIPTION,\n    driver: Forage.INDEXEDDB\n});\n\nconst Cache = Adapter.setupCache({\n    /// excludeFromCache: true, // --> Debugging\n    debug: false,               // --> Debugging\n    clearOnStale: true,\n    ignoreCache: false,\n    limit: false,\n    clearOnError: true,\n    readHeaders: true,\n    readOnError: true,\n    maxAge: 5 * 60 * 1000,\n    store: Store\n});\n\nconst API = Request.create({\n    adapter: Cache.adapter,\n    cache: Cache,\n    cancelToken: Cancellation.token\n});\n\nexport const Methods = [\n    \"get\",      \"GET\",\n    \"delete\",   \"DELETE\",\n    \"head\",     \"HEAD\",\n    \"options\",  \"OPTIONS\",\n    \"post\",     \"POST\",\n    \"put\",      \"PUT\",\n    \"patch\",    \"PATCH\",\n    \"purge\",    \"PURGE\",\n    \"link\",     \"LINK\",\n    \"unlink\",   \"UNLINK\"\n];\n\nexport const Responses = {\n    Buffer:     \"arraybuffer\",\n    Binary:     \"blob\",\n    DOM:        \"document\",\n    JSON:       \"json\",\n    Text:       \"text\",\n    Stream:     \"stream\"\n};\n\n/*** Example Implementation\n * =========================\n * >>> class Example extends Base {\n * >>>     constructor(props) {\n * >>>         super(props);\n * >>>     };\n * >>>\n * >>>    static URL = \"/API/Gitlab/Projects\";\n * >>>\n * >>>    static Request = () => {\n * >>>        const Query = () => {\n * >>>            const [data, setData] = useState(null);\n * >>>            const [loading, setLoading] = useState(null);\n * >>>            const [error, setError] = useState(null);\n * >>>            useEffect(() => {\n * >>>                let ignore = false;\n * >>>                const fetch = async () => {\n * >>>                    setLoading(true);\n * >>>                    try {\n * >>>                        setError({});\n * >>>                        const response = await Request(Example.URL, {\n * >>>                            method: \"GET\",\n * >>>                            timeout: 30000,\n * >>>                            withCredentials: false,\n * >>>                            responseType: Responses.JSON,\n * >>>                            onUploadProgress: async () => console.log(\"Upload in Progress\"),\n * >>>                            onDownloadProgress: async () => console.log(\"Download in Progress\")\n * >>>                        });\n * >>>                        console.debug(response);\n * >>>                        if (!ignore) setData(response.data);\n * >>>                    } catch (err) {\n * >>>                        setError(err);\n * >>>                    }\n * >>>                    setLoading(false);\n * >>>                }; fetch().then().finally();\n * >>>                return (() => { ignore = true; });\n * >>>            }, [URL]);\n * >>>            return { data, loading, error };\n * >>>         };\n * >>>         return Query(URL);\n * >>>     };\n * >>>\n * >>>     static Awaitable = () => {\n * >>>         const { data, loading, error } = Example.Request();\n * >>>         return {\n * >>>             Response: data,\n * >>>             Waiter: loading,\n * >>>             Error: error\n * >>>         };\n * >>>     };\n */\n\nclass Base extends Object {\n    static URL = null;\n    static Store = null;\n    static Cache = null;\n\n    static API = null;\n\n    static Request = () => null;\n    static Awaitable = () => null;\n}\n\nexport class AIO extends Base {\n    static URL = process.env.REACT_APP_API_ENDPOINT + \"/API/Gitlab/Projects\";\n\n    static Request = () => {\n        const Query = (URL) => {\n            const [data, setData] = useState({});\n            const [loading, setLoading] = useState(true);\n            const [error, setError] = useState(null);\n\n            useEffect(() => {\n                let ignore = false;\n                const fetch = async () => {\n                    setLoading(true);\n\n                    try {\n                        setError({});\n\n                        const Awaitable = { Value: null };\n\n                        await Store.getItem(STORE).then((Key) => {\n                            if (Key !== null) {\n                                console.debug(\"[DEBUG]\", \"Cache Hit\");\n\n                                setData(Key);\n                                Awaitable[\"Value\"] = Key;\n                                ignore = true;\n                            }\n                            else {\n                                console.debug(\"[DEBUG]\", \"Cache Miss\");\n                            }\n                        }).catch((error) => console.debug(\n                            \"[DEBUG]\",\n                            \"Void Cache-Key Look-Up\",\n                            \"Warning\", error\n                        ));\n\n                        const Handler = async () => {\n                            if (Awaitable.Value !== null) {\n                                await Store.setItem(STORE, Awaitable.Value);\n                            }\n                        }; await Handler().then(async () => {\n                            if (ignore === false) {\n                                const response = API.get(URL, {\n                                    method: \"GET\",\n                                    timeout: 30000,\n                                    withCredentials: false,\n                                    responseType: Responses.JSON,\n                                    onUploadProgress: async () => console.log(\"[DEBUG]\", \"Upload in Progress\"),\n                                    onDownloadProgress: async () => console.debug(\"[DEBUG]\", \"Download in Progress\")\n                                }).catch((error) => (console.debug(\"[DEBUG]\", \"API-Request\", \"Projects\", \"Error\", error))).finally(\n                                    () => {\n                                        console.debug(\"[DEBUG]\", \"Query Awaitable Complete\");\n                                    }\n                                );\n\n                                const Result = await response;\n\n                                const Collection = Result.data;\n\n                                await Store.setItem(STORE, Collection);\n\n                                if (!ignore) setData(Collection);\n                            }\n                        });\n                    } catch (error) {\n                        console.debug(\"[DEBUG]\", error);\n                        await Store.clear();\n                        console.debug(\"[DEBUG]\", \"Cache\", \"Projects\", \"Cleared\");\n                    }\n\n                    finally { setLoading(false); };\n\n                }; fetch().then().finally();\n\n                return (() => { ignore = true; });\n            }, []);\n            return { data, loading, error };\n        };\n        return Query(AIO.URL);\n    };\n\n    static Clear = async () => {\n        await Store.clear();\n    }\n\n    static Awaitable = () => {\n        const { data, loading, error } = AIO.Request();\n\n        let total = 0;\n        if (data !== null) {\n            let iterator = 0;\n            for (iterator; iterator < data.length; iterator++) {\n                total += data[iterator].length;\n            }\n        }\n\n        return {\n            Response: data,\n            Waiter: loading,\n            Error: error,\n            Total: total\n        };\n    };\n};\n\nexport default AIO;\n\nexport const State = AIO.Awaitable;\n","import React from \"react\";\n\nimport { ClickableTile } from \"carbon-components-react\";\n\nconst Data = {\n    One: () => (\n        <div className={\"bx--row\"}>\n            <div className={\"bx--col-lg--auto\"}>\n                <ClickableTile style={{ display: \"grid\" }}>\n                    <h5 style={{\n                        verticalAlign: \"middle\",\n                        marginTop: \"auto\",\n                        marginBottom: \"auto\"\n                    }}>\n                        Title\n                    </h5>\n                </ClickableTile>\n            </div>\n        </div>\n    ),\n    Two: () => (\n        <div className={\"bx--row\"}>\n            <div className={\"bx--col-lg--auto\"}>\n                <ClickableTile style={{ display: \"grid\" }}>\n                    <h5 style={{\n                        verticalAlign: \"middle\",\n                        marginTop: \"auto\",\n                        marginBottom: \"auto\"\n                    }}>\n                        Title\n                    </h5>\n                </ClickableTile>\n            </div>\n            <div className={\"bx--col-lg--auto\"}>\n                <ClickableTile style={{ display: \"grid\" }}>\n                    <h5 style={{\n                        verticalAlign: \"middle\",\n                        marginTop: \"auto\",\n                        marginBottom: \"auto\"\n                    }}>\n                        Title\n                    </h5>\n                </ClickableTile>\n            </div>\n        </div>\n    ),\n    Three: () => (\n        <div className={\"bx--row\"}>\n            <div className={\"bx--col-lg--auto\"}>\n                <ClickableTile style={{ display: \"grid\" }}>\n                    <h5 style={{\n                        verticalAlign: \"middle\",\n                        marginTop: \"auto\",\n                        marginBottom: \"auto\"\n                    }}>\n                        Title\n                    </h5>\n                </ClickableTile>\n            </div>\n            <div className={\"bx--col-lg--auto\"}>\n                <ClickableTile style={{ display: \"grid\" }}>\n                    <h5 style={{\n                        verticalAlign: \"middle\",\n                        marginTop: \"auto\",\n                        marginBottom: \"auto\"\n                    }}>\n                        Title\n                    </h5>\n                </ClickableTile>\n            </div>\n            <div className={\"bx--col-lg--auto\"}>\n                <ClickableTile style={{ display: \"grid\" }}>\n                    <h5 style={{\n                        verticalAlign: \"middle\",\n                        marginTop: \"auto\",\n                        marginBottom: \"auto\"\n                    }}>\n                        Title\n                    </h5>\n                </ClickableTile>\n            </div>\n        </div>\n    ),\n    Four: () => (\n        <div className={\"bx--row\"}>\n            <div className={\"bx--col-lg--auto\"}>\n                <ClickableTile style={{ display: \"grid\" }}>\n                    <h5 style={{\n                        verticalAlign: \"middle\",\n                        marginTop: \"auto\",\n                        marginBottom: \"auto\"\n                    }}>\n                        Title\n                    </h5>\n                </ClickableTile>\n            </div>\n            <div className={\"bx--col-lg--auto\"}>\n                <ClickableTile style={{ display: \"grid\" }}>\n                    <h5 style={{\n                        verticalAlign: \"middle\",\n                        marginTop: \"auto\",\n                        marginBottom: \"auto\"\n                    }}>\n                        Title\n                    </h5>\n                </ClickableTile>\n            </div>\n            <div className={\"bx--col-lg--auto\"}>\n                <ClickableTile style={{ display: \"grid\" }}>\n                    <h5 style={{\n                        verticalAlign: \"middle\",\n                        marginTop: \"auto\",\n                        marginBottom: \"auto\"\n                    }}>\n                        Title\n                    </h5>\n                </ClickableTile>\n            </div>\n            <div className={\"bx--col-lg--auto\"}>\n                <ClickableTile style={{ display: \"grid\" }}>\n                    <h5 style={{\n                        verticalAlign: \"middle\",\n                        marginTop: \"auto\",\n                        marginBottom: \"auto\"\n                    }}>\n                        Title\n                    </h5>\n                </ClickableTile>\n            </div>\n        </div>\n    ),\n    Five: () => (\n        <div className={\"bx--row\"}>\n            <div className={\"bx--col-lg--auto\"}>\n                <ClickableTile style={{ display: \"grid\" }}>\n                    <h5 style={{\n                        verticalAlign: \"middle\",\n                        marginTop: \"auto\",\n                        marginBottom: \"auto\"\n                    }}>\n                        Title\n                    </h5>\n                </ClickableTile>\n            </div>\n            <div className={\"bx--col-lg--auto\"}>\n                <ClickableTile style={{ display: \"grid\" }}>\n                    <h5 style={{\n                        verticalAlign: \"middle\",\n                        marginTop: \"auto\",\n                        marginBottom: \"auto\"\n                    }}>\n                        Title\n                    </h5>\n                </ClickableTile>\n            </div>\n            <div className={\"bx--col-lg--auto\"}>\n                <ClickableTile style={{ display: \"grid\" }}>\n                    <h5 style={{\n                        verticalAlign: \"middle\",\n                        marginTop: \"auto\",\n                        marginBottom: \"auto\"\n                    }}>\n                        Title\n                    </h5>\n                </ClickableTile>\n            </div>\n            <div className={\"bx--col-lg--auto\"}>\n                <ClickableTile style={{ display: \"grid\" }}>\n                    <h5 style={{\n                        verticalAlign: \"middle\",\n                        marginTop: \"auto\",\n                        marginBottom: \"auto\"\n                    }}>\n                        Title\n                    </h5>\n                </ClickableTile>\n            </div>\n            <div className={\"bx--col-lg--auto\"}>\n                <ClickableTile style={{ display: \"grid\" }}>\n                    <h5 style={{\n                        verticalAlign: \"middle\",\n                        marginTop: \"auto\",\n                        marginBottom: \"auto\"\n                    }}>\n                        Title\n                    </h5>\n                </ClickableTile>\n            </div>\n        </div>\n    )\n};\n\nexport default Data;\n\n","// ...\n\nimport React, { Fragment } from \"react\";\n\nimport {\n    DataTable,\n    Table,\n    TableHead,\n    TableRow,\n    TableHeader,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableSelectRow,\n    TableToolbarContent,\n    TableExpandHeader,\n    TableToolbar,\n    TableExpandRow,\n    TableExpandedRow,\n    TableSelectAll,\n    Link,\n    TableBatchActions,\n    TableBatchAction,\n    TableToolbarSearch,\n    CodeSnippet,\n    Tag,\n    Pagination\n} from \"carbon-components-react\";\n\nimport {\n    Renew32 as Reload,\n    Data_132 as DICO,\n    CrossTab32 as CSV,\n    ChartCombo32 as Metrics\n} from \"@carbon/icons-react\";\n\nimport Button from \"carbon-components-react/lib/components/Button\";\n\nconst URL = ({ url, home }) => {\n    return (\n        <ul style={{ width: \"max-content\" }}>\n            <li style={{display: \"inline\"}}>\n                <Link href={url} className={\"io--underline-text\"}>\n                    <strong>\n                        Repository\n                    </strong>\n                </Link>\n            </li>\n            {home && (\n                <li style={{display: \"inline\"}}>\n                    <span>&nbsp;|&nbsp;</span>\n                    <Link href={home}>Gitlab</Link>\n                </li>\n            )}\n        </ul>\n    );\n};\n\nfunction batchActionClick(event, rows = null) {\n    if (event) console.debug(\"Batch-Action-Click\", event.target.id);\n    if (event.target.getAttribute(\"dataset-target-row\") !== null) {\n        console.log(JSON.parse(event.target.getAttribute(\"dataset-target-data\")));\n    }\n}\n\nasync function Refresh(setter) {\n    console.debug(\"[DEBUG]\", \"Importing Event-Handler\");\n    const Query = () => require(\"./Query\").AIO;\n    console.debug(\"[DEBUG]\", \"Instantiating Query Object\");\n    const Handler = Query();\n    console.debug(\"[DEBUG]\", \"Removing Session Cache\");\n    await Handler.Clear().then()\n        .catch((error) => console.debug(\"[DEBUG]\", \"Error\", error))\n        .finally(\n        () => console.debug(\"[DEBUG]\", \"Successfully Removed Session Cache\")\n    );\n\n    setter(true);\n}\n\n/***\n *\n * Rows consist of the datasets -- or tabulars -- that make up\n * the majority content of a given data-table. Headers define\n * the Key-Value look-ups + labels for accessing a given row's\n * indexed objects.\n *\n * @returns {JSX.Element}\n * @constructor\n */\n\n/***\n *\n * @param Headers {Array}\n * @param Data {Map}\n * @param Page {Number}\n * @param Offset {Number}\n * @returns {JSX.Element}\n * @constructor { () =? () }\n *\n * *-* Project Type *-*\n * ====================\n *\n * @type {function({Headers: Array, Data: Map, Page: Number, Offset: Number})};\n *\n * >>> const Project = {\n * ...     \"id\":               String(Index),\n * ...     \"ID\":               String(Repository.id),\n * ...     \"Name\":             String(Repository.name),\n * ...     \"Default-Branch\":   String(Repository.visibility).toUpperCase(),\n * ...     \"Last-Activity\":    String(Repository.default_branch),\n * ...     \"Visibility\":       String(Repository.last_activity_at),\n * ...     \"Web-URL\":          String(Repository.web_url),\n * ... };\n *\n */\n\nconst Component = ({ Headers, Data, State, Pages}) => {\n    const Home = \"https://gitlab.cloud-technology.io/\";\n\n    const Total = (Data) ? Data.length : 0;\n    const Projects = new Array(Total);\n\n    const Exclusions = 2;\n\n    Headers = Headers.slice(0, Headers.length - Exclusions);\n    (Data) ? Data.forEach((Repository, Index) => {\n        Projects[Index] = {\n            \"id\":               String(Index),\n            \"UID\":              String(Repository.id),\n            \"Name\":             String(Repository.name),\n            \"Visibility\":       String(Repository.visibility).toUpperCase(),\n            \"Activity\":         String(Repository.last_activity_at),\n            \"URL\":              String(Repository.web_url)\n        };\n    }) : Projects[0] = {\n        \"id\":               null,\n        \"UID\":              null,\n        \"Name\":             null,\n        \"Visibility\":       null,\n        \"Activity\":         null,\n        \"URL\":              null\n    };\n\n    return (\n        <DataTable\n            rows={Projects}\n            headers={Headers}\n            isSortable={false}\n            size={\"normal\"}\n            render={\n                ({\n                     rows,\n                     headers,\n                     getTableProps,\n                     getTableContainerProps,\n                     getSelectionProps,\n                     getExpandHeaderProps,\n                     getHeaderProps,\n                     getRowProps,\n                     getToolbarProps,\n                     getBatchActionProps\n                }) => (\n                <TableContainer {...getTableContainerProps()}>\n                    <Table {...getTableProps()}>\n                        <TableHead>\n                            <TableRow>\n                                <TableExpandHeader enableExpando={true} {...getExpandHeaderProps()}/>\n                                    {\n                                        Headers.map((Header, Index) => (Header.value === \"Name\")\n                                            ? (\n                                                <TableHeader {...getHeaderProps({ header: Header })} colSpan={1}>\n                                                    {Header.value}\n                                                </TableHeader>\n                                            ) : (\n                                                <TableHeader {...getHeaderProps({ header: Header })} colSpan={1}>\n                                                    {Header.value}\n                                                </TableHeader>\n                                            ))\n                                    }\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {Projects.map((Row, Index) => (\n                                <Fragment key={String(Index) + \"-\" + \"DOM-Table-Fragment\" + \"-\" + Row.UID}>\n                                    <TableExpandRow expandIconDescription={\"Select to Expand Repository's Description\"}{...getRowProps({row: rows[Index]})}>\n                                        <TableCell key={rows[Index].cells.shift().id} id={String(Index) + \"-\" + \"ID\" + \"-\" + Row.UID} colSpan={1}>\n                                            <CodeSnippet type=\"inline\" className={\"io--darkened-code-snippet\"} feedback={\"Copied\"} copyButtonDescription={\"Copy Code Snippet Content\"} hideCopyButton={false} copyLabel={\"Row-ID\"}>\n                                                {Row.UID}\n                                            </CodeSnippet>\n                                        </TableCell>\n                                        <TableCell key={rows[Index].cells.shift().id} id={String(Index) + \"-\"  + \"Name\" + \"-\" + Row.UID} colSpan={1}>\n                                            <strong>\n                                                <CodeSnippet type=\"single\" feedback={\"Saved to Clipboard\"} className={\"io--bold-code-snippet io--code-snippet--cursor-pointer\"} light>\n                                                    {Row.Name}\n                                                </CodeSnippet>\n                                            </strong>\n                                        </TableCell>\n                                        <TableCell key={rows[Index].cells.shift().id} id={String(Index) + \"-\" + \"Activity\" + \"-\"} colSpan={1}>\n                                            {String(Row.Activity).slice(0, 10)}\n                                        </TableCell>\n                                        <TableCell key={rows[Index].cells.shift().id} id={String(Index) + \"-\" + \"Visibility\" + \"-\" + Row.UID} colSpan={1}>\n                                            {\n                                                (Row.Visibility === \"PUBLIC\") ? (\n                                                    <Tag id={\"Visibility-Tag\" + \"-\" + String(Index)}\n                                                         type=\"green\"\n                                                         title=\"Public-Visibility-Tag\"\n                                                         onClick={() => window.open(Row.URL)}\n                                                    >\n                                                        <strong>Public</strong>\n                                                    </Tag>)\n                                                    : (Row.Visibility === \"PRIVATE\") ? (\n                                                        <Tag id={\"Visibility-Tag\" + \"-\" + String(Index)}\n                                                             type=\"red\"\n                                                             title=\"Private-Visibility-Tag\"\n                                                             className={\"io--tag--red-non-interactive\"}\n                                                        >\n                                                            <strong>Private</strong>\n                                                        </Tag>)\n                                                    : (\n                                                        <Tag id={\"Visibility-Tag\" + \"-\" + String(Index)}\n                                                             type=\"purple\"\n                                                             title=\"Internal-Visibility-Tag\"\n                                                             className={\"io--tag--purple-non-interactive\"}\n                                                        >\n                                                            <strong>Internal</strong>\n                                                        </Tag>)\n                                            }\n                                        </TableCell>\n                                        <TableCell id={String(Index) + \"-\" + \"URL\" + \"-\" + Row.UID}\n                                            key={rows[Index].cells.shift().id}\n                                            colSpan={1}\n                                        >\n                                            <URL url={Row.URL} home={Home} key={\"VCS-URL-Link-Key\" + \"-\" + String(Index)} />\n                                        </TableCell>\n                                    </TableExpandRow>\n                                    <TableExpandedRow colSpan={headers.length + 3}>\n                                        <p>\n                                            <strong>Description</strong>:&nbsp;\n                                                {(Data) ? Data[Index].description : \"N/A\"}\n                                        </p>\n                                    </TableExpandedRow>\n                                </Fragment>\n                            ))}\n                        </TableBody>\n                    </Table>\n                    {(Data) ? (\n                        <Pagination\n                            backwardText=\"Previous\"\n                            forwardText=\"Next\"\n                            itemsPerPageText=\"Total Paged Items\"\n                            pageNumberText=\"Page Number\"\n                            pageSize={Pages.Size}\n                            pageSizes={Pages.Sizes}\n                            totalItems={Pages.Total}\n                            page={Pages.Index.Data}\n                            onChange={(Data) => Pages.Index.Setter(Data.page)}\n                        />\n                        ) : (\n                            <React.Fragment/>\n                        )\n                    }\n                </TableContainer>\n            )}\n        />\n    );\n};\n\nexport default Component;\n","import * as Types from \"prop-types\";\n\nimport {\n    DataTableSkeleton,\n    PaginationSkeleton,\n    BreadcrumbSkeleton\n} from \"carbon-components-react\";\n\n\nimport React from \"react\";\n\nconst Table = ({Rows = 20, Headers = 6}) => (\n    <DataTableSkeleton\n        compact={false}\n        columnCount={Headers}\n        rowCount={Rows}\n        className={\"io-data-table-skeleton-container\"}\n        showHeader={true}\n        showToolbar={true}\n        zebra={false}\n    />\n);\n\nTable.propTypes = {\n    Rows: Types.number,\n    Headers: Types.number\n};\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\n\nimport { default as Table } from \"./Table\";\n\nimport * as Query from \"./Query\";\n\nimport Skeleton from \"./Skeleton\";\n\nconst Component = () => {\n    const [rows, setRows] = useState(20);\n    const [page, setPage] = useState(1);\n    const [awaiting, setAwaiting] = useState(false);\n\n    useEffect(() => {\n        switch (awaiting) {\n            case true:\n                return () => setAwaiting(true);\n            case false:\n                return () => setAwaiting(false);\n            default:\n                return () => setAwaiting(null);\n        }\n\n    }, []);\n\n    const Handler = Query.State();\n\n    const Headers = [ // Total = 8\n        {\n            key: \"ID\",\n            header: \"ID\",\n            sortable: false,\n            value: \"ID\"\n        },\n        {\n            key: \"Name\",\n            header: \"Name\",\n            sortable: false,\n            value: \"Name\"\n        },\n        {\n            key: \"Activity\",\n            header: \"Activity\",\n            sortable: false,\n            value: \"Activity\"\n        },\n        {\n            key: \"Visibility\",\n            header: \"Visibility\",\n            sortable: false,\n            value: \"Visibility\"\n        },\n        {\n            key: \"URL\",\n            header: \"URL\",\n            sortable: false,\n            value: \"URL\"\n        },\n        {\n            key: \"Description\",\n            header: \"Description\",\n            sortable: false,\n            value: \"Description\"\n        },\n\n        {\n            key: \"Git-HTTP-URL\",\n            header: \"Git-HTTP-URL\",\n            sortable: false,\n            value: \"URL\"\n        }\n    ];\n\n    const Pages = {\n        Rows: {\n            Data: rows,\n            Setter: (value) => setRows(value)\n        }, Total: Handler.Total - rows,\n        Index: {\n            Data: page,\n            Setter: (value) => setPage(value)\n        }, Size: rows,\n        Sizes: [rows]\n    };\n\n    const Awaitable = () => {\n        if (awaiting === true) {\n            return Component();\n        }\n\n        const Data = new Array(Handler.Response[page]);\n\n        const Offset = Data.length;\n\n        return (<Table Headers={Headers} Data={Data.pop()} Offset={Offset} State={setAwaiting} Pages={Pages}/>);\n    };\n\n    return (Handler.Waiter === false) ? (<Awaitable/>) : (<Skeleton/>);\n};\n\nexport default Component;\n","import \"./SCSS/Index.scss\";\n\nimport { default as Page } from \"./Page\";\n\nexport default Page;\n","import { default as Table } from \"./Awaitable\";\n\nconst Page = () => {\n    return (<Table/>);\n};\n\nexport default Page;\n","import \"./Index.scss\";\n\nimport React, { useState } from \"react\";\n\nimport {\n    Button, Form, FormGroup, TextInput, Toggle, Checkbox, Select, SelectItem, SelectItemGroup\n} from \"@carbon/react\";\n\nimport { APIKeyModal } from \"@carbon/ibm-cloud-cognitive\";\n\nconst Label = ({Text}) => (\n    <>\n        <p className={\"io-api-key-modal-legend-label\"}>\n            {\n                Text\n            }\n        </p>\n    </>\n);\n\nconst Component = () => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const [isAPIKeyModalLoading, setAPIKeyModalLoading] = useState(false);\n\n    const [apiKeyVisibility, setAPIKeyVisibility] = useState(false);\n    const [apiKeyDownloadLink, setAPIKeyDownloadLink] = useState(false);\n    const [apiKeyGlobalAccessToggleEnabled, setAPIKeyGlobalAccessToggleEnabled] = useState(false);\n\n    const [applicationName, setApplicationName] = useState(\"\");\n\n    // const [resourceSelectionHelperText, setResourceSelectionHelperText] = useState(false);\n    // const [resourceSelectionHelperTextContext, setResourceSelectionHelperTextContext] = useState(null);\n\n    const Key = () => {\n        return (\n            <>\n                <FormGroup\n                    className=\"exp--apikey-modal__permissions\"\n                    aria-orientation={\"vertical\"}\n                    legendText={(<Label Text={\"Provision or Replace an Existing API Key\"}/>)}\n                >\n                    <TextInput\n                        autoFocus={true}\n                        id={\"name-input\"}\n                        labelText=\"Optional Key-Name Identifier\"\n                        hideLabel={true}\n                        onChange={\n                            (event) => setApplicationName(\n                                event.target.value\n                            )\n                        }\n                        value={applicationName}\n                        name={\"API-Key-Application-Name-Field\"}\n                        placeholder={\"Optional Key-Name Identifier\"}\n                    />\n                </FormGroup>\n                <FormGroup\n                    className={\"io-api-key-modal-scopes-section\"}\n                    aria-orientation={\"vertical\"}\n                    legendText={(\n                        <span style={{fontSize: \"0.85rem\"}}>\n                            Available Scope(s)\n                        </span>\n                    )}\n                >\n                    <Checkbox\n                        id={\"Check-Box-API\"}\n                        labelText=\"API\"\n                        value=\"API\"\n                        defaultChecked={false}\n                    />\n                    <Checkbox\n                        id={\"Check-Box-Read\"}\n                        labelText=\"Read\"\n                        value=\"Read\"\n                        defaultChecked={false}\n                    />\n                    <Checkbox\n                        id={\"Check-Box-Write\"}\n                        labelText=\"Write\"\n                        value=\"Write\"\n                        defaultChecked={false}\n                    />\n                    <br/>\n                    <Checkbox\n                        id={\"Check-Box-Global\"}\n                        labelText=\"Global\"\n                        value=\"Global\"\n                        defaultChecked={false}\n                        disabled={true}\n                    />\n                </FormGroup>\n            </>\n        );\n    };\n\n    const Access = () => {\n        return (\n            <>\n                <Form onSubmit={(event) => console.debug(\"[Debug] Event\", event)}>\n                    <FormGroup className=\"exp--apikey-modal__resource-toggle\"\n                               legendText={\n                                   (\n                                       <>\n                                            <p>\n                                                Enable Wildcard Access to All Resources\n                                                {\" \"}\n                                                <strong>\n                                                    (Not Recommended)\n                                                </strong>\n                                            </p>\n                                           <br/>\n                                        </>\n                                   )\n                               }>\n                        <Toggle autoFocus={false}\n                                id=\"API-Key-Enable-All-Resource-Access\"\n                                labelA=\"Disabled\"\n                                labelB=\"Enabled\"\n                                labelText={\"(*) Resource Access\"}\n                                onChange={\n                                    (event) =>\n                                        setAPIKeyGlobalAccessToggleEnabled(\n                                            event.target.value\n                                        )\n                                }\n                                value={apiKeyGlobalAccessToggleEnabled}\n                        />\n                    </FormGroup>\n                    <Select autoFocus={false}\n                            // helperText={\n                            //     (resourceSelectionHelperText)\n                            //         ? resourceSelectionHelperTextContext\n                            //             : null\n                            // }\n                            id={\"API-Key-Enable-All-Resource-Access-Selection\"}\n                            invalidText={\"A valid value is required\"}\n                            labelText={\"API-Key-Enable-All-Resource-Access-Label\"}\n                            defaultValue={\"-\"}\n                            hideLabel={true}\n                            className={\"io-api-modal-resource-access-selection\"}\n                    >\n                        <SelectItem text=\"Select a Resource ...\" value=\"-\" disabled={true}/>\n                        <SelectItem text=\"(*) Global\" value=\"*\"/>\n                        <SelectItemGroup label=\"Category 1\">\n                            <SelectItem text=\"Option 1\" value=\"option-1\"/>\n                            <SelectItem text=\"Option 2\" value=\"option-2\"/>\n                        </SelectItemGroup>\n                        <SelectItemGroup label=\"Category 2\">\n                            <SelectItem text=\"Option 3\" value=\"option-3\"/>\n                            <SelectItem text=\"Option 4\" value=\"option-4\"/>\n                        </SelectItemGroup>\n                    </Select>\n                </Form>\n            </>\n        );\n    };\n\n    return (\n        <>\n            <APIKeyModal\n                id={\"API-Key-Modal\"}\n                className={\"io-api-key-modal\"}\n                modalLabel={\"API Key Generator\"}\n                apiKey=\"\"\n                apiKeyLabel=\"API-Key-Label\"\n                closeButtonText=\"Close\"\n                copyButtonText=\"Copy\"\n                copyIconDescription=\"Copy\"\n                customSteps={[\n                    {\n                        title: \"Configuration, Scope(s) Setup\",\n                        content: (<Key/>),\n                        valid: true\n                    },\n                    {\n                        title: \"Resource & Access Enablement\",\n                        content: (<Access/>),\n                        valid: true\n                    }\n                ]}\n                downloadBodyText=\"This is your unique API key and is non-recoverable. If you lose this API key, you will have to reset it.\"\n                downloadFileName=\"apikey\"\n                downloadFileType=\"json\"\n                downloadLinkText=\"Download as JSON\"\n                editSuccessTitle=\"API key successfully saved\"\n                generateButtonText=\"Generate\"\n                generateSuccessBody={(\n                    <p>\n                        This is your unique API key and is non-recoverable. If you lose this API key, you will have to reset it.\n                    </p>\n                )}\n                generateSuccessTitle=\"API key successfully created\"\n                hasAPIKeyVisibilityToggle={apiKeyVisibility}\n                hasDownloadLink={apiKeyDownloadLink}\n                nameRequired={false}\n                nameHelperText={\"Name-Helper-Text\"}\n                hideAPIKeyLabel={\"Hide-API-Key-Label\"}\n                loadingText={\"Loading-API-Modal-Text\"}\n                loading={isAPIKeyModalLoading}\n                nextStepButtonText={\"Resource Permissions\"}\n                previousStepButtonText={\"Setup\"}\n                onRequestEdit={() => console.debug(\"Edit Request\")}\n                onRequestGenerate={() => console.debug(\"Generation Request\")}\n                showAPIKeyLabel={\"Show-API-Modal-Key-Label\"}\n                open={isOpen}\n                onClose={() => setIsOpen(false)}\n            />\n            <Button onClick={() => setIsOpen(true)}>\n                API Key Generator\n            </Button>\n        </>\n    );\n};\n\nexport default Component;\n\n","import \"./Index.scss\";\n\nimport React, { useState } from \"react\";\n\nimport {\n    Button, Form, FormGroup, TextInput, Tabs, Tab\n} from \"@carbon/react\";\n\nimport { Tearsheet } from \"@carbon/ibm-cloud-cognitive\";\n\nconst Component = () => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    return (\n        <>\n            <Button onClick={() => {\n                setIsOpen(true);\n            }}>\n                Content Manager\n            </Button>\n            <Tearsheet\n                open={isOpen}\n                className={\"exp--tearsheet--full-width\"}\n                actions={[\n                    {\n                        key: 1,\n                        kind: \"primary\",\n                        label: \"Replace\",\n                        onClick: function noRefCheck(){}\n                    },\n                    {\n                        key: 2,\n                        kind: \"secondary\",\n                        label: \"Back\",\n                        onClick: function noRefCheck(){}\n                    },\n                    {\n                        key: 4,\n                        kind: \"ghost\",\n                        label: \"Cancel\",\n                        onClick: () => {setIsOpen(false)}\n                    }\n                ]}\n                closeIconDescription=\"Close the tearsheet\"\n                description=\"This is a description for the tearsheet, providing an opportunity to describe the flow over a couple of lines in the header of the tearsheet.\"\n                label=\"The label of the tearsheet\"\n                navigation={\n                    (\n                        <div className=\"tearsheet-stories__tabs\">\n                            <Tabs onSelectionChange={function noRefCheck(){}}>\n                                <Tab label=\"Tab 1\" />\n                                <Tab label=\"Tab 2\" />\n                                <Tab label=\"Tab 3\" />\n                                <Tab label=\"Tab 4\" />\n                            </Tabs>\n                        </div>\n                    )\n                }\n                onClose={() => {\n                    setIsOpen(false);\n                }}\n                title=\"Title of the tearsheet\"\n            >\n                <div className=\"tearsheet-stories__dummy-content-block\">\n                    <Form>\n                        <p>\n                            Main content\n                        </p>\n                        <FormGroup legendText=\"\">\n                            <TextInput\n                                id=\"tss-ft1\"\n                                labelText=\"Enter an important value here\"\n                                style={{\n                                    marginBottom: \"1em\"\n                                }}\n                            />\n                        </FormGroup>\n                    </Form>\n                </div>\n            </Tearsheet>\n        </>\n    );\n};\n\nexport default Component;\n\n","import \"./Index.scss\";\n\nimport PropTypes from \"prop-types\";\n\nimport { useState } from \"react\";\nimport {\n    Button,\n    UnorderedList,\n    ListItem\n} from \"@carbon/react\";\nimport { ImportModal } from \"@carbon/ibm-cloud-cognitive\";\n\nconst Types = [\n    \"image/jpeg\",\n    \"image/png\",\n    \"text/plain\"\n];\n\nconst Component = (Properties) => {\n    const { Type } = Properties;\n\n    const [modalVisible, setModalVisible] = useState(false);\n    const [inTransit, setInTransit] = useState(false);\n\n    const Submission = ({ File }) => {\n        console.debug(File);\n    };\n\n    return (\n        <>\n            <ImportModal\n                accept={ Types }\n                className=\"io-import-modal\"\n                defaultErrorBody=\"Select a new file and try again.\"\n                defaultErrorHeader=\"Import failed\"\n                // description={\"Specify a file for by either dragging it into the drag and drop area, or by specifying a URL\"}\n                fetchErrorBody=\"Unable to fetch URL.\"\n                fetchErrorHeader=\"Import failed\"\n                fileDropLabel={ \"Drag or Select to Upload Item(s)\" }\n                fileUploadLabel={ \"File(s) Imported\" }\n                inputButtonText={ \"Import\" }\n                // fileDropHeader={\"File-Drop-Header\"}\n                inputId=\"Import-Field-ID\"\n                // inputLabel=\"Add a Single File via External URL\"\n                inputPlaceholder={ \"External URL\" }\n                invalidFileTypeErrorBody=\"Invalid file type.\"\n                invalidFileTypeErrorHeader=\"Import failed\"\n                invalidIconDescription=\"Delete\"\n                //                maxFileSize={500000}\n                maxFileSize={ 0 }\n                maxFileSizeErrorBody=\"500kb max file size. Select a new file and try again.\"\n                maxFileSizeErrorHeader=\"Import failed\"\n                open={ modalVisible }\n                onClose={ () => setModalVisible(false) }\n                // onRequestSubmit={(file) => Submission(file)}\n                primaryButtonText=\"Submit\"\n                secondaryButtonText=\"Cancel\"\n                title=\"File(s) Upload + Importer\"\n            />\n            <Button onClick={ () => setModalVisible(true) }>\n                {\n                    (Type === \"Import\")\n                        ? (<>Import</>)\n                        : (<>Upload</>)\n                }\n            </Button>\n        </>\n    );\n};\n\nComponent.propTypes = {\n\n    /***\n     * Type:  \"Import\" XOR \"Upload\"\n     */\n\n    Type: PropTypes.oneOf([\"Import\", \"Upload\"])\n};\n\nexport default Component;\n","import { default as Shell } from \"./../../../components/Dashboard/Index\";\n\nimport { default as Data } from \"./../Demo/Example-1\";\n\nimport { default as Divider } from \"./../../../components/Divider/Index\";\n\nimport { default as Table } from \"./../Tables/Repositories/Index\";\n\nimport { default as APIKeyExample } from \"./../../../components/Modal/API-Key/Example\";\n\nimport { default as ContentManager } from \"./../../../components/Tearsheet/Content\";\n\nimport { default as Importer } from \"./../../../components/Modal/Import/Component\";\n\nconst Page = () => {\n    return (\n        <Shell>\n            <Table/>\n\n            <Divider/>\n\n            <Data.One/>\n            <Data.Two/>\n            <Data.Three/>\n            <Data.Four/>\n            <Data.Five/>\n\n            <Divider/>\n\n            <APIKeyExample/>\n\n            <Divider/>\n\n            <ContentManager/>\n\n            <Divider/>\n\n            <Importer Type={ \"Import\" }/>\n        </Shell>\n    );\n};\n\nexport default Page;\n"],"sourceRoot":""}