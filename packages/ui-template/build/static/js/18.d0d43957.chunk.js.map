{"version":3,"sources":["pages/Modal/Page.js","pages/Modal/index.js","pages/Module.js","utilities/Difference.js","components/Notifications/Informational.js","../node_modules/timers-browserify/main.js","../node_modules/setimmediate/setImmediate.js","pages/Modal/Test.js"],"names":["Page","url","process","duration","join","useState","data","setData","loading","setLoading","error","setError","Modal","useEffect","fetchData","a","axios","$","console","warn","column","line","message","stack","finally","debug","Awaitable","Error","style","marginBottom","kind","lowContrast","role","statusIconDescription","iconDescription","title","subtitle","hideCloseButton","Data","onClick","Test","State","defaultProps","Component","timeout","description","className","Styles","component","Properties","lg","md","sm","Utility","source","target","Object","keys","reduce","difference","key","Delimiter","Inline","props","closeOnEscape","onClose","children","onCloseButtonClick","properties","scope","global","self","window","apply","Function","prototype","Timeout","id","clearFn","this","_id","_clearFn","exports","setTimeout","call","arguments","clearTimeout","setInterval","clearInterval","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","require","setImmediate","clearImmediate","undefined","registerImmediate","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","getPrototypeOf","toString","handle","nextTick","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","messagePrefix","Math","random","onGlobalMessage","event","indexOf","slice","length","addEventListener","attachEvent","installPostMessageImplementation","MessageChannel","channel","port1","port2","installMessageChannelImplementation","createElement","html","documentElement","script","onreadystatechange","removeChild","appendChild","installReadyStateChangeImplementation","callback","args","Array","i","task","run","ID","getElementById","classList","toggle","Classification","cx","createPortal","body"],"mappings":"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","file":"static/js/18.d0d43957.chunk.js","sourcesContent":["import axios from \"axios\";\n\nimport { Inline } from \"./../../components/Notifications/Informational.js\";\n\nimport PropTypes from \"prop-types\";\n\nimport React, { useState, useEffect } from \"react\";\n\nimport { default as Test } from \"./Test.js\";\n\nimport { Button } from \"@carbon/react\";\n\n/***\n * @param duration {Number} Total Skeleton Simulated Loading Time (Seconds)\n * @return {JSX.Element}\n * @constructor\n */\n\nexport const Page = ({ duration }) => {\n    const url = process.env.REACT_APP_API_ENDPOINT + [ \"/v1/utility/awaitable?duration\", duration ].join(\"=\");\n\n    const [ data, setData ] = useState(false);\n    const [ loading, setLoading ] = useState(false);\n    const [ error, setError ] = useState(null);\n\n    const Modal  = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setLoading(true);\n\n            try {\n                const $ = await axios(url);\n\n                setData($);\n                setError(false);\n            } catch ( error ) {\n                console.warn(error);\n                setError({\n                    column: error?.column,\n                    line: error?.line,\n                    message: error?.message,\n                    stack: error?.stack\n                });\n            }\n\n            finally { setLoading(false); }\n\n        };\n\n        fetchData().finally(() => {\n            console.debug(\"[Debug] Loading Complete\");\n        });\n    }, [ url ]);\n\n    const Awaitable = () => (loading) && (<span>...</span>);\n\n    const Error = () => (error && !loading) && (\n        <div style={ { marginBottom: \"1.0rem\" } }>\n            <Inline\n                kind={ \"error\" }\n                lowContrast={ true }\n                role={ \"alert\" }\n                statusIconDescription={ \"Status-Icon\" }\n                iconDescription={ \"Close Error Message\" }\n                title={ \"Error\" }\n                subtitle={ error?.message }\n                hideCloseButton={ true }\n            />\n        </div>\n    );\n\n    const Data = () => (data && !loading) && (\n        <>\n            Complete\n            <Button onClick={() => {\n                Modal[1](!Modal[0]);\n            }}>\n                Test\n            </Button>\n            <Test State={Modal}/>\n        </>\n    );\n\n    return (\n        <>\n            { (<Error/>) }\n            { (<Awaitable/>) }\n            { (<Data/>) }\n        </>\n    );\n};\n\nPage.defaultProps = {\n    duration: 3\n};\n\nPage.propTypes = {\n    /*** @type {Number} Total Skeleton Simulated Loading Time (Seconds) */\n    duration: PropTypes.number.isRequired\n};\n\nexport default Page;","import { default as Template } from \"./../Module.js\";\n\nimport PropTypes from \"prop-types\";\n\nimport { default as Page } from \"./Page.js\";\n\nimport Styles from \"./SCSS/Index.module.scss\";\n\nconst Component = ({ timeout, description }) => {\n    return (\n        <Template Page={ Page } description={ description } timeout={ timeout } className={ Styles.component }/>\n    );\n};\n\nComponent.defaultProps = {\n    timeout: 1250\n};\n\nComponent.propTypes = {\n    /**\n     * Forced Delay during Transition\n     */\n\n    timeout: PropTypes.number.isRequired,\n\n    /***\n     * Loading Screen Context\n     */\n\n    description: PropTypes.string.isRequired\n};\n\nexport default Component;","import PropTypes from \"prop-types\";\n\nimport {\n    Grid, Column\n} from \"@carbon/react\";\n\nimport { default as Loader } from \"./../components/Loader\";\n\nconst Component = ({ Page, timeout, description, ... Properties }) => {\n    return (\n        <Loader description={ description } timeout={ timeout }>\n            <Grid { ... Properties }>\n                <Column lg={ 16 } md={ 8 } sm={ 4 }>\n                    <Page/>\n                </Column>\n            </Grid>\n        </Loader>\n    );\n};\n\nComponent.defaultProps = {\n    timeout: 1250\n};\n\nComponent.propTypes = {\n    Page: PropTypes.func.isRequired,\n\n    /**\n     * Forced Delay during Transition (Units in ms)\n     */\n\n    timeout: PropTypes.number.isRequired,\n\n    /***\n     * Loading Screen Context\n     */\n\n    description: PropTypes.string.isRequired\n};\n\nexport default Component;","const Utility = (source, target) => Object.keys(source).reduce((difference, key) => {\n    if ( target[key] === source[key] ) return difference;\n    return {\n        ... difference,\n        [key]: source[key]\n    };\n}, {});\n\nexport default Utility;\n","import PropTypes from \"prop-types\";\n\nimport { InlineNotification, ToastNotification, ActionableNotification } from \"@carbon/react\";\n\nimport { default as Difference } from \"./../../utilities/Difference.js\";\n\nconst Delimiter = () => (\n    <>\n        {\n            \" \"\n        }\n    </>\n);\n\nexport const Inline = (props) => {\n    const {\n        kind,\n        lowContrast,\n        role,\n        title,\n        subtitle,\n        iconDescription,\n        statusIconDescription,\n        hideCloseButton,\n        closeOnEscape,\n        onClose,\n        onCloseButtonClick,\n        children,\n        ... properties\n    } = props;\n\n    return (\n        <InlineNotification\n            kind={ kind }\n            lowContrast={ lowContrast }\n            role={ role }\n            title={ title }\n            subtitle={ subtitle }\n            iconDescription={ iconDescription }\n            statusIconDescription={ statusIconDescription }\n            hideCloseButton={ hideCloseButton }\n            closeOnEscape={ closeOnEscape }\n            children={ children }\n            onClose={ onClose }\n\n            {\n                ... properties\n            }\n        >\n            <span>\n                <strong>\n                    { title }\n                </strong>\n                {\n                    \" - \"\n                }\n                <Delimiter/>\n                { subtitle }\n            </span>\n            <br/>\n        </InlineNotification>\n    );\n};\n\nInline.defaultProps = {\n    kind: \"info\",\n    lowContrast: true,\n    role: \"alert\",\n    title: \"[Title]\",\n    subtitle: \"[Subtitle]\",\n    iconDescription: \"[Icon Descriptive Content]\",\n    statusIconDescription: \"[Status Icon Descriptive Content]\",\n    hideCloseButton: false,\n    closeOnEscape: true,\n    children: null,\n    properties: null\n};\n\nInline.propTypes = {\n    title: PropTypes.string,\n    subtitle: PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]),\n\n    /**\n     * Specify the content\n     */\n    children: PropTypes.node,\n\n    /**\n     * Specify an optional className to be applied to the notification box\n     */\n    className: PropTypes.string,\n\n    /**\n     * Specify if pressing the escape key should close notifications\n     */\n    closeOnEscape: PropTypes.bool,\n\n    /**\n     * Specify the close button should be disabled, or not\n     */\n    hideCloseButton: PropTypes.bool,\n\n    /**\n     * Provide a description for \"close\" icon that can be read by screen readers\n     */\n    iconDescription: PropTypes.string,\n\n    /**\n     * Specify what state the notification represents\n     */\n    kind: PropTypes.oneOf([ \"error\", \"info\", \"info-square\", \"success\", \"warning\", \"warning-alt\" ]),\n\n    /**\n     * Specify whether you are using the low contrast variant of the ToastNotification.\n     */\n    lowContrast: PropTypes.bool,\n\n    /**\n     * Provide a function that is called when menu is closed\n     */\n    onClose: PropTypes.func,\n\n    /**\n     * Provide a function that is called when the close button is clicked\n     */\n    onCloseButtonClick: PropTypes.func,\n\n    /**\n     * By default, this value is \"alert\". You can also provide an alternate\n     * role if it makes sense from the accessibility-side\n     */\n    role: PropTypes.oneOf([ \"alert\", \"log\", \"status\" ]),\n\n    /**\n     * Provide a description for \"status\" icon that can be read by screen readers\n     */\n    statusIconDescription: PropTypes.string,\n\n    /**\n     * Additional Properties\n     */\n    properties: PropTypes.any\n};\n\nexport const Toast = (props) => {\n    const {\n        kind,\n        lowContrast,\n        role,\n        title,\n        subtitle,\n        iconDescription,\n        statusIconDescription,\n        hideCloseButton,\n        closeOnEscape,\n        timeout,\n\n        ... properties\n    } = props;\n\n    return (\n        <ToastNotification\n            kind={ kind }\n            lowContrast={ lowContrast }\n            role={ role }\n            title={ title }\n            subtitle={ subtitle }\n            iconDescription={ iconDescription }\n            statusIconDescription={ statusIconDescription }\n            hideCloseButton={ hideCloseButton }\n            closeOnEscape={ closeOnEscape }\n            timeout={ timeout }\n\n            {\n                ... properties\n            }\n\n        >\n            <strong>\n                { title }\n            </strong>\n            <Delimiter/>\n            { subtitle }\n        </ToastNotification>\n    );\n};\n\nToast.propTypes = {\n    /**\n     * Specify the content\n     */\n    children: PropTypes.node,\n\n    /**\n     * Specify an optional className to be applied to the notification box\n     */\n    className: PropTypes.string,\n\n    /**\n     * Specify if pressing the escape key should close notifications\n     */\n    closeOnEscape: PropTypes.bool,\n\n    /**\n     * Specify the close button should be disabled, or not\n     */\n    hideCloseButton: PropTypes.bool,\n\n    /**\n     * Provide a description for \"close\" icon that can be read by screen readers\n     */\n    iconDescription: PropTypes.string,\n\n    /**\n     * Specify what state the notification represents\n     */\n    kind: PropTypes.oneOf([ \"error\", \"info\", \"info-square\", \"success\", \"warning\", \"warning-alt\" ]),\n\n    /**\n     * Specify whether you are using the low contrast variant of the ToastNotification.\n     */\n    lowContrast: PropTypes.bool,\n\n    /**\n     * Provide a function that is called when menu is closed\n     */\n    onClose: PropTypes.func,\n\n    /**\n     * Provide a function that is called when the close button is clicked\n     */\n    onCloseButtonClick: PropTypes.func,\n\n    /**\n     * By default, this value is \"alert\". You can also provide an alternate\n     * role if it makes sense from the accessibility-side\n     */\n    role: PropTypes.oneOf([ \"alert\", \"log\", \"status\" ]),\n\n    /**\n     * Provide a description for \"status\" icon that can be read by screen readers\n     */\n    statusIconDescription: PropTypes.string,\n\n    /**\n     * Specify an optional duration the notification should be closed in\n     */\n    timeout: PropTypes.number,\n\n    /**\n     * Additional Properties\n     */\n    properties: PropTypes.any\n};\n\nToast.defaultProps = {\n    kind: \"info\",\n    lowContrast: true,\n    role: \"alert\",\n    title: \"[Title]\",\n    subtitle: \"[Subtitle]\",\n    iconDescription: \"[Icon Descriptive Content]\",\n    statusIconDescription: \"[Status Icon Descriptive Content]\",\n    hideCloseButton: false,\n    closeOnEscape: true,\n    timeout: null,\n    properties: null\n};\n\nexport const Actionable = (props) => {\n    const {\n        kind,\n        lowContrast,\n        role,\n        title,\n        subtitle,\n        iconDescription,\n        statusIconDescription,\n        hideCloseButton,\n        closeOnEscape,\n        inline,\n        hasFocus,\n        actionButtonLabel,\n        onActionButtonClick,\n        ... properties\n    } = props;\n\n    return (\n        <ActionableNotification\n            kind={ kind }\n            lowContrast={ lowContrast }\n            role={ role }\n            title={ title }\n            subtitle={ subtitle }\n            iconDescription={ iconDescription }\n            statusIconDescription={ statusIconDescription }\n            hideCloseButton={ hideCloseButton }\n            closeOnEscape={ closeOnEscape }\n            inline={ inline }\n            hasFocus={ hasFocus }\n            actionButtonLabel={ actionButtonLabel }\n            onActionButtonClick={ onActionButtonClick }\n\n            {\n                ... properties\n            }\n        >\n            <strong>\n                { title }\n            </strong>\n            <Delimiter/>\n            { subtitle }\n        </ActionableNotification>\n    );\n};\n\nActionable.propTypes = {\n    /**\n     * Pass in the action button label that will be rendered within the ActionableNotification.\n     */\n    actionButtonLabel: PropTypes.string,\n\n    /**\n     * Specify the content\n     */\n    children: PropTypes.node,\n\n    /**\n     * Specify an optional className to be applied to the notification box\n     */\n    className: PropTypes.string,\n\n    /**\n     * Specify if pressing the escape key should close notifications\n     */\n    closeOnEscape: PropTypes.bool,\n\n    /**\n     * Specify if focus should be moved to the component when the notification contains actions\n     */\n    hasFocus: PropTypes.bool,\n\n    /**\n     * Specify the close button should be disabled, or not\n     */\n    hideCloseButton: PropTypes.bool,\n\n    /**\n     * Provide a description for \"close\" icon that can be read by screen readers\n     */\n    iconDescription: PropTypes.string,\n\n    /*\n     * Specify if the notification should have inline styling applied instead of toast\n     */\n    inline: PropTypes.bool,\n\n    /**\n     * Specify what state the notification represents\n     */\n    kind: PropTypes.oneOf([ \"error\", \"info\", \"info-square\", \"success\", \"warning\", \"warning-alt\" ]),\n\n    /**\n     * Specify whether you are using the low contrast variant of the ActionableNotification.\n     */\n    lowContrast: PropTypes.bool,\n\n    /**\n     * Provide a function that is called when the action is clicked\n     */\n    onActionButtonClick: PropTypes.func,\n\n    /**\n     * Provide a function that is called when menu is closed\n     */\n    onClose: PropTypes.func,\n\n    /**\n     * Provide a function that is called when the close button is clicked\n     */\n    onCloseButtonClick: PropTypes.func,\n\n    /**\n     * By default, this value is \"alertdialog\". You can also provide an alternate\n     * role if it makes sense from the accessibility-side.\n     */\n    role: PropTypes.string,\n\n    /**\n     * Provide a description for \"status\" icon that can be read by screen readers\n     */\n    statusIconDescription: PropTypes.string,\n\n    /**\n     * Additional Properties\n     */\n    properties: PropTypes.any\n};\n\nActionable.defaultProps = {\n    kind: \"info\",\n    lowContrast: true,\n    role: \"alert\",\n    title: \"[Title]\",\n    subtitle: \"[Subtitle]\",\n    iconDescription: \"[Icon Descriptive Content]\",\n    statusIconDescription: \"[Status Icon Descriptive Content]\",\n    hideCloseButton: false,\n    closeOnEscape: true,\n    inline: true,\n    hasFocus: true,\n    actionButtonLabel: \"[Button-Label]\",\n    onActionButtonClick: (event) => console.trace(\"[Trace]\", \"Actionable Button Click Event\", event)\n};\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","import \"./SCSS/Modal.scss\";\n\nimport { useEffect } from \"react\";\n\nimport { createPortal } from \"react-dom\";\n\nimport cx from \"classnames\";\n\nconst Component = ({ID = \"modal-portal-id\", State}) => {\n    useEffect(() => {\n        (State[0] === true) && setImmediate(() => {\n            document.getElementById(ID).classList.toggle(\"modal-active\", true);\n        }, 1000);\n    }, [State[0]]);\n\n    const Classification = cx(\"modal\", {\n        \"modal-inactive\": !(State[0] === true)\n    });\n\n    return createPortal(\n        (\n            <div id={ ID } className={Classification}>\n                <div className={\"modal-content\"}>\n                    Hello\n                </div>\n            </div>\n        ), document.body\n    );\n};\n\nexport default Component"],"sourceRoot":""}