{"version":3,"sources":["pages/Development/Test-Table/Generator.js","pages/Development/Test-Table/Columns.js","pages/Development/Test-Table/Table.js","pages/Development/Test-Table/Page.js"],"names":["UUID","source","Date","getTime","delta","performance","now","replace","$","random","Math","floor","toString","Height","minimum","maximum","Number","toFixed","Index","Value","Cast","console","debug","Data","Names","Surnames","Marital","SINGLE","MARRIED","OTHER","NULL","Person","Name","First","String","Last","Age","index","Generator","Total","length","i","Instance","push","Columns","id","Header","Cell","row","getToggleRowExpandedProps","isExpanded","SubCell","accessor","cellProps","value","SubRows","rowProps","visibleColumns","data","loading","colSpan","map","x","key","cells","cell","getCellProps","render","column","original","SubRowAsync","React","useState","setLoading","setData","useEffect","timer","setTimeout","clearTimeout","Table","userColumns","columns","userData","renderer","useTable","useExpanded","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","state","className","join","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getRowProps","Fragment","Component","useMemo","useCallback","Page","awaiting","setAwaiting","a","Waiter","Promise","resolve","reject","finally","Await"],"mappings":"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","file":"static/js/28.4a358d09.chunk.js","sourcesContent":["import { Data as Names } from \"./First-Names\";\nimport { Data as Surnames } from \"./Last-Names\";\n\n/***\n *\n * @param length\n *\n * @returns {Array<Number>}\n *\n */\n\nconst range = (length) => {\n    /***\n     *\n     * @type {[Number]}\n     *\n     */\n\n    const $ = [];\n\n    let i = 0;\n\n    for (i; i < length; i++) $.push(i);\n\n    return $;\n};\n\n// const UID = () => crypto.randomBytes(256 / 8)\n//     .toString(\"UTF-8\");\n\nfunction UUID() { // Public Domain / MIT\n    let source = new Date().getTime(); // Timestamp\n    let delta = ((typeof performance !== \"undefined\") && performance.now && (performance.now() * 1000)) || 0;\n\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function ($) {\n        var random = Math.random() * 16; // Random number between 0 and 16\n\n        if ( source > 0 ) {\n            random = (source + random) % 16 | 0;\n            source = Math.floor(source / 16);\n        } else {\n            random = (delta + random) % 16 | 0;\n            delta = Math.floor(delta / 16);\n        }\n\n        return ($ === \"x\" ? random : (random & 0x3 | 0x8)).toString(16);\n    });\n}\n\n/***\n *\n * @param minimum\n * @param maximum\n *\n * @returns {string}\n *\n * @constructor\n *\n */\n\nconst Age = (minimum, maximum) => {\n    return Number(Math.random() * (maximum - minimum) + minimum).toFixed(0);\n};\n\n/***\n *\n * @param minimum\n *\n * @param maximum\n *\n * @returns {string}\n *\n * @constructor\n *\n */\n\nconst Height = (minimum, maximum) => {\n    return Number(Math.random() * (maximum - minimum) + minimum).toFixed(3);\n};\n\n/***\n *\n * @param maximum {Number}\n *\n * @returns {Number}\n *\n * @constructor\n *\n */\n\nconst Index = (maximum) => {\n    const Value = Number(Math.random() * (maximum)).toFixed(0);\n\n    const Cast = Number(Value);\n\n    console.debug(\"[Debug]\", \"Casted String ==> Number Index\" + \":\", Cast);\n\n    return Cast;\n};\n\n/***\n *\n * @type {{\"First-Names\": [String], \"Last-Names\": [String]}}\n *\n */\n\nconst Data = {\n    \"First-Names\": Names,\n    \"Last-Names\": Surnames\n};\n\n/***\n *\n * @type {{MARRIED: string, OTHER: string, random: (function(): string), SINGLE: string, NULL: null}}\n *\n */\n\nconst Marital = {\n    SINGLE: \"Single\",\n    MARRIED: \"Married\",\n    OTHER: \"Other\",\n\n    NULL: null,\n\n    /***\n     *\n     * @returns {string}\n     *\n     * @constructor\n     *\n     */\n\n    random: () => {\n        return [\n            Marital.SINGLE,\n            Marital.MARRIED,\n            Marital.OTHER\n        ][Index(2)]\n    }\n};\n\n/***\n * @param index {Number}\n *\n * @param UID {String}\n * @param UUID {String}\n *\n * @param First {String}\n * @param Last {String}\n *\n * @param Age {String}\n * @param Height {String}\n *\n * @param Marital {Marital}\n *\n * @returns {{Height: String, UUID: String, Age: String, Name: {Last: String, First: String}, Marital: Marital, index: Number}}\n *\n * @type {function(String): {Height: String, UUID: String, Age: String, Name: {Last: String, First: String}, Marital: Marital, index: Number}} Person\n *\n * @constructor\n *\n */\n\nexport const Person = (\n    {\n        Name: {\n            First = typeof String, Last = typeof String\n        },\n        Age = typeof String,\n        Height= typeof String,\n\n        UUID= typeof String,\n        Marital = Marital.NULL,\n        index = 0\n    }\n) => {\n    return {\n        Name: { First, Last }, Age, Height, UUID, Marital, index\n    };\n};\n\n\n\n/***\n *\n * @param Total {Number}\n *\n * @returns {[Person]}\n *\n * @constructor\n *\n */\n\nexport const Generator = (Total) => {\n    console.debug(\"[Debug]\", \"Total First Name(s)\", Data[\"First-Names\"].length);\n    console.debug(\"[Debug]\", \"Total Last Name(s)\", Data[\"Last-Names\"].length);\n\n    /***\n     *\n     * @type {Array<Person>}\n     *\n     */\n\n    const $ = [];\n\n    let i = 0;\n    for ( i; i < Total; i++ ) {\n        const Instance = Person({\n            Name: {\n                First: Data[\"First-Names\"][Index(Total)],\n                Last: Data[\"Last-Names\"][Index(Total)]\n            }, Age: Age(18, 99),\n            Height: Height(42, 96),\n\n            UUID: UUID(),\n\n            Marital: Marital.random(),\n\n            index: i\n        });\n\n        $.push(Instance);\n    }\n\n    return $;\n};\n\nexport default Generator;\n","import React from \"react\";\n\nimport { Person } from \"./Generator.js\";\n\n/***\n *\n * @returns {[{SubCell: (function(): null), Header: (function(): null), id: string, Cell: (function({row: *}))}, {Header: string, columns: [{SubCell: (function(*)), Header: string, accessor: (function(*): string|*)}, {Header: string, accessor: (function(*): string|*)}]}, {Header: string, columns: [{Header: string, accessor: (function(Person): string|String|*)}, {Header: string, accessor: (function(Person): *)}, {Header: string, accessor: (function(Person): string|Marital|*)}]}]}\n *\n * @constructor\n *\n */\n\nconst Columns = () => {\n    return [\n        {\n            id: \"expander\", // @required\n            // Cell := Expander\n            Header: () => null,\n                /// ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n                /// <span {...getToggleAllRowsExpandedProps()}>\n                ///     {isAllRowsExpanded ? '👇' : '👉'}\n                /// </span>\n                /// ),\n            Cell: ({ row }) => (\n                // Use Cell to render an expander for each row.\n                // We can use the getToggleRowExpandedProps prop-getter\n                // to build the expander.\n                <span { ... row.getToggleRowExpandedProps() }>\n                    { row.isExpanded ? \"👇\" : \"👉\" }\n                </span>\n            ),\n            // We can override the cell renderer with a SubCell to be used with an expanded row\n            SubCell: () => null // No expander on an expanded row\n        },\n\n        {\n            Header: \"First Name\",\n            // We re-map data using accessor functions for subRows\n            accessor: ($) => $.Name?.First,\n            // We can render something different for subRows\n            SubCell: (cellProps) => (\n                <>🥳 { cellProps.value } 🎉</>\n            )\n        },\n        {\n            Header: \"Last Name\",\n            accessor: ($) => $.Name?.Last\n        },\n        {\n            Header: \"Age\",\n            /*** @param $ {Person} */\n            accessor: ($) => $.Age\n        },\n        {\n            Header: \"Height\",\n            /*** @param $ {Person} */\n            accessor: ($) => $.Height\n        },\n        {\n            Header: \"Status\",\n            /*** @param $ {Person} */\n            accessor: ($) => $.Marital\n        }\n\n//        {\n//            Header: \"Name\",\n//            columns: [\n//                {\n//                    Header: \"First Name\",\n//                    // We re-map data using accessor functions for subRows\n//                    accessor: ($) => $.Name?.First,\n//                    // We can render something different for subRows\n//                    SubCell: (cellProps) => (\n//                        <>🥳 { cellProps.value } 🎉</>\n//                    )\n//                },\n//                {\n//                    Header: \"Last Name\",\n//                    accessor: ($) => $.Name?.Last\n//                }\n//            ]\n//        },\n//        {\n//            Header: \"Information\",\n//            columns: [\n//                {\n//                    Header: \"Age\",\n//                    /*** @param $ {Person} */\n//                    accessor: ($) => $.Age\n//                },\n//                {\n//                    Header: \"Height\",\n//                    /*** @param $ {Person} */\n//                    accessor: ($) => $.Height\n//                },\n//                {\n//                    Header: \"Status\",\n//                    /*** @param $ {Person} */\n//                    accessor: ($) => $.Marital\n//                }\n//            ]\n//        }\n    ];\n};\n\nexport default Columns;\n","import React from \"react\";\n\nimport { useTable, useExpanded, useAsyncDebounce } from \"react-table\";\n\nimport { default as Generator } from \"./Generator.js\";\n\nimport { default as Columns } from \"./Columns.js\";\n\nfunction SubRows({ row, rowProps, visibleColumns, data, loading }) {\n    if ( loading ) {\n        return (\n            <tr>\n                <td/>\n                <td colSpan={ visibleColumns.length - 1 }>\n                    Loading...\n                </td>\n            </tr>\n        );\n    }\n\n    // error handling here :)\n\n    return (\n        <>\n            {\n                (\n                    row.isExpanded\n                    ? (\n                            data.map((x, i) => {\n                                    return (\n                                        <tr\n                                            { ... rowProps }\n                                            key={ `${ rowProps.key }-expanded-${ i }` }\n                                        >\n                                            { row.cells.map((cell) => {\n                                                return (\n                                                    <td { ... cell.getCellProps() } >\n                                                        {\n                                                            cell.render(\n                                                                cell.column.SubCell\n                                                                    ? \"SubCell\"\n                                                                    : \"Cell\", {\n                                                                    value:\n                                                                        cell.column.accessor &&\n                                                                        cell.column.accessor(x, i),\n                                                                    row: { ... row, original: x }\n                                                                }\n                                                            )\n                                                        }\n                                                    </td>\n                                                );\n                                            }) }\n                                        </tr>\n                                    );\n                                })\n                    ) : null\n                )\n            }\n        </>\n    );\n}\n\nconst SubRowAsync = ({ row, rowProps, visibleColumns }) => {\n    const [ loading, setLoading ] = React.useState(true);\n    const [ data, setData ] = React.useState([]);\n\n    React.useEffect(() => {\n        const timer = setTimeout(() => {\n            setData(Generator(3));\n            setLoading(false);\n        }, 1000);\n\n        return () => {\n            clearTimeout(timer);\n        };\n    }, []);\n\n    return (\n        <SubRows\n            row={ row }\n            rowProps={ rowProps }\n            visibleColumns={ visibleColumns }\n            data={ data }\n            loading={ loading }\n        />\n    );\n};\n\n// A simple way to support a renderRowSubComponent is to make a render prop\n// This is NOT part of the React Table API, it's merely a rendering\n// option we are creating for ourselves in our table renderer\nfunction Table({ columns: userColumns, data: userData, renderer }) {\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        visibleColumns,\n        state\n    } = useTable(\n        {\n            columns: userColumns,\n            data: userData\n        },\n        useExpanded // We can useExpanded to track the expanded state\n        // for sub components too!\n    );\n\n    return (\n//        <>\n//      <pre>\n//        <code>{ JSON.stringify({ expanded: expanded }, null, 2) }</code>\n//      </pre>\n            <table { ... getTableProps() } className={[\"cds--data-table\", \"cds--data-table--normal\", \"cds--data-table--no-border\"].join(\" \")}>\n                <thead>\n                { headerGroups.map(headerGroup => (\n                    <tr { ... headerGroup.getHeaderGroupProps() }>\n                        { headerGroup.headers.map(column => (\n                            <th className={\"cds--table-expand\"} { ... column.getHeaderProps() }>{ column.render(\"Header\") }</th>\n                        )) }\n                    </tr>\n                )) }\n                </thead>\n                <tbody { ... getTableBodyProps() }>\n                { rows.map((row, i) => {\n                    prepareRow(row);\n                    const rowProps = row.getRowProps();\n                    return (\n                        // Use a React.Fragment here so the table markup is still valid\n                        <React.Fragment key={ rowProps.key }>\n                            <tr { ... rowProps }>\n                                { row.cells.map(cell => {\n                                    return (\n                                        <td { ... cell.getCellProps() }>{ cell.render(\"Cell\") }</td>\n                                    );\n                                }) }\n                            </tr>\n                            {/* We could pass anything into this */ }\n                            {\n                                row?.isExpanded && renderer(\n                                    { row, rowProps, visibleColumns }\n                                )\n                            }\n                        </React.Fragment>\n                    );\n                }) }\n                </tbody>\n            </table>\n//            <br/>\n//            <div>Showing the first 20 results of { rows.length } rows</div>\n//        </>\n    );\n};\n\nconst Component = () => {\n    const columns = React.useMemo(() => Columns(), []);\n    const data = React.useMemo(() => Generator(20), []);\n    const renderer = React.useCallback(\n        ({ row, rowProps, visibleColumns }) => {\n            return (\n                <SubRowAsync\n                    row={ row }\n                    rowProps={ rowProps }\n                    visibleColumns={ visibleColumns }\n                />\n            );\n        }, []\n    );\n\n    return (<Table columns={ columns } data={ data } renderer={ renderer }/>);\n};\n\nexport default Component;","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { default as Table } from \"./Table.js\";\n\nconst Page = () => {\n    const [ firstRowIndex, setFirstRowIndex ] = useState(0);\n    const [ currentPageSize, setCurrentPageSize ] = useState(10);\n    const [ awaiting, setAwaiting ] = useState(true);\n\n    useEffect(() => {\n        async function Await() {\n            const Waiter = new Promise((resolve, reject) => setTimeout(\n                () => {\n                    console.debug(\"[Debug]\", \"Instantiating Waiter ...\");\n\n                    setAwaiting(false)\n\n                    if ( awaiting === false ) resolve(awaiting);\n                },\n                1500\n            ));\n\n            await Waiter.finally(() => setAwaiting(null));\n        }\n\n        Await().finally();\n    }, []);\n\n    switch ( awaiting ) {\n        case true: {\n            console.debug(\"[Debug]\", \"Awaitable\", awaiting);\n\n            return (awaiting === true) && (\n                \"...\"\n            );\n        }\n\n        default: {\n            console.debug(\"[Debug]\", \"Awaitable\", awaiting);\n            \n            console.debug(\"[Debug]\", \"Waiter has Successfully Resolved\");\n\n            return (awaiting === false) && (\n                <Table/>\n            );\n        }\n    }\n};\n\nexport default Page;\n"],"sourceRoot":""}