{"version":3,"sources":["settings/Configuration.js","settings/Patches.js","index.js"],"names":["settings","prefix","Features","Prefix","Toggle","defaultProps","labelText","useTheme","theme","Theme","React","createContext","Application","Import","DOM","window","matchMedia","addEventListener","event","Preference","matches","fallback","children","ReactDOM","render","document","getElementById","then","Module","register"],"mappings":"mLAMAA,IAASC,OAAS,MAIlBC,IAAe,CACX,gCAAgC,EAChC,0CAA0C,EAC1C,mBAAmB,EACnB,sBAAsB,IAGX,2BACPF,KAAc,CACdG,OAAQ,OAaKD,K,2IC5BrBE,KAAOC,aAAP,2BAA4BD,KAAOC,cAAkB,CAAEC,UAAW,U,gECYrDC,EAAW,WAAqB,IAApBC,EAAmB,uDAAX,OACvBC,EAAQC,IAAMC,cAAcH,GAIlC,OAFAC,EAAMD,MAAQA,EAEPC,GAGLG,EAAcC,gBAAO,kBAAM,uDAC3BC,EAAM,WACR,IAAMN,EAAQD,IAUd,OARAQ,OAAOC,WAAW,gCAAgCC,iBAAiB,UAAU,SAACC,GAC1E,IAAMC,EAAaD,EAAME,QAAU,OAAS,QAE5CZ,EAAMA,MACa,SAAfW,EACA,OAAS,WAIb,cAAC,KAAD,CAAOX,MAAQA,EAAMA,MAArB,SACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,WAAD,CACIa,SAAW,KACXC,SACI,cAACV,EAAD,aAS5BW,IAASC,OACL,cAAC,EAAD,IACDC,SAASC,eAAe,gBAGrB,+BAAsBC,MAAK,SAACC,GAAD,OAAYA,EAAOC,gB","file":"static/js/main.0c974532.chunk.js","sourcesContent":["import { settings } from \"carbon-components\";\n\n// import { pkg as Cognitive } from \"@carbon/ibm-cloud-cognitive\";\n\nimport * as Features from \"@carbon/feature-flags\";\n\nsettings.prefix = \"cds\";\n\n//Cognitive.prefix = \"cds\";\n\nFeatures.merge({\n    \"enable-css-custom-properties\": true,\n    \"enable-use-controlled-state-with-value\": true,\n    \"enable-css-grid\": true,\n    \"enable-v11-release\": true\n});\n\nexport default {\n    ... settings, ... {\n        Prefix: \"io\"\n    }\n};\n\n/***\n *\n * @param feature {String}\n * @returns {Boolean}\n * @constructor\n */\n\nexport const Enabled = (feature) => Features.enabled(feature);\n\nexport const Flags = Features.FeatureFlags;\n\nif ( process.env.NODE_ENV !== \"production\" ) console.debug({ Flags: Features.FeatureFlags });\n","import {\n    Toggle\n} from \"@carbon/react\";\n\nToggle.defaultProps = { ... Toggle.defaultProps, ... { labelText: \"@User\" }};","import \"./settings/index.js\";\n\nimport ReactDOM from \"react-dom\";\nimport React, { lazy as Import, Suspense } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport \"./Index.Fix.css\";\n\nimport { Theme, Content } from \"@carbon/react\";\n\n/***\n *\n * @param theme: {String(\"g100\" | \"g90\" | \"g10\" | \"white\")}\n *\n */\n\nexport const useTheme = (theme = \"g100\") => {\n    const Theme = React.createContext(theme);\n\n    Theme.theme = theme;\n\n    return Theme;\n};\n\nconst Application = Import(() => import(\"./Application.js\"));\nconst DOM = () => {\n    const theme = useTheme();\n\n    window.matchMedia(\"(prefers-color-scheme: dark)\").addEventListener(\"change\", (event) => {\n        const Preference = event.matches ? \"dark\" : \"light\";\n\n        theme.theme = (\n            Preference === \"dark\"\n        ) ? \"g100\" : \"light\";\n    });\n\n    return (\n        <Theme theme={ theme.theme }>\n            <Content>\n                <Router>\n                    <Suspense\n                        fallback={ null }\n                        children={ (\n                            <Application/>\n                        ) }\n                    />\n                </Router>\n            </Content>\n        </Theme>\n    );\n};\n\nReactDOM.render((\n    <DOM/>\n), document.getElementById(\"Application\"));\n\n(process.env.NODE_ENV === \"production\")\n    ? import(\"./Worker.js\").then((Module) => Module.register())\n    : import(\"./Worker.js\").then((Module) => Module.unregister());\n\n(process.env.NODE_ENV !== \"production\") && console.debug(\"[Debug]\", process.env);"],"sourceRoot":""}