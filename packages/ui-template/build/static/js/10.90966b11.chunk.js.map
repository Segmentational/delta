{"version":3,"sources":["utilities/Difference.js","components/Notifications/Authentication/Informational.js","pages/Development/Code-Snippet-Awaitable/Page.js","pages/Development/Code-Snippet-Awaitable/SCSS/Snippet.module.scss","pages/GitLab/SCSS/Activity.module.scss","pages/GitLab/SCSS/Paginator.module.scss","pages/GitLab/SCSS/Light.module.scss","pages/GitLab/SCSS/Bold.module.scss","pages/GitLab/SCSS/Tag.module.scss","pages/GitLab/SCSS/Code.module.scss","pages/GitLab/Query.js","pages/GitLab/Paginator.js","pages/GitLab/Skeleton.js","pages/GitLab/Actions.js","pages/GitLab/Modal.js","pages/GitLab/Table.js","pages/GitLab/Page.js"],"names":["Utility","source","target","Object","keys","reduce","difference","key","Delimiter","Inline","props","kind","lowContrast","role","title","subtitle","iconDescription","statusIconDescription","hideCloseButton","closeOnEscape","onClose","children","onCloseButtonClick","properties","console","debug","Difference","defaultProps","Component","url","process","duration","join","useState","data","setData","loading","setLoading","error","setError","useEffect","fetchData","a","axios","$","warn","column","line","message","stack","finally","Awaitable","type","Error","style","marginBottom","Data","className","Styles","JSON","stringify","showMoreText","showLessText","maxCollapsedNumberOfRows","wrapText","Requestable","headers","hideCopyButton","module","exports","Adapter","require","Forage","STORE","Cancellation","CancelToken","Instantiate","Store","createInstance","name","storeName","description","driver","INDEXEDDB","Cache","setupCache","excludeFromCache","clearOnStale","ignoreCache","limit","clearOnError","readHeaders","readOnError","maxAge","store","API","create","adapter","cache","cancelToken","token","AIO","URL","String","Request","ignore","fetch","Value","getItem","then","catch","Handler","setItem","JWT","Token","response","get","timeout","Result","Collection","clear","Query","Clear","total","iterator","length","Response","Waiter","Total","Skeleton","Table","Rows","Headers","compact","columnCount","rowCount","showHeader","showToolbar","zebra","Variables","id","REACT_APP_GITLAB_TOKEN","REACT_APP_GITLAB_PROJECTS_URL","open","setOpen","document","ReactDOM","createPortal","state","body","theme","hasIconOnly","size","onClick","tooltipAlignment","tooltipPosition","home","width","display","href","batchActionClick","event","getAttribute","log","parse","Refresh","setter","removeItem","State","Projects","forEach","Repository","Index","React","useMemo","disabled","isExpanded","isSelected","cells","values","UID","Name","Visibility","visibility","toUpperCase","Activity","last_activity_at","web_url","rows","isSortable","stickyHeader","useStaticWidth","render","getTableProps","getTableContainerProps","getSelectionProps","getExpandHeaderProps","getHeaderProps","getRowProps","getToolbarProps","getBatchActionProps","renderIcon","DICO","Metrics","CSV","Reload","tabIndex","enableToggle","map","Header","value","header","colSpan","Row","Snippet","copyButtonDescription","feedback","Code","expandIconDescription","row","copyLabel","Light","Bold","slice","Tag","window","justifyContent","Modal","setRows","page","setPage","awaiting","setAwaiting","Promise","_","setTimeout","Await","sortable","Pages","Setter","Size","Sizes"],"mappings":"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","file":"static/js/10.90966b11.chunk.js","sourcesContent":["const Utility = (source, target) => Object.keys(source).reduce((difference, key) => {\n    if ( target[key] === source[key] ) return difference;\n    return {\n        ... difference,\n        [key]: source[key]\n    };\n}, {});\n\nexport default Utility;\n","import PropTypes from \"prop-types\";\n\nimport { InlineNotification, ToastNotification, ActionableNotification } from \"@carbon/react\";\n\nimport { default as Difference } from \"./../../../utilities/Difference.js\";\n\nconst Delimiter = () => (\n    <>\n        {\n            \" \"\n        }\n    </>\n);\n\nexport const Inline = (props) => {\n    const {\n        kind,\n        lowContrast,\n        role,\n        title,\n        subtitle,\n        iconDescription,\n        statusIconDescription,\n        hideCloseButton,\n        closeOnEscape,\n        onClose,\n        onCloseButtonClick,\n        children,\n        ... properties\n    } = props;\n\n    console.debug(\"Properties (Inline-Notification)\", Difference(props, properties));\n\n    console.debug(\"Attributes (Inline-Notification)\", properties);\n\n    return (\n        <InlineNotification\n            kind={ kind }\n            lowContrast={ lowContrast }\n            role={ role }\n            title={ title }\n            subtitle={ subtitle }\n            iconDescription={ iconDescription }\n            statusIconDescription={ statusIconDescription }\n            hideCloseButton={ hideCloseButton }\n            closeOnEscape={ closeOnEscape }\n            children={ children }\n            onClose={ onClose }\n\n            {\n                ... properties\n            }\n\n            /// data-properties={\n            ///     String(JSON.stringify({\n            ///         Properties: JSON.stringify(Difference(props, properties), null, 4),\n            ///         Attributes: JSON.stringify(properties, null, 4)\n            ///     }, null, 4).valueOf())\n            /// }\n        >\n            <span>\n                <strong>\n                    { title }\n                </strong>\n                {\n                    \" - \"\n                }\n                <Delimiter/>\n                { subtitle }\n            </span>\n            <br/>\n        </InlineNotification>\n    );\n};\n\nInline.defaultProps = {\n    kind: \"info\",\n    lowContrast: true,\n    role: \"alert\",\n    title: \"[Title Title]\",\n    subtitle: \"[Subtitle Content]\",\n    iconDescription: \"[Icon Descriptive Content]\",\n    statusIconDescription: \"[Status Icon Descriptive Content]\",\n    hideCloseButton: false,\n    closeOnEscape: true,\n    children: null,\n    properties: null\n};\n\nInline.propTypes = {\n    title: PropTypes.string,\n    subtitle: PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]),\n\n    /**\n     * Specify the content\n     */\n    children: PropTypes.node,\n\n    /**\n     * Specify an optional className to be applied to the notification box\n     */\n    className: PropTypes.string,\n\n    /**\n     * Specify if pressing the escape key should close notifications\n     */\n    closeOnEscape: PropTypes.bool,\n\n    /**\n     * Specify the close button should be disabled, or not\n     */\n    hideCloseButton: PropTypes.bool,\n\n    /**\n     * Provide a description for \"close\" icon that can be read by screen readers\n     */\n    iconDescription: PropTypes.string,\n\n    /**\n     * Specify what state the notification represents\n     */\n    kind: PropTypes.oneOf([ \"error\", \"info\", \"info-square\", \"success\", \"warning\", \"warning-alt\" ]),\n\n    /**\n     * Specify whether you are using the low contrast variant of the ToastNotification.\n     */\n    lowContrast: PropTypes.bool,\n\n    /**\n     * Provide a function that is called when menu is closed\n     */\n    onClose: PropTypes.func,\n\n    /**\n     * Provide a function that is called when the close button is clicked\n     */\n    onCloseButtonClick: PropTypes.func,\n\n    /**\n     * By default, this value is \"alert\". You can also provide an alternate\n     * role if it makes sense from the accessibility-side\n     */\n    role: PropTypes.oneOf([ \"alert\", \"log\", \"status\" ]),\n\n    /**\n     * Provide a description for \"status\" icon that can be read by screen readers\n     */\n    statusIconDescription: PropTypes.string,\n\n    /**\n     * Additional Properties\n     */\n    properties: PropTypes.any\n};\n\nexport const Toast = (props) => {\n    const {\n        kind,\n        lowContrast,\n        role,\n        title,\n        subtitle,\n        iconDescription,\n        statusIconDescription,\n        hideCloseButton,\n        closeOnEscape,\n        timeout,\n\n        ... properties\n    } = props;\n\n    console.debug(\"Properties (Toast-Notification)\", Difference(props, properties));\n\n    console.debug(\"Attributes (Toast-Notification)\", properties);\n\n    return (\n        <ToastNotification\n            kind={ kind }\n            lowContrast={ lowContrast }\n            role={ role }\n            title={ title }\n            subtitle={ subtitle }\n            iconDescription={ iconDescription }\n            statusIconDescription={ statusIconDescription }\n            hideCloseButton={ hideCloseButton }\n            closeOnEscape={ closeOnEscape }\n            timeout={ timeout }\n\n            {\n                ... properties\n            }\n\n            data-properties={\n                String(JSON.stringify({\n                    Properties: JSON.stringify(Difference(props, properties), null, 4),\n                    Attributes: JSON.stringify(properties, null, 4)\n                }, null, 4).valueOf())\n            }\n        >\n            <strong>\n                { title }\n            </strong>\n            <Delimiter/>\n            { subtitle }\n        </ToastNotification>\n    );\n};\n\nToast.propTypes = {\n    /**\n     * Specify the content\n     */\n    children: PropTypes.node,\n\n    /**\n     * Specify an optional className to be applied to the notification box\n     */\n    className: PropTypes.string,\n\n    /**\n     * Specify if pressing the escape key should close notifications\n     */\n    closeOnEscape: PropTypes.bool,\n\n    /**\n     * Specify the close button should be disabled, or not\n     */\n    hideCloseButton: PropTypes.bool,\n\n    /**\n     * Provide a description for \"close\" icon that can be read by screen readers\n     */\n    iconDescription: PropTypes.string,\n\n    /**\n     * Specify what state the notification represents\n     */\n    kind: PropTypes.oneOf([ \"error\", \"info\", \"info-square\", \"success\", \"warning\", \"warning-alt\" ]),\n\n    /**\n     * Specify whether you are using the low contrast variant of the ToastNotification.\n     */\n    lowContrast: PropTypes.bool,\n\n    /**\n     * Provide a function that is called when menu is closed\n     */\n    onClose: PropTypes.func,\n\n    /**\n     * Provide a function that is called when the close button is clicked\n     */\n    onCloseButtonClick: PropTypes.func,\n\n    /**\n     * By default, this value is \"alert\". You can also provide an alternate\n     * role if it makes sense from the accessibility-side\n     */\n    role: PropTypes.oneOf([ \"alert\", \"log\", \"status\" ]),\n\n    /**\n     * Provide a description for \"status\" icon that can be read by screen readers\n     */\n    statusIconDescription: PropTypes.string,\n\n    /**\n     * Specify an optional duration the notification should be closed in\n     */\n    timeout: PropTypes.number,\n\n    /**\n     * Additional Properties\n     */\n    properties: PropTypes.any\n};\n\nToast.defaultProps = {\n    kind: \"info\",\n    lowContrast: true,\n    role: \"alert\",\n    title: \"[Title Title]\",\n    subtitle: \"[Subtitle Content]\",\n    iconDescription: \"[Icon Descriptive Content]\",\n    statusIconDescription: \"[Status Icon Descriptive Content]\",\n    hideCloseButton: false,\n    closeOnEscape: true,\n    timeout: 1000,\n    properties: null\n};\n\nexport const Actionable = (props) => {\n    const {\n        kind,\n        lowContrast,\n        role,\n        title,\n        subtitle,\n        iconDescription,\n        statusIconDescription,\n        hideCloseButton,\n        closeOnEscape,\n        inline,\n        hasFocus,\n        actionButtonLabel,\n        onActionButtonClick,\n        ... properties\n    } = props;\n\n    console.debug(\"Properties (Actionable-Notification)\", Difference(props, properties));\n\n    console.debug(\"Attributes (Actionable-Notification)\", properties);\n\n    return (\n        <ActionableNotification\n            kind={ kind }\n            lowContrast={ lowContrast }\n            role={ role }\n            title={ title }\n            subtitle={ subtitle }\n            iconDescription={ iconDescription }\n            statusIconDescription={ statusIconDescription }\n            hideCloseButton={ hideCloseButton }\n            closeOnEscape={ closeOnEscape }\n            inline={ inline }\n            hasFocus={ hasFocus }\n            actionButtonLabel={ actionButtonLabel }\n            onActionButtonClick={ onActionButtonClick }\n\n            {\n                ... properties\n            }\n\n            data-properties={\n                String(JSON.stringify({\n                    Properties: JSON.stringify(Difference(props, properties), null, 4),\n                    Attributes: JSON.stringify(properties, null, 4)\n                }, null, 4).valueOf())\n            }\n        >\n            <strong>\n                { title }\n            </strong>\n            <Delimiter/>\n            { subtitle }\n        </ActionableNotification>\n    );\n};\n\nActionable.propTypes = {\n    /**\n     * Pass in the action button label that will be rendered within the ActionableNotification.\n     */\n    actionButtonLabel: PropTypes.string,\n\n    /**\n     * Specify the content\n     */\n    children: PropTypes.node,\n\n    /**\n     * Specify an optional className to be applied to the notification box\n     */\n    className: PropTypes.string,\n\n    /**\n     * Specify if pressing the escape key should close notifications\n     */\n    closeOnEscape: PropTypes.bool,\n\n    /**\n     * Specify if focus should be moved to the component when the notification contains actions\n     */\n    hasFocus: PropTypes.bool,\n\n    /**\n     * Specify the close button should be disabled, or not\n     */\n    hideCloseButton: PropTypes.bool,\n\n    /**\n     * Provide a description for \"close\" icon that can be read by screen readers\n     */\n    iconDescription: PropTypes.string,\n\n    /*\n     * Specify if the notification should have inline styling applied instead of toast\n     */\n    inline: PropTypes.bool,\n\n    /**\n     * Specify what state the notification represents\n     */\n    kind: PropTypes.oneOf([ \"error\", \"info\", \"info-square\", \"success\", \"warning\", \"warning-alt\" ]),\n\n    /**\n     * Specify whether you are using the low contrast variant of the ActionableNotification.\n     */\n    lowContrast: PropTypes.bool,\n\n    /**\n     * Provide a function that is called when the action is clicked\n     */\n    onActionButtonClick: PropTypes.func,\n\n    /**\n     * Provide a function that is called when menu is closed\n     */\n    onClose: PropTypes.func,\n\n    /**\n     * Provide a function that is called when the close button is clicked\n     */\n    onCloseButtonClick: PropTypes.func,\n\n    /**\n     * By default, this value is \"alertdialog\". You can also provide an alternate\n     * role if it makes sense from the accessibility-side.\n     */\n    role: PropTypes.string,\n\n    /**\n     * Provide a description for \"status\" icon that can be read by screen readers\n     */\n    statusIconDescription: PropTypes.string,\n\n    /**\n     * Additional Properties\n     */\n    properties: PropTypes.any\n};\n\nActionable.defaultProps = {\n    kind: \"info\",\n    lowContrast: true,\n    role: \"alert\",\n    title: \"[Title Title]\",\n    subtitle: \"[Subtitle Content]\",\n    iconDescription: \"[Icon Descriptive Content]\",\n    statusIconDescription: \"[Status Icon Descriptive Content]\",\n    hideCloseButton: false,\n    closeOnEscape: true,\n    inline: true,\n    hasFocus: true,\n    actionButtonLabel: \"[Button-Label]\",\n    onActionButtonClick: (event) => console.trace(\"[Trace]\", \"Actionable Button Click Event\", event)\n};\n","import PropTypes from \"prop-types\";\n\nimport React, { useState, useEffect } from \"react\";\n\nimport { CodeSnippet, CodeSnippetSkeleton } from \"@carbon/react\";\n\nimport { Inline } from \"./../../../components/Notifications/Authentication/Informational.js\";\n\nimport axios from \"axios\";\n\nimport \"./SCSS/Snippet.scss\";\nimport * as Styles from \"./SCSS/Snippet.module.scss\";\n\n/***\n * @param duration {Number} Total Skeleton Simulated Loading Time (Seconds)\n * @return {JSX.Element}\n * @constructor\n */\n\nconst Component = ({ duration }) => {\n    const url = process.env.REACT_APP_API_ENDPOINT + [ \"/v1/utility/awaitable?duration\", duration ].join(\"=\");\n\n    const [ data, setData ] = useState(false);\n    const [ loading, setLoading ] = useState(false);\n    const [ error, setError ] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setLoading(true);\n\n            try {\n                const $ = await axios(url);\n\n                setData($);\n\n                setError(false);\n\n            } catch ( error ) {\n                console.warn(error);\n                setError({\n                    column: error?.column,\n                    line: error?.line,\n                    message: error?.message,\n                    stack: error?.stack\n                });\n            }\n            finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData().finally(() => {\n            console.debug(\"[Debug] Loading Complete\");\n        });\n    }, [ url ]);\n\n    const Awaitable = () => (loading) && (<CodeSnippetSkeleton type={ \"multi\" }/>);\n\n    const Error = () => (error && !loading) && (\n        <div style={ { marginBottom: \"1.0rem\" } }>\n            <Inline\n                kind={ \"error\" }\n                lowContrast={ true }\n                role={ \"alert\" }\n                statusIconDescription={ \"Status-Icon\" }\n                iconDescription={ \"Close Error Message\" }\n                title={ \"Error\" }\n                subtitle={ error?.message }\n                hideCloseButton={ true }\n            />\n        </div>\n    );\n\n    const Data = () => (data && !loading) && (\n        <CodeSnippet\n            type={ \"multi\" }\n            className={ Styles.snippet }\n            children={\n                JSON.stringify(data, null, 4)\n            }\n            showMoreText={ \"Expand\" }\n            showLessText={ \"Collapse\" }\n            maxCollapsedNumberOfRows={ 15 }\n            wrapText={ false }\n        />\n    );\n\n    return (\n        <>\n            { (<Error/>) }\n            { (<Awaitable/>) }\n            { (<Data/>) }\n        </>\n    );\n};\n\nComponent.defaultProps = {\n    duration: 3\n};\n\nComponent.propTypes = {\n    /*** @type {Number} Total Skeleton Simulated Loading Time (Seconds) */\n    duration: PropTypes.number.isRequired\n};\n\nexport default Component;\n\nexport const Requestable = ({ url, headers }) => {\n    const [ data, setData ] = useState(false);\n    const [ loading, setLoading ] = useState(false);\n    const [ error, setError ] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setLoading(true);\n\n            try {\n                const $ = await axios(url, { headers });\n\n                setData($.data);\n                setError(false);\n\n            } catch ( error ) {\n                console.warn(error);\n                setError({\n                    column: error?.column,\n                    line: error?.line,\n                    message: error?.message,\n                    stack: error?.stack\n                });\n            }\n\n            finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData().finally(() => {\n            console.debug(\"[Debug] Loading Complete\");\n        });\n    }, [ url ]);\n\n    const Awaitable = () => (loading) && (<CodeSnippetSkeleton type={ \"multi\" }/>);\n\n    const Error = () => (error && !loading) && (\n        <Inline\n            kind={ \"error\" }\n            lowContrast={ true }\n            role={ \"alert\" }\n            statusIconDescription={ \"Status-Icon\" }\n            iconDescription={ \"Close Error Message\" }\n            title={ \"Error\" }\n            subtitle={ error?.message }\n            hideCloseButton={ true }\n        />\n    );\n\n    const Data = () => (data && !loading) && (\n        <CodeSnippet\n            type={ \"multi\" }\n            className={ Styles.snippet }\n            children={\n                JSON.stringify(data, null, 4)\n            }\n            showMoreText={ \"Expand\" }\n            showLessText={ \"Collapse\" } hideCopyButton={ true }\n            maxCollapsedNumberOfRows={ 15 }\n            wrapText={ false }\n        />\n    );\n\n    return (\n        <>\n            { (<Error/>) }\n            { (<Awaitable/>) }\n            { (<Data/>) }\n        </>\n    );\n};\n\nRequestable.propTypes = {\n    url: PropTypes.string\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cds--content\":\"Snippet_cds--content__Whbk1\",\"cds--inline-loading\":\"Snippet_cds--inline-loading__1nfoh\",\"cds--css-grid\":\"Snippet_cds--css-grid__2-Sw0\",\"c4p--notifications-panel__container\":\"Snippet_c4p--notifications-panel__container__2M6b9\",\"c4p--notifications-panel__notification-today\":\"Snippet_c4p--notifications-panel__notification-today__33e-4\",\"c4p--notifications-panel__notification-yesterday\":\"Snippet_c4p--notifications-panel__notification-yesterday__3kLJH\",\"c4p--notifications-panel__notification-previous\":\"Snippet_c4p--notifications-panel__notification-previous__2YJWx\",\"c4p--notifications-panel__settings-button\":\"Snippet_c4p--notifications-panel__settings-button__3ksxu\",\"cds--btn__icon\":\"Snippet_cds--btn__icon__2vYBd\",\"c4p--notifications-panel__time-section-label\":\"Snippet_c4p--notifications-panel__time-section-label__39EwI\",\"c4p--notifications-panel__notification\":\"Snippet_c4p--notifications-panel__notification__3GkoC\",\"c4p--notifications-panel__notifications-link\":\"Snippet_c4p--notifications-panel__notifications-link__1KbP3\",\"cds--parent-row\":\"Snippet_cds--parent-row__23_kc\",\"cds--data-table--selected\":\"Snippet_cds--data-table--selected__1348t\",\"cds--expandable-row\":\"Snippet_cds--expandable-row__2J-CC\",\"cds--data-table\":\"Snippet_cds--data-table__af0Xh\",\"cds--table-expand\":\"Snippet_cds--table-expand__1HHDy\",\"cds--table-column-checkbox\":\"Snippet_cds--table-column-checkbox__3bQ5D\",\"cds--snippet--single\":\"Snippet_cds--snippet--single__hBTYj\",\"cds--snippet-container\":\"Snippet_cds--snippet-container__3NJIB\",\"cds--data-table-container\":\"Snippet_cds--data-table-container__3sCBz\",\"cds--pagination\":\"Snippet_cds--pagination__3uKAQ\",\"cds--data-table-header\":\"Snippet_cds--data-table-header__3hR3U\",\"cds--child-row\":\"Snippet_cds--child-row__2HhVI\",\"cds--inline-notification\":\"Snippet_cds--inline-notification__1WEu4\",\"no-select\":\"Snippet_no-select__2zOYF\",\"unselectable\":\"Snippet_unselectable__1oIw9\",\"no-highlight\":\"Snippet_no-highlight__2RU1V\",\"select-all\":\"Snippet_select-all__ffD2m\",\"enable-select-all\":\"Snippet_enable-select-all__3yvDn\",\"snippet\":\"Snippet_snippet__1OfDS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activity\":\"Activity_activity__3d8nv\",\"paragraph\":\"Activity_paragraph__fUf35\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__3q0rN\",\"skeleton\":\"Paginator_skeleton__21YwX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"light\":\"Light_light__1o1WV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bold\":\"Bold_bold__37DOD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tag\":\"Tag_tag__1FpBA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"code\":\"Code_code__3nARK\"};","import { default as axios } from \"axios\";\n\nimport { useState, useEffect } from \"react\";\n\nimport { JWT } from \"./../../components/Authenticate.js\";\n\nconst Adapter = require(\"axios-cache-adapter\");\nconst Forage = require(\"localforage\");\n\nconst NAME = \"Nexus-UI\";\nconst DESCRIPTION = \"Cache Key-Value Table for VCS\";\nexport const STORE = \"Gitlab-Project-Pages\";\n\nconst Cancellation = axios.CancelToken.source();\n\nCancellation.Instantiate = () => axios.CancelToken.source();\n\nexport const Store = Forage.createInstance({\n    name: NAME,\n    storeName: STORE,\n    description: DESCRIPTION,\n    driver: Forage.INDEXEDDB\n});\n\nconst Cache = Adapter.setupCache({\n    excludeFromCache: false, // --> Debugging\n    debug: (\n        process.env.NODE_ENV !== \"production\"\n    ),\n    clearOnStale: true,\n    ignoreCache: true,\n    limit: false,\n    clearOnError: true,\n    readHeaders: true,\n    readOnError: true,\n    maxAge: 5 * 60 * 1000,\n    store: Store\n});\n\nconst API = axios.create({\n    adapter: Cache.adapter,\n    cache: Cache,\n    cancelToken: Cancellation.token\n});\n\nexport const Methods = [\n    \"get\", \"GET\",\n    \"delete\", \"DELETE\",\n    \"head\", \"HEAD\",\n    \"options\", \"OPTIONS\",\n    \"post\", \"POST\",\n    \"put\", \"PUT\",\n    \"patch\", \"PATCH\",\n    \"purge\", \"PURGE\",\n    \"link\", \"LINK\",\n    \"unlink\", \"UNLINK\"\n];\n\nexport class AIO {\n    static URL = String(process.env.REACT_APP_API_ENDPOINT) + \"/v1/gitlab/projects\";\n\n    static Request = () => {\n        const Query = () => {\n            const [ data, setData ] = useState({});\n            const [ loading, setLoading ] = useState(true);\n            const [ error, setError ] = useState(null);\n\n            useEffect(() => {\n                let ignore = false;\n\n                const fetch = async () => {\n                    setLoading(true);\n\n                    try {\n                        setError({});\n\n                        const Awaitable = { Value: null };\n\n                        await Store.getItem(STORE).then((Data) => {\n                            if ( Data ) {\n                                console.debug(\"[DEBUG]\", \"Cache Hit\");\n\n                                setData(Data);\n                                Awaitable[\"Value\"] = Data;\n                                ignore = true;\n                            } else {\n                                console.debug(\"[DEBUG]\", \"Cache Miss\");\n                            }\n                        }).catch((error) => console.debug(\n                            \"[DEBUG]\",\n                            \"Void Cache-Key Look-Up\",\n                            \"Warning\", error\n                        ));\n\n                        const Handler = async () => {\n                            if ( Awaitable.Value !== null ) {\n                                await Store.setItem(STORE, Awaitable.Value);\n                            }\n                        };\n\n                        await Handler().then(async () => {\n                            if ( ignore === false ) {\n                                const Token = await JWT();\n                                const response = API.get(AIO.URL, {\n                                    timeout: 30000,\n                                    headers: {\n                                        \"Authorization\": \"Bearer\" + \" \" + Token\n                                    }\n                                }).catch((error) => (\n                                    console.debug(\"[DEBUG]\", \"API-Request\", \"Projects\", \"Error\", error)\n                                )).finally(\n                                    () => {\n                                        console.debug(\"[DEBUG]\", \"Query Awaitable Complete\");\n                                    }\n                                );\n\n                                const Result = await response;\n\n                                const Collection = (\n                                    Result && Result.data\n                                ) ? Result.data : null;\n\n                                await Store.setItem(STORE, Collection);\n\n                                if ( !ignore ) setData(Collection);\n                            }\n                        });\n                    } catch ( error ) {\n                        console.debug(\"[DEBUG]\", error);\n                        await Store.clear();\n                        console.debug(\"[DEBUG]\", \"Cache\", \"Projects\", \"Cleared\");\n                        ignore = true;\n                    }\n\n                    finally { setLoading(false); }\n\n                };\n\n                return (\n                    ignore === false\n                ) ? fetch()\n                    : () => {\n                        ignore = true;\n                    };\n            }, []);\n\n            return { data, loading, error };\n        };\n\n        return Query();\n    };\n\n    static Clear = async () => {\n        await Store.clear();\n    };\n\n    static Awaitable = () => {\n        const { data, loading, error } = AIO.Request();\n\n        let total = 0;\n        if ( data !== null ) {\n            let iterator = 0;\n            for ( iterator; iterator < data.length; iterator++ ) {\n                total += data[iterator].length;\n            }\n        }\n\n        return {\n            Response: data,\n            Waiter: loading,\n            Error: error,\n            Total: total\n        };\n    };\n}\n\nexport default AIO;\n\nexport const State = AIO.Awaitable;\n","import React from \"react\";\n\nimport * as Styles from \"./SCSS/Paginator.module.scss\";\n\nimport {\n    Pagination,\n    PaginationSkeleton\n} from \"@carbon/react\";\n\nexport const Skeleton = () => {\n    return (\n        <PaginationSkeleton className={ [Styles.skeleton, \"cds--pagination--inline--skeleton\"].join(\" \") }/>\n    );\n};\n\nconst Component = ({Pages}) => {\n    return (\n        <Pagination\n            className={Styles.paginator}\n            backwardText=\"Previous\"\n            forwardText=\"Next\"\n            itemsPerPageText=\"Total Paged Items\"\n            pageNumberText=\"Page Number\"\n            pageSize={ Pages.Size }\n            /// pageSizes={ [5, 10, 15, 25, 50, 100, 1000] }\n            pageSizes={[20]}\n            totalItems={ Pages.Total }\n            page={ Pages.Index.Data }\n            onChange={ (Data) => Pages.Index.Setter(Data.page) }\n    />);\n};\n\nexport default Component;\n","import PropTypes from \"prop-types\";\n\nimport {\n    DataTableSkeleton,\n    TableContainer\n} from \"@carbon/react\";\n\nimport { Skeleton } from \"./Paginator\";\n\nconst Table = ({ Rows = 20, Headers = 3 }) => (\n    <TableContainer>\n        <DataTableSkeleton\n            compact={ false }\n            columnCount={ Headers }\n            rowCount={ Rows }\n            showHeader={ true }\n            showToolbar={ true }\n            zebra={ false }\n        />\n        <Skeleton/>\n    </TableContainer>\n);\n\nTable.propTypes = {\n    Rows: PropTypes.number,\n    Headers: PropTypes.number\n};\n\nexport default Table;\n","import { Requestable } from \"./../../pages/Development/Code-Snippet-Awaitable/Page\";\n\n/***\n *\n * @param id\n *\n * @returns {JSX.Element}\n *\n * @constructor\n *\n */\n\nexport const Variables = ({ id }) => {\n    const Token = process.env.REACT_APP_GITLAB_TOKEN;\n    const URL = [ process.env.REACT_APP_GITLAB_PROJECTS_URL, id, \"variables\" ].join(\"/\");\n\n    const Headers = {\n        \"PRIVATE-TOKEN\": Token\n    };\n\n    return (<Requestable headers={ Headers } url={ URL }/>);\n};","import ReactDOM from \"react-dom\";\n\nimport React, { useState } from \"react\";\n\nimport { Theme, Button, ComposedModal } from \"@carbon/react\";\nimport { Launch, Settings, Credentials, User, UserAccess, CloudServiceManagement } from \"@carbon/icons-react/next\";\n\nimport { Variables } from \"./Actions.js\";\n\nconst Environment = ({id}) => {\n    const [ open, setOpen ] = useState(false);\n\n    return (\n        <>\n            {\n                typeof document === \"undefined\"\n                    ? null\n                    : ReactDOM.createPortal(\n                        <ComposedModal open={ open } onClose={ () => setOpen(false) }>\n                            {\n                                (open === true) ? (<Variables id={id} state={open}/>) : null\n                            }\n                        </ComposedModal>, document.body\n                    )\n            }\n            {/*<Button hasIconOnly={ true } size=\"sm\" type=\"button\" kind={ \"secondary\" } onClick={ () => setOpen(true) } isExpressive={false} onMouseEnter={(event) => event.preventDefault()} onFocus={(event) => event.preventDefault()}>*/}\n            <Theme theme={\"white\"}>\n                <Button hasIconOnly={ true } size=\"sm\" type=\"button\" kind={ \"secondary\" } onClick={ () => setOpen(true) } children={(<CloudServiceManagement/>)} iconDescription={\"Environment Variables\"} tooltipAlignment=\"center\" tooltipPosition=\"top\"/>\n            </Theme>\n        </>\n    );\n}\n\nconst Modify = ({id}) => {\n    const [ open, setOpen ] = useState(false);\n\n    return (\n        <>\n            {\n                typeof document === \"undefined\"\n                    ? null\n                    : ReactDOM.createPortal(\n                        <ComposedModal open={ open } onClose={ () => setOpen(false) }>\n                            {\n                                (open === true) ? (<Variables id={id} state={open}/>) : null\n                            }\n                        </ComposedModal>, document.body\n                    )\n            }\n            {/*<Button hasIconOnly={ true } size=\"sm\" type=\"button\" kind={ \"secondary\" } onClick={ () => setOpen(true) } isExpressive={false} onMouseEnter={(event) => event.preventDefault()} onFocus={(event) => event.preventDefault()}>*/}\n            <Theme theme={\"white\"}>\n                <Button hasIconOnly={ true } size=\"sm\" type=\"button\" kind={ \"secondary\" } onClick={ () => setOpen(true) } children={(<Settings/>)} iconDescription={\"Edit Settings\"} tooltipAlignment=\"center\" tooltipPosition=\"top\"/>\n            </Theme>\n        </>\n    );\n}\n\nconst Trigger = ({id}) => {\n    const [ open, setOpen ] = useState(false);\n\n    return (\n        <>\n            {\n                typeof document === \"undefined\"\n                    ? null\n                    : ReactDOM.createPortal(\n                        <ComposedModal open={ open } onClose={ () => setOpen(false) }>\n                            {\n                                (open === true) ? (<Variables id={id} state={open}/>) : null\n                            }\n                        </ComposedModal>, document.body\n                    )\n            }\n            {/*<Button hasIconOnly={ true } size=\"sm\" type=\"button\" kind={ \"secondary\" } onClick={ () => setOpen(true) } isExpressive={false} onMouseEnter={(event) => event.preventDefault()} onFocus={(event) => event.preventDefault()}>*/}\n            <Theme theme={\"white\"}>\n                <Button hasIconOnly={ true } size=\"sm\" type=\"button\" kind={ \"secondary\" } onClick={ () => setOpen(true) } children={(<Launch/>)} iconDescription={\"Manage\"} tooltipAlignment=\"end\" tooltipPosition=\"top\"/>\n            </Theme>\n        </>\n    );\n}\n\nexport default {\n    Environment, Modify, Trigger\n}","import React, { Fragment, useMemo } from \"react\";\n\nimport {\n    Button,\n    CodeSnippet,\n    DataTable,\n    Link,\n    Table,\n    TableBatchAction,\n    TableBatchActions,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableExpandedRow,\n    TableExpandHeader,\n    TableExpandRow,\n    TableHead,\n    TableHeader,\n    TableRow,\n    TableSelectAll,\n    TableSelectRow,\n    TableToolbar,\n    TableToolbarContent\n    //    TableToolbarSearch\n} from \"@carbon/react\";\n\nimport { Data_132 as DICO } from \"@carbon/icons-react/lib/__generated__/bucket-7\";\nimport { ChartCombo32 as Metrics } from \"@carbon/icons-react/lib/__generated__/bucket-3\";\nimport { CrossTab32 as CSV } from \"@carbon/icons-react/lib/__generated__/bucket-6\";\nimport { Renew32 as Reload } from \"@carbon/icons-react/lib/__generated__/bucket-20\";\n\nimport \"./SCSS/Overflow.scss\";\n\nimport * as Light from \"./SCSS/Light.module.scss\";\nimport * as Bold from \"./SCSS/Bold.module.scss\";\nimport * as Activity from \"./SCSS/Activity.module.scss\";\nimport * as Tag from \"./SCSS/Tag.module.scss\";\nimport * as Code from \"./SCSS/Code.module.scss\";\n\nimport { Store, STORE } from \"./Query\";\n\nimport { default as Pagination } from \"./Paginator\";\n\nimport { Tag as Visibility } from \"carbon-components-react\";\n\n//import { OverflowMenuVertical, Launch } from \"@carbon/icons-react/next\";\n//\nimport { default as Modal } from \"./Modal.js\";\n\nconst URL = ({ url, home }) => {\n    return (\n        <ul style={ { width: \"max-content\" } }>\n            <li style={ { display: \"inline\" } }>\n                <Link href={ url } className={ \"io--underline-text\" }>\n                    <strong>\n                        Repository\n                    </strong>\n                </Link>\n            </li>\n            { home && (\n                <li style={ { display: \"inline\" } }>\n                    <span>\n                        {\n                            \" \" + \"|\" + \" \"\n                        }\n                    </span>\n                    <Link href={ home }>\n                        Gitlab\n                    </Link>\n                </li>\n            ) }\n        </ul>\n    );\n};\n\nfunction batchActionClick(event, rows = null) {\n    if ( event ) console.debug(\"Batch-Action-Click\", event.target.id);\n    if ( event.target.getAttribute(\"dataset-target-row\") !== null ) {\n        console.log(JSON.parse(event.target.getAttribute(\"dataset-target-data\")));\n    }\n}\n\nconst Refresh = async (setter) => {\n    await Store.removeItem(STORE, (error) => {\n        (\n            error\n        ) ? console.error(\n            \"[Error\", \"Unable to Clear Cache\", error\n        ) : console.debug(\n            \"[DEBUG]\", \"Successfully Removed Session Cache\"\n        );\n\n        setter(true);\n    });\n};\n\nconst Component = ({ Data, Headers, State }) => {\n    const Home = \"https://gitlab.cloud-technology.io/\";\n\n    const Projects = [];\n\n    const Total = (\n        Data\n    ) ? Data?.length : 0;\n\n    Data.forEach((Repository, Index) => React.useMemo(() => {\n        Projects[Index] = {\n            id: String(Index),\n            disabled: false,\n            isExpanded: false,\n            isSelected: false,\n            cells: Object.values({ Repository }),\n            UID: (Repository.id !== null) ? String(Repository.id) : 0,\n            Name: (Repository.name !== null) ? String(Repository.name) : \"N/A\",\n            Visibility: (Repository.visibility !== null) ? String(Repository.visibility).toUpperCase() : \"Internal\",\n            Activity: (Repository.last_activity_at !== null) ? String(Repository.last_activity_at) : \"N/A\",\n            URL: (Repository.web_url !== null) ? String(Repository.web_url) : \"N/A\",\n            Data: Repository\n        };\n    }, [ Data ]));\n\n    return (\n        <DataTable\n            rows={ Projects }\n            headers={ Headers }\n            isSortable={ false }\n            size={ \"normal\" }\n            stickyHeader={ false }\n            useStaticWidth={ false }\n            render={\n                ({\n                     rows,\n                     headers,\n                     getTableProps,\n                     getTableContainerProps,\n                     getSelectionProps,\n                     getExpandHeaderProps,\n                     getHeaderProps,\n                     getRowProps,\n                     getToolbarProps,\n                     getBatchActionProps\n                 }) => (\n                    <TableContainer title={ \"Cloud-Technology\" } description=\"Cloud-Technology's GitHub Repositories\" { ... getTableContainerProps() }>\n                        <TableToolbar { ... getToolbarProps() } className={ \"io-table-toolbar\" }>\n                            <TableBatchActions { ... getBatchActionProps() }>\n                                <TableBatchAction\n                                    id=\"Development-Table-JSON-Trigger-Button\"\n                                    renderIcon={ DICO }\n                                    onClick={ batchActionClick }\n                                >\n                                    JSON\n                                </TableBatchAction>\n                                <TableBatchAction\n                                    id=\"Development-Table-Metrics-Trigger-Button\"\n                                    renderIcon={ Metrics }\n                                    onClick={ batchActionClick }\n                                >\n                                    Metrics\n                                </TableBatchAction>\n                                <TableBatchAction\n                                    id=\"Development-Table-Download-Trigger-Button\"\n                                    renderIcon={ CSV }\n                                    onClick={ batchActionClick }\n                                >\n                                    Download\n                                </TableBatchAction>\n                            </TableBatchActions>\n                            <TableToolbarContent>\n                                {\n                                    // <TableToolbarSearch\n                                    //     persistent={ true }\n                                    //     defaultExpanded={ true }\n                                    //     searchContainerClass={ Search.search }\n                                    //     placeholder={ \" \" }\n                                    //     onExpand={\n                                    //         (event) => {\n                                    //             const Element = document.getElementsByClassName(Search.search).item(0);\n                                    //             const Input = document.getElementsByClassName(\"cds--search-input\").item(0);\n                                    //\n                                    //             (event.type === \"blur\")\n                                    //                 ? console.debug(\"[Debug]\", \"Search Collapse Event\")\n                                    //                 : console.debug(\"[Debug]\", \"Search Expand Event\");\n                                    //\n                                    //             if ( event.type === \"focus\" ) {\n                                    //                 Input.style.outline = \"0\";\n                                    //                 Input.style.paddingLeft = \"3.0rem\";\n                                    //                 Input.style.paddingRight = \"3.0rem\";\n                                    //\n                                    //                 Element.setAttribute(\"expanded\", \"true\");\n                                    //             } else {\n                                    //                 Input.style.outline = \"0\";\n                                    //                 Input.style.paddingLeft = \"0.0rem\";\n                                    //                 Input.style.paddingRight = \"0.0rem\";\n                                    //\n                                    //                 Element.removeAttribute(\"expanded\");\n                                    //             }\n                                    //         }\n                                    //     }\n                                    //     labelText={ \"Test-Label-Text\" }\n                                    //     expanded={ false }\n                                    //     tabIndex={ 0 }\n                                    // />\n                                }\n                                <Button\n                                    kind=\"ghost\"\n                                    size=\"default\"\n                                    hasIconOnly={ true }\n                                    onClick={ async () => await Refresh(State) }\n                                    renderIcon={ Reload }\n                                    tabIndex={ 0 }\n                                    iconDescription={ \"Reload Table & Clear Cache\" }\n                                    tooltipAlignment={ \"center\" }\n                                    tooltipPosition={ \"left\" }\n                                    type={ \"button\" }\n                                />\n                            </TableToolbarContent>\n                        </TableToolbar>\n                        <Table { ... getTableProps() }>\n                            <TableHead>\n                                <TableRow>\n                                    <TableExpandHeader enableToggle={ true } { ... getExpandHeaderProps() } />\n                                    <TableSelectAll { ... getSelectionProps() } />\n                                    {\n                                        Headers.map(\n                                            (Header) => (Header.value === \"Name\")\n                                                ? (\n                                                    <TableHeader { ... getHeaderProps({ header: Header }) } colSpan={ 1 }>\n                                                        { Header.value }\n                                                    </TableHeader>\n                                                ) : (\n                                                    <TableHeader { ... getHeaderProps({ header: Header }) } colSpan={ 1 }>\n                                                        { Header.value }\n                                                    </TableHeader>\n                                                )\n                                        )\n                                    }\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {\n                                    Projects.map(\n                                        (Row, Index) => {\n                                            Row = { ... Row, ... rows[Index] };\n\n                                            const Data = Row.Data;\n\n                                            const Snippet = () => {\n                                                return (\n                                                    <CodeSnippet\n                                                        type={ \"multi\" }\n                                                        wrapText={ false }\n                                                        copyButtonDescription={ \"Copy Repository Data to Clipboard\" }\n                                                        feedback={ \"Copied\" }\n                                                        maxCollapsedNumberOfRows={ 100 }\n                                                        className={ Code.code }\n                                                    >\n                                                        {\n                                                            JSON.stringify(Row.Data, null, 4)\n                                                        }\n                                                    </CodeSnippet>\n                                                );\n                                            };\n\n                                            return (\n                                                <Fragment key={ String(Index) }>\n                                                    <TableExpandRow\n                                                        expandIconDescription={ \"Select to Expand Repository's Description\" } { ... getRowProps({ row: Row }) }>\n                                                        <TableSelectRow { ... getSelectionProps({ row: Row }) } />\n                                                        <TableCell\n                                                            key={ String(Index) + \"-\" + \"ID\" + \"-\" + Row.UID }\n                                                            name={ String(Index) + \"-\" + \"ID\" + \"-\" + Row.UID }\n                                                        >\n                                                            <CodeSnippet\n                                                                type=\"single\"\n                                                                feedback={ \"Copied\" }\n                                                                copyButtonDescription={ \"Copy Code Snippet Content\" }\n                                                                hideCopyButton={ false }\n                                                                copyLabel={ \"Row-ID\" }\n                                                                className={ Light.light }\n                                                            >\n                                                                {\n                                                                    String(Row.UID)\n                                                                }\n                                                            </CodeSnippet>\n                                                        </TableCell>\n                                                        <TableCell\n                                                            key={ String(Index) + \"-\" + \"Name\" + \"-\" + Row.UID }\n                                                            name={ String(Index) + \"-\" + \"Name\" + \"-\" + Row.UID }\n                                                        >\n                                                            <CodeSnippet type={ \"single\" } feedback={ \"Saved to Clipboard\" } className={ Bold.bold }>\n                                                                { Row.Name }\n                                                            </CodeSnippet>\n                                                        </TableCell>\n                                                        <TableCell\n                                                            className={ Activity.activity } key={ String(Index) + \"-\" + \"Activity\" }\n                                                            name={ String(Index) + \"-\" + \"Activity\" }\n                                                        >\n                                                            <p className={ Activity.paragraph }>\n                                                                {\n                                                                    String(Row.Activity).slice(0, 10)\n                                                                }\n                                                            </p>\n                                                        </TableCell>\n                                                        <TableCell\n                                                            key={ String(Index) + \"-\" + \"Visibility\" + \"-\" + Row.UID }\n                                                            id={ String(Index) + \"-\" + \"Visibility\" + \"-\" + Row.UID }\n                                                        >\n                                                            {\n                                                                (Row.Visibility === \"PUBLIC\") ? (\n                                                                    <Visibility\n                                                                        id={ \"Visibility-Tag\" + \"-\" + String(Index) }\n                                                                        className={ Tag.tag }\n                                                                        type=\"green\"\n                                                                        title=\"Public-Visibility-Tag\"\n                                                                        children={ (\n                                                                            <strong>Public</strong>\n                                                                        ) }\n                                                                        onClick={ () => window.open(Row.URL) }\n                                                                    />\n                                                                ) : (\n                                                                    Row.Visibility === \"PRIVATE\"\n                                                                ) ? (\n                                                                    <Visibility\n                                                                        id={ \"Visibility-Tag\" + \"-\" + String(Index) }\n                                                                        className={ Tag.tag }\n                                                                        type=\"red\"\n                                                                        title=\"Private-Visibility-Tag\"\n                                                                        children={ (\n                                                                            <strong>Private</strong>\n                                                                        ) }\n                                                                        onClick={ () => window.open(Row.URL) }\n                                                                    />\n                                                                ) : (\n                                                                    <Visibility\n                                                                        id={ \"Visibility-Tag\" + \"-\" + String(Index) }\n                                                                        className={ Tag.tag }\n                                                                        type=\"purple\"\n                                                                        title=\"Internal-Visibility-Tag\"\n                                                                        children={ (\n                                                                            <strong>Internal</strong>\n                                                                        ) }\n                                                                        onClick={ () => window.open(Row.URL) }\n                                                                    />\n                                                                )\n                                                            }\n                                                        </TableCell>\n                                                        <TableCell\n                                                            id={ String(Index) + \"-\" + \"URL\" + \"-\" + Row.UID }\n                                                            key={ String(Index) + \"-\" + \"URL\" + \"-\" + Row.UID }\n                                                        >\n                                                            <URL url={ Row.URL } home={ Home } key={ \"VCS-URL-Link-Key\" + \"-\" + String(Index) }/>\n                                                        </TableCell>\n                                                        <TableCell\n                                                            id={ String(Index) + \"-\" + \"Overflow\" + \"-\" + Row.UID }\n                                                            key={ String(Index) + \"-\" + \"Overflow\" + \"-\" + Row.UID }\n                                                        >\n                                                            <div style={ {\n                                                                display: \"flex\",\n                                                                justifyContent: \"space-between\"\n                                                            } }>\n                                                                <Modal.Environment id={ Row.UID }/>\n                                                                <Modal.Modify id={ Row.UID }/>\n                                                                <Modal.Trigger id={ Row.UID }/>\n                                                            </div>\n                                                        </TableCell>\n                                                    </TableExpandRow>\n                                                    <TableExpandedRow colSpan={ headers.length + 2 }>\n                                                        <br/>\n                                                        <p>\n                                                            <strong>\n                                                                Description\n                                                            </strong> - { \" \" }\n                                                            {\n                                                                (Data[Index]?.description)\n                                                                    ? Data[Index].description\n                                                                    : \"N/A\"\n                                                            }\n                                                        </p>\n                                                        <hr style={ { marginBottom: \"1.25rem\" } }/>\n                                                        <Snippet/>\n                                                        <br/>\n                                                    </TableExpandedRow>\n                                                </Fragment>\n                                            );\n                                        })\n                                }\n                            </TableBody>\n                        </Table>\n                        {/*{*/ }\n                        {/*    (Data) ? (<Pagination Pages={ Pages }/>) : (<></>)*/ }\n                        {/*}*/ }\n                    </TableContainer>\n                ) }\n        />\n    );\n};\n\nexport default Component;\n\n//import React, { Fragment, useMemo } from \"react\";\n//\n//import {\n//    Button,\n//    CodeSnippet,\n//    DataTable,\n//    Link,\n//    Table,\n//    TableBatchAction,\n//    TableBatchActions,\n//    TableBody,\n//    TableCell,\n//    TableContainer,\n//    TableExpandedRow,\n//    TableExpandHeader,\n//    TableExpandRow,\n//    TableHead,\n//    TableHeader,\n//    TableRow,\n//    TableSelectAll,\n//    TableSelectRow,\n//    TableToolbar,\n//    TableToolbarContent\n//    //    TableToolbarSearch\n//} from \"@carbon/react\";\n//\n//import { Data_132 as DICO } from \"@carbon/icons-react/lib/__generated__/bucket-7\";\n//import { ChartCombo32 as Metrics } from \"@carbon/icons-react/lib/__generated__/bucket-3\";\n//import { CrossTab32 as CSV } from \"@carbon/icons-react/lib/__generated__/bucket-6\";\n//import { Renew32 as Reload } from \"@carbon/icons-react/lib/__generated__/bucket-20\";\n//\n//import \"./SCSS/Overflow.scss\";\n//\n//import * as Light from \"./SCSS/Light.module.scss\";\n//import * as Bold from \"./SCSS/Bold.module.scss\";\n//import * as Activity from \"./SCSS/Activity.module.scss\";\n//import * as Tag from \"./SCSS/Tag.module.scss\";\n//import * as Code from \"./SCSS/Code.module.scss\";\n//\n//import { Store, STORE } from \"./Query\";\n//\n//import { default as Pagination } from \"./Paginator\";\n//\n//import { Tag as Visibility } from \"carbon-components-react\";\n//\n////import { OverflowMenuVertical, Launch } from \"@carbon/icons-react/next\";\n////\n//import { default as Modal } from \"./Modal.js\";\n//\n//const URL = ({ url, home }) => {\n//    return (\n//        <ul style={ { width: \"max-content\" } }>\n//            <li style={ { display: \"inline\" } }>\n//                <Link href={ url } className={ \"io--underline-text\" }>\n//                    <strong>\n//                        Repository\n//                    </strong>\n//                </Link>\n//            </li>\n//            { home && (\n//                <li style={ { display: \"inline\" } }>\n//                    <span>\n//                        {\n//                            \" \" + \"|\" + \" \"\n//                        }\n//                    </span>\n//                    <Link href={ home }>\n//                        Gitlab\n//                    </Link>\n//                </li>\n//            ) }\n//        </ul>\n//    );\n//};\n//\n//function batchActionClick(event, rows = null) {\n//    if ( event ) console.debug(\"Batch-Action-Click\", event.target.id);\n//    if ( event.target.getAttribute(\"dataset-target-row\") !== null ) {\n//        console.log(JSON.parse(event.target.getAttribute(\"dataset-target-data\")));\n//    }\n//}\n//\n//async function Refresh(setter) {\n//    await Store.removeItem(STORE, (error) => {\n//        (\n//            error\n//        ) ? console.error(\n//            \"[Error\", \"Unable to Clear Cache\", error\n//        ) : console.debug(\n//            \"[DEBUG]\", \"Successfully Removed Session Cache\"\n//        );\n//\n//        setter(true);\n//    });\n//}\n//\n//const Compute = (Data, Projects) => Data.forEach((Repository, Index) => {\n//    useMemo(() => {\n//        Projects[Index] = {\n//            id: String(Index),\n//            disabled: false,\n//            isExpanded: false,\n//            isSelected: false,\n//            cells: Object.values({ Repository }),\n//            UID: (Repository.id !== null) ? String(Repository.id) : 0,\n//            Name: (Repository.name !== null) ? String(Repository.name) : \"N/A\",\n//            Visibility: (Repository.visibility !== null) ? String(Repository.visibility).toUpperCase() : \"Internal\",\n//            Activity: (Repository.last_activity_at !== null) ? String(Repository.last_activity_at) : \"N/A\",\n//            URL: (\n//                Repository.web_url !== null\n//            ) ? String(Repository.web_url) : \"N/A\",\n//            Data: Repository\n//        };\n//    }, []);\n//});\n//\n//const Component = ({ Data, Headers, State, Pages }) => {\n//    const Home = \"https://gitlab.cloud-technology.io/\";\n//\n//    const Total = (\n//        Data\n//    ) ? Data?.length : 0;\n//    const Projects = new Array(Total);\n//\n//    Data.forEach((Repository, Index) => {\n//        Projects[Index] = React.useMemo(() => {\n//            return {\n//                id: String(Index),\n//                disabled: false,\n//                isExpanded: false,\n//                isSelected: false,\n//                cells: Object.values({ Repository }),\n//                UID: (Repository.id !== null) ? String(Repository.id) : 0,\n//                Name: (Repository.name !== null) ? String(Repository.name) : \"N/A\",\n//                Visibility: (Repository.visibility !== null) ? String(Repository.visibility).toUpperCase() : \"Internal\",\n//                Activity: (Repository.last_activity_at !== null) ? String(Repository.last_activity_at) : \"N/A\",\n//                URL: (Repository.web_url !== null) ? String(Repository.web_url) : \"N/A\",\n//                Data: Repository\n//            };\n//        }, []);\n//    });\n//\n//    return (\n//        <DataTable\n//            rows={ Projects }\n//            headers={ Headers }\n//            isSortable={ false }\n//            size={ \"normal\" }\n//            stickyHeader={ false }\n//            useStaticWidth={ false }\n//            render={\n//                ({\n//                     rows,\n//                     headers,\n//                     getTableProps,\n//                     getTableContainerProps,\n//                     getSelectionProps,\n//                     getExpandHeaderProps,\n//                     getHeaderProps,\n//                     getRowProps,\n//                     getToolbarProps,\n//                     getBatchActionProps\n//                 }) => (\n//                    <TableContainer title={ \"Cloud-Technology\" } description=\"Cloud-Technology's GitHub Repositories\" { ... getTableContainerProps() }>\n//                        <TableToolbar { ... getToolbarProps() } className={ \"io-table-toolbar\" }>\n//                            <TableBatchActions { ... getBatchActionProps() }>\n//                                <TableBatchAction\n//                                    id=\"Development-Table-JSON-Trigger-Button\"\n//                                    renderIcon={ DICO }\n//                                    onClick={ batchActionClick }\n//                                >\n//                                    JSON\n//                                </TableBatchAction>\n//                                <TableBatchAction\n//                                    id=\"Development-Table-Metrics-Trigger-Button\"\n//                                    renderIcon={ Metrics }\n//                                    onClick={ batchActionClick }\n//                                >\n//                                    Metrics\n//                                </TableBatchAction>\n//                                <TableBatchAction\n//                                    id=\"Development-Table-Download-Trigger-Button\"\n//                                    renderIcon={ CSV }\n//                                    onClick={ batchActionClick }\n//                                >\n//                                    Download\n//                                </TableBatchAction>\n//                            </TableBatchActions>\n//                            <TableToolbarContent>\n//                                {\n//                                    // <TableToolbarSearch\n//                                    //     persistent={ true }\n//                                    //     defaultExpanded={ true }\n//                                    //     searchContainerClass={ Search.search }\n//                                    //     placeholder={ \" \" }\n//                                    //     onExpand={\n//                                    //         (event) => {\n//                                    //             const Element = document.getElementsByClassName(Search.search).item(0);\n//                                    //             const Input = document.getElementsByClassName(\"cds--search-input\").item(0);\n//                                    //\n//                                    //             (event.type === \"blur\")\n//                                    //                 ? console.debug(\"[Debug]\", \"Search Collapse Event\")\n//                                    //                 : console.debug(\"[Debug]\", \"Search Expand Event\");\n//                                    //\n//                                    //             if ( event.type === \"focus\" ) {\n//                                    //                 Input.style.outline = \"0\";\n//                                    //                 Input.style.paddingLeft = \"3.0rem\";\n//                                    //                 Input.style.paddingRight = \"3.0rem\";\n//                                    //\n//                                    //                 Element.setAttribute(\"expanded\", \"true\");\n//                                    //             } else {\n//                                    //                 Input.style.outline = \"0\";\n//                                    //                 Input.style.paddingLeft = \"0.0rem\";\n//                                    //                 Input.style.paddingRight = \"0.0rem\";\n//                                    //\n//                                    //                 Element.removeAttribute(\"expanded\");\n//                                    //             }\n//                                    //         }\n//                                    //     }\n//                                    //     labelText={ \"Test-Label-Text\" }\n//                                    //     expanded={ false }\n//                                    //     tabIndex={ 0 }\n//                                    // />\n//                                }\n//                                <Button\n//                                    kind=\"ghost\"\n//                                    size=\"default\"\n//                                    hasIconOnly={ true }\n//                                    onClick={ async () => await Refresh(State) }\n//                                    renderIcon={ Reload }\n//                                    tabIndex={ 0 }\n//                                    iconDescription={ \"Reload Table & Clear Cache\" }\n//                                    tooltipAlignment={ \"center\" }\n//                                    tooltipPosition={ \"left\" }\n//                                    type={ \"button\" }\n//                                />\n//                            </TableToolbarContent>\n//                        </TableToolbar>\n//                        <Table { ... getTableProps() }>\n//                            <TableHead>\n//                                <TableRow>\n//                                    <TableExpandHeader enableToggle={ true } { ... getExpandHeaderProps() } />\n//                                    <TableSelectAll { ... getSelectionProps() } />\n//                                    {\n//                                        Headers.map(\n//                                            (Header) => (Header.value === \"Name\")\n//                                                ? (\n//                                                    <TableHeader { ... getHeaderProps({ header: Header }) } colSpan={ 1 }>\n//                                                        { Header.value }\n//                                                    </TableHeader>\n//                                                ) : (\n//                                                    <TableHeader { ... getHeaderProps({ header: Header }) } colSpan={ 1 }>\n//                                                        { Header.value }\n//                                                    </TableHeader>\n//                                                )\n//                                        )\n//                                    }\n//                                </TableRow>\n//                            </TableHead>\n//                            <TableBody>\n//                                {\n//                                    Projects.map(\n//                                        (Row, Index) => {\n//                                            Row = { ... Row, ... rows[Index] };\n//\n//                                            const Data = Row.Data;\n//\n//                                            const Snippet = () => {\n//                                                return (\n//                                                    <CodeSnippet\n//                                                        type={ \"multi\" }\n//                                                        wrapText={ false }\n//                                                        copyButtonDescription={ \"Copy Repository Data to Clipboard\" }\n//                                                        feedback={ \"Copied\" }\n//                                                        maxCollapsedNumberOfRows={ 100 }\n//                                                        className={ Code.code }\n//                                                    >\n//                                                        {\n//                                                            JSON.stringify(Row.Data, null, 4)\n//                                                        }\n//                                                    </CodeSnippet>\n//                                                );\n//                                            };\n//\n//                                            return (\n//                                                <Fragment key={ String(Index) }>\n//                                                    <TableExpandRow\n//                                                        expandIconDescription={ \"Select to Expand Repository's Description\" } { ... getRowProps({ row: Row }) }>\n//                                                        <TableSelectRow { ... getSelectionProps({ row: Row }) } />\n//                                                        <TableCell\n//                                                            key={ String(Index) + \"-\" + \"ID\" + \"-\" + Row.UID }\n//                                                            name={ String(Index) + \"-\" + \"ID\" + \"-\" + Row.UID }\n//                                                        >\n//                                                            <CodeSnippet\n//                                                                type=\"single\"\n//                                                                feedback={ \"Copied\" }\n//                                                                copyButtonDescription={ \"Copy Code Snippet Content\" }\n//                                                                hideCopyButton={ false }\n//                                                                copyLabel={ \"Row-ID\" }\n//                                                                className={ Light.light }\n//                                                            >\n//                                                                {\n//                                                                    String(Row.UID)\n//                                                                }\n//                                                            </CodeSnippet>\n//                                                        </TableCell>\n//                                                        <TableCell\n//                                                            key={ String(Index) + \"-\" + \"Name\" + \"-\" + Row.UID }\n//                                                            name={ String(Index) + \"-\" + \"Name\" + \"-\" + Row.UID }\n//                                                        >\n//                                                            <CodeSnippet type={ \"single\" } feedback={ \"Saved to Clipboard\" } className={ Bold.bold }>\n//                                                                { Row.Name }\n//                                                            </CodeSnippet>\n//                                                        </TableCell>\n//                                                        <TableCell\n//                                                            className={ Activity.activity } key={ String(Index) + \"-\" + \"Activity\" }\n//                                                            name={ String(Index) + \"-\" + \"Activity\" }\n//                                                        >\n//                                                            <p className={ Activity.paragraph }>\n//                                                                {\n//                                                                    String(Row.Activity).slice(0, 10)\n//                                                                }\n//                                                            </p>\n//                                                        </TableCell>\n//                                                        <TableCell\n//                                                            key={ String(Index) + \"-\" + \"Visibility\" + \"-\" + Row.UID }\n//                                                            id={ String(Index) + \"-\" + \"Visibility\" + \"-\" + Row.UID }\n//                                                        >\n//                                                            {\n//                                                                (Row.Visibility === \"PUBLIC\") ? (\n//                                                                    <Visibility\n//                                                                        id={ \"Visibility-Tag\" + \"-\" + String(Index) }\n//                                                                        className={ Tag.tag }\n//                                                                        type=\"green\"\n//                                                                        title=\"Public-Visibility-Tag\"\n//                                                                        children={ (\n//                                                                            <strong>Public</strong>\n//                                                                        ) }\n//                                                                        onClick={ () => window.open(Row.URL) }\n//                                                                    />\n//                                                                ) : (\n//                                                                    Row.Visibility === \"PRIVATE\"\n//                                                                ) ? (\n//                                                                    <Visibility\n//                                                                        id={ \"Visibility-Tag\" + \"-\" + String(Index) }\n//                                                                        className={ Tag.tag }\n//                                                                        type=\"red\"\n//                                                                        title=\"Private-Visibility-Tag\"\n//                                                                        children={ (\n//                                                                            <strong>Private</strong>\n//                                                                        ) }\n//                                                                        onClick={ () => window.open(Row.URL) }\n//                                                                    />\n//                                                                ) : (\n//                                                                    <Visibility\n//                                                                        id={ \"Visibility-Tag\" + \"-\" + String(Index) }\n//                                                                        className={ Tag.tag }\n//                                                                        type=\"purple\"\n//                                                                        title=\"Internal-Visibility-Tag\"\n//                                                                        children={ (\n//                                                                            <strong>Internal</strong>\n//                                                                        ) }\n//                                                                        onClick={ () => window.open(Row.URL) }\n//                                                                    />\n//                                                                )\n//                                                            }\n//                                                        </TableCell>\n//                                                        <TableCell\n//                                                            id={ String(Index) + \"-\" + \"URL\" + \"-\" + Row.UID }\n//                                                            key={ String(Index) + \"-\" + \"URL\" + \"-\" + Row.UID }\n//                                                        >\n//                                                            <URL url={ Row.URL } home={ Home } key={ \"VCS-URL-Link-Key\" + \"-\" + String(Index) }/>\n//                                                        </TableCell>\n//                                                        <TableCell\n//                                                            id={ String(Index) + \"-\" + \"Overflow\" + \"-\" + Row.UID }\n//                                                            key={ String(Index) + \"-\" + \"Overflow\" + \"-\" + Row.UID }\n//                                                        >\n//                                                            <div style={ {\n//                                                                display: \"flex\",\n//                                                                justifyContent: \"space-between\"\n//                                                            } }>\n//                                                                <Modal.Environment id={ Row.UID }/>\n//                                                                <Modal.Modify id={ Row.UID }/>\n//                                                                <Modal.Trigger id={ Row.UID }/>\n//                                                            </div>\n//                                                        </TableCell>\n//                                                    </TableExpandRow>\n//                                                    <TableExpandedRow colSpan={ headers.length + 2 }>\n//                                                        <br/>\n//                                                        <p>\n//                                                            <strong>\n//                                                                Description\n//                                                            </strong> - { \" \" }\n//                                                            {\n//                                                                (Data[Index]?.description)\n//                                                                    ? Data[Index].description\n//                                                                    : \"N/A\"\n//                                                            }\n//                                                        </p>\n//                                                        <hr style={ { marginBottom: \"1.25rem\" } }/>\n//                                                        <Snippet/>\n//                                                        <br/>\n//                                                    </TableExpandedRow>\n//                                                </Fragment>\n//                                            );\n//                                        })\n//                                }\n//                            </TableBody>\n//                        </Table>\n//                        {\n//                            (Data) ? (<Pagination Pages={ Pages }/>) : (<></>)\n//                        }\n//                    </TableContainer>\n//                ) }\n//        />\n//    );\n//};\n//\n//export default Component;\n","import React, {\n    useState,\n    useEffect\n} from \"react\";\n\nimport * as Activity from \"./SCSS/Activity.module.scss\";\n\nimport { default as API } from \"./Query\";\n\nimport Skeleton from \"./Skeleton\";\n\nimport {\n    Tag as Visibility\n} from \"@carbon/react\";\n\nimport { default as Tabular } from \"./Table\";\n\nconst Component = () => {\n    const [ rows, setRows ] = useState(20);\n    const [ page, setPage ] = useState(1);\n    const [ awaiting, setAwaiting ] = useState(true);\n\n    useEffect(() => {\n        async function Await() {\n            const Waiter = new Promise((_) => setTimeout(\n                (_) => {\n                    console.debug(\"Updating Await := false\");\n                    setAwaiting(false);\n                }\n            ), 1500);\n\n            await Waiter;\n        }\n\n        Await().finally(() => {\n            /* ... */\n        });\n    }, []);\n\n    const Handler = API.Awaitable();\n\n    const Headers = React.useMemo(() => [\n        {\n            key: \"ID\",\n            header: \"ID\",\n            sortable: true,\n            value: \"ID\"\n        },\n        {\n            key: \"Name\",\n            header: \"Name\",\n            sortable: true,\n            value: \"Name\"\n        },\n        {\n            key: \"Activity\",\n            header: \"Activity\",\n            sortable: true,\n            value: \"Activity\"\n        },\n        {\n            key: \"Visibility\",\n            header: \"Visibility\",\n            sortable: true,\n            value: \"Visibility\"\n        },\n        {\n            key: \"URL\",\n            header: \"URL\",\n            sortable: false,\n            value: \"URL\"\n        },\n\n        {\n            key: \"Options\",\n            header: \"Options\",\n            sortable: false,\n            value: \"Options\"\n        }\n    ], []);\n\n    const Pages = {\n        Rows: {\n            Data: rows,\n            Setter: (value) => setRows(value)\n        },\n        Total: (\n            Handler.Total > rows\n        ) ? Handler.Total - rows : rows,\n        Index: {\n            Data: page,\n            Setter: (value) => setPage(value)\n        },\n        Size: rows,\n        Sizes: [ rows ]\n    };\n\n    const Awaitable = () => {\n        if ( awaiting === true ) return Component();\n\n        const Data = React.useMemo(() => Handler.Response[\"Data\"][\"Projects\"]) || [];\n\n        return (\n            <Tabular Headers={ Headers } Data={ Data } State={ setAwaiting } Pages={ Pages }/>\n        );\n    };\n\n    return (\n        Handler.Waiter === false\n    ) ? (\n        <Awaitable/>\n    ) : (\n        <Skeleton/>\n    );\n};\n\nexport default Component;\n//\n//import React, {\n//    useState,\n//    useEffect\n//} from \"react\";\n//\n//import * as Activity from \"./SCSS/Activity.module.scss\";\n//\n//import { default as API } from \"./Query\";\n//\n//import Skeleton from \"./Skeleton\";\n//\n//import {\n//    Tag as Visibility\n//} from \"@carbon/react\";\n//\n//import { default as Tabular } from \"./Table\";\n//\n//const Component = () => {\n//    const [ rows, setRows ] = useState(20);\n//    const [ page, setPage ] = useState(1);\n//    const [ awaiting, setAwaiting ] = useState(true);\n//\n//    useEffect(() => {\n//        async function Await() {\n//            const Waiter = new Promise((_) => setTimeout(\n//                (_) => {\n//                    console.debug(\"Updating Await := false\");\n//                    setAwaiting(false);\n//                }\n//            ), 1500);\n//\n//            await Waiter;\n//        }\n//\n//        Await().finally(() => {\n//            /* ... */\n//        });\n//    }, []);\n//\n//    const Handler = API.Awaitable();\n//\n//    const Headers = React.useMemo(() => [\n//        {\n//            key: \"ID\",\n//            header: \"ID\",\n//            sortable: true,\n//            value: \"ID\"\n//        },\n//        {\n//            key: \"Name\",\n//            header: \"Name\",\n//            sortable: true,\n//            value: \"Name\"\n//        },\n//        {\n//            key: \"Activity\",\n//            header: \"Activity\",\n//            sortable: true,\n//            value: \"Activity\"\n//        },\n//        {\n//            key: \"Visibility\",\n//            header: \"Visibility\",\n//            sortable: true,\n//            value: \"Visibility\"\n//        },\n//        {\n//            key: \"URL\",\n//            header: \"URL\",\n//            sortable: false,\n//            value: \"URL\"\n//        },\n//\n//        {\n//            key: \"Options\",\n//            header: \"Options\",\n//            sortable: false,\n//            value: \"Options\"\n//        }\n//    ], []);\n//\n//    const Pages = {\n//        Rows: {\n//            Data: rows,\n//            Setter: (value) => setRows(value)\n//        },\n//        Total: (\n//            Handler.Total > rows\n//        ) ? Handler.Total - rows : rows,\n//        Index: {\n//            Data: page,\n//            Setter: (value) => setPage(value)\n//        },\n//        Size: rows,\n//        Sizes: [ rows ]\n//    };\n//\n//    const Awaitable = () => {\n//        if ( awaiting === true ) return Component();\n//\n//        const Data = (\n//            Handler && Handler.Response && Handler.Response[page] !== null\n//        ) ? new Array(Handler.Response[page]) : new Array(0);\n//\n//        //        const Memoization = React.useMemo(() => Data[Data.length - 1], [ Data ]);\n//\n//        return (\n//            <Tabular Headers={ Headers } Data={ Data.pop() } State={ setAwaiting } Pages={ Pages }/>\n//        );\n//    };\n//\n//    return (\n//        Handler.Waiter === false\n//    ) ? (\n//        <Awaitable/>\n//    ) : (\n//        <Skeleton/>\n//    );\n//};\n//\n//export default Component;\n//\n"],"sourceRoot":""}