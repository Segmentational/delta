{"version":3,"sources":["components/Divider/Component.js","components/Divider/Index.js","components/Dashboard/Grid.js","components/Dashboard/Content.js","components/Dashboard/Header/Component.js","components/Dashboard/Header/Index.js","components/Dashboard/Container.js","components/Dashboard/Side-Navigation.js","components/Dashboard/Index.js","pages/Dashboard/Pages/Mobile-Components/Button-Manager.js","pages/Dashboard/Pages/Mobile-Components/Table-Skeleton.js","pages/Dashboard/Pages/Mobile-Components/Dynamic-Rows-Table.js","pages/Dashboard/Pages/Mobile-Components/Preview-Editor.js","pages/Dashboard/Pages/Mobile-Components/Frame.js","pages/Dashboard/Pages/Mobile.js"],"names":["Title","Content","Divider","Children","className","Component","Text","children","Filler","String","Bare","Icons","Dashboard","style","height","width","fill","Table","Mobile","Base","Route","endpoint","slice","useState","isRail","defaultExpanded","isFixedNav","isChildOfHeader","isPersistent","tabIndex","renderIcon","href","async","title","Container","Properties","ID","HelperText","LabelText","Placeholder","InvalidText","WarnText","isOpen","setIsOpen","rowAdd","rowModify","selectedRow","modifiable","setModifiable","isButtonInputValid","setIsButtonInputValid","isRedirectInputValid","setIsRedirectInputValid","InputValidation","SetState","document","getElementById","value","Schema","Styles","display","margin","marginBottom","fontSize","color","background","borderStyle","borderWidth","borderRadius","borderColor","Atlas","Key","Value","open","modalHeading","modalLabel","primaryButtonText","secondaryButtonText","onRequestClose","onRequestSubmit","console","debug","Name","Redirect","id","labelText","placeholder","invalidText","warnText","helperText","warn","onChange","event","Rows","Headers","compact","columnCount","rowCount","showHeader","showToolbar","zebra","Editor","Cryptography","require","key","header","PREVIEW_ID","state","modified","setModified","SelectedRow","setSelectedRow","rows","setRows","isManagerOpen","setIsManagerOpen","useEffect","JWT","then","Data","Token","get","process","headers","Authorization","Response","log","data","Save","Await","a","Promise","_","setTimeout","finally","Redirection","window","handleOnRowRemove","selectedRows","Targets","Array","forEach","element","Row","filter","e","push","iFrame","contentWindow","contentDocument","Button","getElementsByTagName","item","removeChild","Items","includes","Number","length","createElement","textContent","onclick","randomBytes","toString","join","dataset","row","Mapping","Map","Index","set","append","body","name","composition","array","index","Compose","post","isSortable","render","onInputChange","getExpandHeaderProps","getRowProps","getSelectionProps","getToolbarProps","getBatchActionProps","getTableContainerProps","getTableProps","description","shouldShowBatchActions","Delete","disabled","onClick","persistent","kind","size","Download","enableExpando","expandIconDescription","hidden","colSpan","map","Fragment","cells","tooltipAlignment","tooltipPosition","iconDescription","isExpressive","hasIconOnly","type","feedback","copyButtonDescription","copyLabel","JSON","stringify","previewID","url","response","content","iframe","write","close","Page","ready","Constants","URL","columns","Frame"],"mappings":"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","file":"static/js/9.ba35af87.chunk.js","sourcesContent":["const Title = ({ Content }) => (\n    (Content)\n        ? <h3>\n            {Content}\n        </h3>\n        : <></>\n);\n\nconst Divider = ({ Children }) => {\n    return (\n        <div className=\"io-divider-container\">\n            <div className=\"io-divider-border\"/>\n            <span className=\"io-divider-content\">\n                {Children}\n            </span>\n            <div className=\"io-divider-border\"/>\n        </div>\n    );\n};\n\nconst Component = ({ Text = null }) => {\n    return (\n        <Divider Children={(\n            <Title Content={Text}/>\n        )}/>\n    );\n};\n\nexport default Component;\n","import \"./SCSS/Index.scss\";\n\nimport { default as Component } from \"./Component\";\n\nexport default Component;\n","import \"./SCSS/Grid.scss\";\n\nimport { Grid } from \"@carbon/react\";\n\nconst Component = ({children}) => (\n    <Grid className={\"io-dashboard-grid\"}>\n        {\n            children\n        }\n    </Grid>\n);\n\nexport default Component;\n","import \"./SCSS/Content.scss\";\n\nimport { Content } from \"@carbon/react\";\n\nconst Component = ({children}) => (\n    <Content className={\"io-dashboard-control-primary-content\"}>\n        {\n            children\n        }\n    </Content>\n);\n\nexport default Component;\n","import { default as props } from \"prop-types\";\n\nconst Filler = () => (\n    <div className={ \"io-grid-column-filler\" }/>\n);\n\nimport { default as Divider } from \"./../../Divider/Index\";\nimport { default as Version } from \"./../../Version/Component\";\n\n/*****\n *\n * @param Title\n * @returns {JSX.Element}\n * @constructor\n */\n\nconst Component = (... { Title = \"[Title]\" }) => {\n    return (\n        <>\n            <div className={ \"io-global-page-header\" }>\n                <h1 aria-label={ \"IO-Dashboard-Global-Header\" }>\n                    {\n                        (Title)\n                            ? <span>\n                                {\n                                    String(\"Nexus\" + \" - \" + Title)\n                                }\n                        </span>\n                            : String(\"Nexus\")\n                    }\n                </h1>\n                <Filler/>\n                <Version/>\n            </div>\n            <Divider/>\n        </>\n    );\n};\n\nComponent.propTypes = {\n    Title: props.string\n};\n\nexport default Component;\n","import { default as Component } from \"./Component\";\n\nexport default Component;\n","/*****\n *\n * @param children\n * @returns {JSX.Element}\n * @constructor\n */\n\nconst Bare = ({children}) => (\n    <div className={\"io-dashboard-container\"}>\n        {\n            children\n        }\n    </div>\n);\n\n/*****\n *\n * @param children\n * @returns {JSX.Element}\n * @constructor\n */\n\nconst Component = ({children}) => (\n    <Bare>\n        {\n            children\n        }\n    </Bare>\n);\n\nexport default Component;\n","import \"./SCSS/Side-Navigation.scss\";\n\nimport {\n    SideNav, SideNavIcon,\n    SideNavItems,\n    SideNavLink,\n    SideNavMenu,\n    SideNavMenuItem\n} from \"@carbon/react\";\n\nimport {\n    Search20,\n    DataVis_120,\n    Debug20,\n    Switcher20,\n    Development20,\n    Home24 as Dashboard,\n    DataTable24 as Table,\n    MobileCheck24 as Mobile\n} from \"@carbon/icons-react\";\nimport { useState } from \"react\";\n\n/*****\n *\n * @param href\n * @returns {JSX.Element}\n * @constructor\n */\n\nconst Item = (href, s) => {\n    return (\n        <SideNavMenuItem href={ href }>\n            {\n                header\n            }\n        </SideNavMenuItem>\n    );\n};\n\n/*****\n *\n * @returns {{children}}\n * @constructor\n */\n\nconst Items = (items = [ Item(location.href, \"[Link]\") ]) => {\n    const Collection = {\n        Items: []\n    };\n\n    items.forEach((Item, index) => Collection.Items.push((<Item key={ index }/>)));\n\n    return Collection.Items;\n};\n\n/*****\n *\n * @param title\n * @param Items\n * @param items\n * @returns {*}\n * @constructor\n */\n\nconst Collapsable = ({ title = \"[Aria-Title]\" }, Items = Items) => {\n    return (\n        <SideNavMenu title={ title }>\n            <Items/>\n        </SideNavMenu>\n    );\n\n};\n\nconst Icons = {\n    Dashboard: () => (<Dashboard style={ { height: \"20px\", width: \"20px\", fill: \"rgba(185, 185, 185, 0.825)\" } }/>),\n    Table: () => (<Table style={ { height: \"20px\", width: \"20px\", fill: \"rgba(185, 185, 185, 0.825)\" } }/>),\n    Mobile: () => (<Mobile style={ { height: \"20px\", width: \"20px\", fill: \"rgba(185, 185, 185, 0.825)\" } }/>)\n};\n\nconst Base = \"/#/dashboard\";\n\n/*****\n *\n * @param endpoint {string}\n * @returns \"/#/dashboard/{endpoint}\" {string}\n * @constructor\n */\n\nconst Route = (endpoint) => (endpoint.slice(0, 1) === \"/\") ? Base + String(endpoint)\n    : Base + \"/\" + String(endpoint);\n\nconst Component = () => {\n    const [ rail, setRail ] = useState(true);\n\n    return (\n        <SideNav\n            isRail={ false }\n\n            defaultExpanded={ true }\n            isFixedNav={ true }\n            isChildOfHeader={ false }\n            isPersistent={ true }\n            aria-label=\"Side navigation\"\n            className={ \"io-dashboard-left-side-menu\" }\n            tabIndex={ 0 }\n        >\n            <SideNavItems>\n                <SideNavLink /// --> Dashboard Home Page\n                    renderIcon={ Icons.Dashboard }\n                    href={ Base }\n                    async={ true }\n                    children={ \"Home\" }\n                />\n                <SideNavLink /// --> Table Page\n                    renderIcon={ Icons.Mobile }\n                    href={ Route(\"mobile\") }\n                    async={ true }\n                    children={ \"Mobile\" }\n                />\n                <SideNavLink /// --> Table Page\n                    renderIcon={ Icons.Table }\n                    href={ Route(\"table\") }\n                    async={ true }\n                    children={ \"Table\" }\n                />\n                {/* <SideNavMenu title=\"Category One\">         */ }\n                {/*     <SideNavMenuItem href={location.href}> */ }\n                {/*         Link                               */ }\n                {/*     </SideNavMenuItem>                     */ }\n                {/*     <SideNavMenuItem href={location.href}> */ }\n                {/*         Link                               */ }\n                {/*     </SideNavMenuItem>                     */ }\n                {/*     <SideNavMenuItem href={location.href}> */ }\n                {/*         Link                               */ }\n                {/*     </SideNavMenuItem>                     */ }\n                {/* </SideNavMenu>                             */ }\n            </SideNavItems>\n        </SideNav>\n    );\n};\n\nexport default Component;\n","import {default as Grid} from \"./Grid\";\nimport {default as Content} from \"./Content\";\nimport {default as Header} from \"./Header/Index\";\nimport {default as Container} from \"./Container\";\nimport {default as Navigation} from \"./Side-Navigation\";\n\n/*****\n *\n * @param children\n * @param title\n * @returns {JSX.Element}\n * @constructor\n */\n\nconst Component = ({children}, ... {title = \"[IO-Dashboard-Title]\"}) => {\n    return (\n        <Container>\n            <Grid>\n                <Navigation/>\n                <Content>\n                    <Header Title={title}/>\n                    {\n                        children\n                    }\n                </Content>\n            </Grid>\n        </Container>\n    );\n};\n\nexport default Component;\n","import \"./SCSS/Button-Manager.scss\";\n\nimport {Modal, TextInput} from \"@carbon/react\";\nimport React, {useState} from \"react\";\n\n\nconst Properties = {\n    ButtonName: {\n        ID: \"Button-Name-ID\",\n        HelperText: null,\n        LabelText: \"Button name\",\n        Placeholder: \"url-service.com\",\n        InvalidText: \"Invalid button name\",\n        WarnText: \"Button name is invalid\"\n    },\n    Redirect: {\n        ID: \"Button-RedirectURL-ID\",\n        HelperText: null,\n        LabelText: \"Redirect URL\",\n        Placeholder: \"url-service.com\",\n        InvalidText: \"Invalid Redirect URL\",\n        WarnText: \"Redirect URL is invalid\"\n    }\n};\n\nconst Component = ({isOpen, setIsOpen, rowAdd, rowModify, selectedRow, modifiable, setModifiable}) => {\n    const [isButtonInputValid, setIsButtonInputValid] = useState(null);\n    const [isRedirectInputValid, setIsRedirectInputValid] = useState(null);\n\n    const InputValidation = (ID, SetState) => {\n        const Element = document.getElementById(ID);\n        const Value = Element.value;\n        SetState((Value !== \"\"));\n    };\n\n    const Schema = {\n        Styles: {\n            display: \"block\",\n            margin: \"auto\",\n            marginBottom: \"1.0rem\",\n            fontSize: \"16px\",\n            color: \"rgb(145, 145, 145)\",\n            background: \"white\",\n            borderStyle: \"solid\",\n            borderWidth: \"0.15rem\",\n            borderRadius: \"0.25rem\",\n            borderColor: \"rgb(145, 145, 145)\"\n        }\n    };\n\n    const Atlas = [\n        [Schema.Styles.display, \"display\",           {Key: \"display\", Value: Schema.Styles.display}],\n        [Schema.Styles.margin, \"margin\",             {Key: \"margin\", Value: Schema.Styles.margin}],\n        [Schema.Styles.marginBottom, \"marginBottom\", {Key: \"marginBottom\", Value: Schema.Styles.marginBottom}],\n        [Schema.Styles.fontSize, \"fontSize\",         {Key: \"fontSize\", Value: Schema.Styles.fontSize}],\n        [Schema.Styles.color, \"color\",               {Key: \"color\", Value: Schema.Styles.color}],\n        [Schema.Styles.background, \"background\",     {Key: \"background\", Value: Schema.Styles.background}],\n        [Schema.Styles.borderStyle, \"borderStyle\",   {Key: \"borderStyle\", Value: Schema.Styles.borderStyle}],\n        [Schema.Styles.borderWidth, \"borderWidth\",   {Key: \"borderWidth\", Value: Schema.Styles.borderWidth}],\n        [Schema.Styles.borderRadius, \"borderRadius\", {Key: \"borderRadius\", Value: Schema.Styles.borderRadius}],\n        [Schema.Styles.borderColor, \"borderColor\",   {Key: \"borderColor\", Value: Schema.Styles.borderColor}]\n    ];\n\n    return (\n        <Modal\n            className={\"button-editor-modal\"}\n            open = {isOpen}\n            modalHeading=\"Add a custom button\"\n            modalLabel=\"Button Editor\"\n            primaryButtonText=\"Save\"\n            secondaryButtonText=\"Cancel\"\n            onRequestClose={() => {\n                setModifiable(false);\n                setIsOpen(false);\n            }}\n            onRequestSubmit={() => {\n                if (modifiable) {\n                    console.debug(\"Button-Manager\", \"Request Submission\", \"Modifiable :=\", true);\n                    const Name = document.getElementById(\"Button-Name-ID\").value;\n                    const Redirect = document.getElementById(\"Button-RedirectURL-ID\").value;\n                    rowModify(selectedRow, Schema, Atlas, Name, Redirect);\n                    setModifiable(false);\n                    setIsOpen(false);\n                }\n                else{\n                    console.debug(\"Button-Manager\", \"Request Submission\", \"Modifiable :=\", false);\n                    if (isButtonInputValid && isRedirectInputValid){\n                        const Name = document.getElementById(\"Button-Name-ID\").value;\n                        const Redirect = document.getElementById(\"Button-RedirectURL-ID\").value;\n                        rowAdd(Schema, Atlas, Name, Redirect);\n                        setIsOpen(false);\n                    }\n                }\n        }}\n            >\n            <TextInput\n                data-modal-primary-focus={true}\n                id={Properties.ButtonName.ID}\n                labelText={Properties.ButtonName.LabelText}\n                placeholder={Properties.ButtonName.Placeholder}\n                invalidText={Properties.ButtonName.InvalidText}\n                warnText={Properties.ButtonName.WarnText}\n                helperText={Properties.ButtonName.HelperText}\n                warn={(isButtonInputValid === null) ? null : !isButtonInputValid}\n                onChange={(event) => {\n                    InputValidation(Properties.ButtonName.ID, setIsButtonInputValid);\n                }}\n            />\n            <TextInput\n                data-modal-primary-focus={true}\n                id={Properties.Redirect.ID}\n                labelText={Properties.Redirect.LabelText}\n                placeholder={Properties.Redirect.Placeholder}\n                invalidText={Properties.Redirect.InvalidText}\n                warnText={Properties.Redirect.WarnText}\n                helperText={Properties.Redirect.HelperText}\n                warn={(isRedirectInputValid === null) ? null : !isRedirectInputValid}\n                onChange={(event) => {\n                    InputValidation(Properties.Redirect.ID, setIsRedirectInputValid);\n                }}\n            />\n        </Modal>\n    );\n};\n\nexport default Component;\n","import \"./SCSS/Table-Skeleton.scss\";\n\nimport * as Types from \"prop-types\";\n\nimport {\n    DataTableSkeleton,\n    PaginationSkeleton,\n    TableContainer\n} from \"@carbon/react\";\n\n\nimport React from \"react\";\n\nconst Table = ({Rows = 20, Headers = 6}) => (\n    <TableContainer\n        className={\"io-table-editor-skeleton\"}>\n        <DataTableSkeleton\n            compact={false}\n            columnCount={Headers}\n            rowCount={Rows}\n            showHeader={true}\n            showToolbar={true}\n            zebra={false}\n        />\n    </TableContainer>\n);\n\nTable.propTypes = {\n    Rows: Types.number,\n    Headers: Types.number\n};\n\nexport default Table;\n","import \"./SCSS/Table.scss\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { default as ButtonManager } from \"./Button-Manager\";\n\nimport { Delete, Download, Edit } from \"@carbon/icons-react/next\";\n\nimport { default as Placeholder } from \"./Table-Skeleton\";\n\nimport {\n    Button,\n    CodeSnippet,\n    DataTable,\n    Table,\n    TableBatchAction,\n    TableBatchActions,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableExpandedRow,\n    TableExpandHeader,\n    TableExpandRow,\n    TableHead,\n    TableHeader,\n    TableRow,\n    TableSelectAll,\n    TableSelectRow,\n    TableToolbar,\n    TableToolbarContent,\n    TableToolbarSearch\n} from \"@carbon/react\";\n\nimport { JWT } from \"../../../../components/Authenticate.js\";\n\nconst Editor = () => {\n    return (\n        <Edit style={ { fill: \"white\" } }/>\n    );\n};\n\nconst Cryptography = require(\"crypto\");\n\nconst Headers = [\n    {\n        key: \"name\",\n        header: \"Label\"\n    },\n    {\n        key: \"value\",\n        header: \"URL\"\n    }\n];\n\nconst PREVIEW_ID = \"PREVIEW-ID\";\n\nconst Component = ({ state }) => {\n    const [ modified, setModified ] = useState(null);\n    const [ SelectedRow, setSelectedRow ] = useState(null);\n    const [ rows, setRows ] = useState(null);\n    const [ isManagerOpen, setIsManagerOpen ] = useState(false);\n\n    useEffect(() => {\n        JWT().then((Data) => {\n            console.debug(\"JWT Token\", Data);\n            const Token = Data.JWT;\n\n            require(\"axios\").get(process.env.REACT_APP_API_ENDPOINT + \"/Mongo/URLs/Interfaces\", {\n                headers: {\n                    Authorization: \"Bearer\" + \" \" + Token,\n                    \"Access-Control-Allow-Origin\": \"*\"\n                }\n            }).then((Response) => {\n                console.log(\"Response (HTML)\", Response.data[\"Content\"]);\n\n                // ... Update iFrame if Drift(s)\n\n                setRows(Response.data[\"Content\"]);\n            });\n        });\n    }, []);\n\n    const Save = () => {\n        const Await = async () => await new Promise((_) => setTimeout((_) => console.debug(\"Waiter Complete\"), 3000));\n\n        console.debug(\"Saving ...\");\n        Await().finally(() => {\n            //...\n        });\n    };\n\n    // Modify ...\n    // Delete ...\n    const Update = (body) => {\n        JWT().then((Data) => {\n            console.debug(\"JWT Token\", Data);\n\n            const Token = Data.JWT;\n\n            require(\"axios\").post(process.env.REACT_APP_API_ENDPOINT + \"/Mongo/URLs/Interfaces/Update\", {\n                Content: body\n            }, {\n                headers: {\n                    Authorization: \"Bearer\" + \" \" + Token\n                }\n            }).then((Response) => {\n                console.log(\"Request\", {\n                    \"Content\": body\n                });\n                console.log(\"Response (HTML)\", Response.data[\"Content\"]);\n\n                // ... Update iFrame\n\n                setRows(Response.data[\"Content\"]);\n            });\n        });\n    };\n\n    const UID = () => Cryptography.randomBytes(256 / 8).toString(\"hex\");\n\n    const Compose = (array, element) => {\n        const index = array.length;\n        return [ ... array.slice(0, index), element, ... array.slice(index) ];\n    };\n\n    function Redirection(Redirect) {\n        window.open(Redirect, \"_blank\");\n    }\n\n    const handleOnRowModified = (SelectedRow, Schema, Atlas, Name, Redirect) => {\n        const ID = SelectedRow.id;\n        const iFrame = document.getElementById(PREVIEW_ID);\n        const Content = iFrame.contentWindow || (iFrame.contentDocument.document || iFrame.contentDocument);\n        const Button = Content.document.getElementById(ID);\n\n        Button.textContent = Name;\n        Button.onclick = () => Redirection(Redirect);\n\n        const Mapping = new Map();\n\n        Atlas.forEach((Key, Index, _) => {\n            Mapping.set(Key[0], Key[1]);\n        });\n\n        Mapping.forEach((Key, Value) => {\n            Button.style[Key] = Value;\n        });\n\n        const row = {\n            id: Button.id,\n            key: [ \"Key\", String(ID) ].join(\"-\"),\n            name: Name,\n            value: {\n                Name,\n                Redirect,\n                Button: Button,\n                Mapping: Schema,\n                Atlas: Atlas\n            }\n        };\n\n        const Items = rows.filter((item) => item.id !== row.id);\n\n        Items.push(row);\n\n        console.debug(\"Rows (Modified)\", Items);\n\n        // ... Create Modify (Different Function of basically `Update`) Handler where inside that callable `setRows` is applied.\n\n        setRows(Items);\n    };\n\n    const handleOnRowAdd = (Schema, Atlas, Name, Redirect) => {\n        const ID = Number(rows.length);\n        const iFrame = document.getElementById(PREVIEW_ID);\n        const Content = (iFrame) ? iFrame?.contentWindow || (iFrame?.contentDocument.document || iFrame?.contentDocument) : null;\n        const Button = document.createElement(\"button\");\n\n        Button.className = \"io-ghost\";\n        Button.textContent = Name;\n        Button.onclick = () => Redirection(Redirect);\n        Button.id = [ \"Button\", \"ID\", String(ID), UID() ].join(\"-\");\n        Button.dataset.row = String(ID);\n\n        const Mapping = new Map();\n\n        Atlas.forEach((Key, Index, _) => {\n            Mapping.set(Key[0], Key[1]);\n        });\n\n        Mapping.forEach((Key, Value) => {\n            Button.style[Key] = Value;\n        });\n\n        Content?.document.getElementsByTagName(\"div\").item(0)\n            .append(Button);\n\n        const row = {\n            id: Button.id,\n            key: [ \"Key\", String(ID) ].join(\"-\"),\n            name: Name,\n            value: {\n                Name,\n                Redirect,\n                Button: Button,\n                Mapping: Schema,\n                Atlas: Atlas\n            }\n        };\n\n        const composition = Compose(rows, row);\n\n        console.debug(\"Rows (Added)\", composition);\n\n        console.debug(\"Mutating ...\");\n\n        Update(composition);\n    };\n\n    const handleOnRowRemove = (selectedRows) => {\n        const Targets = {\n            Array: []\n        };\n\n        selectedRows.forEach((element) => {\n            const Row = rows.filter((e) => e.id === element.id);\n\n            Targets.Array.push(Row[0]);\n\n            const ID = Row[0].id;\n\n            const iFrame = document.getElementById(PREVIEW_ID);\n\n            const Content = iFrame.contentWindow || (iFrame.contentDocument.document || iFrame.contentDocument);\n\n            const Button = Content.document.getElementById(ID);\n\n            Content.document.getElementsByTagName(\"div\")\n                .item(0).removeChild(Button);\n        });\n\n        const Items = rows.filter((item) => !Targets.Array.includes(item));\n\n        console.debug(\"Modified Rows (Deleted)\", Items);\n\n        // ... Create Delete (Different Function of basically `Update`) Handler where inside that callable `setRows` is applied.\n\n        setRows(Items);\n    };\n\n    return (\n        <>\n            <ButtonManager\n                isOpen={ isManagerOpen }\n                setIsOpen={ setIsManagerOpen }\n                rowAdd={ handleOnRowAdd }\n                rowModify={ handleOnRowModified }\n                modifiable={ modified }\n                setModifiable={ setModified }\n                selectedRow={ SelectedRow }\n            />\n            {\n                (rows !== [] && rows !== null) ? (\n                    <DataTable\n                        rows={ rows }\n                        headers={ Headers }\n                        isSortable={ true }\n                        render={ ({\n                                      rows,\n                                      headers,\n                                      onInputChange,\n                                      selectedRows,\n                                      getExpandHeaderProps,\n                                      getRowProps,\n                                      getSelectionProps,\n                                      getToolbarProps,\n                                      getBatchActionProps,\n                                      getTableContainerProps,\n                                      getTableProps\n                                  }) => (\n                            <TableContainer\n                                className={ \"io-data-table\" }\n                                title=\"Button Template Editor\"\n                                description=\"Use this button editor to manage your page.\"\n                                { ... getTableContainerProps() }>\n                                <TableToolbar { ... getToolbarProps() }>\n                                    <TableBatchActions { ... getBatchActionProps() }>\n                                        <TableBatchAction\n                                            tabIndex={ getBatchActionProps().shouldShowBatchActions ? 0 : -1 }\n                                            renderIcon={ Delete }\n                                            children={ \"Delete\" }\n                                            disabled={ (rows.length <= 0) }\n                                            onClick={ () => handleOnRowRemove(selectedRows) }\n                                        />\n                                    </TableBatchActions>\n                                    <TableToolbarContent>\n                                        <TableToolbarSearch\n                                            persistent={ false }\n                                            labelText={ \"Table-Search-Filter\" }\n                                            placeholder={ \"Search\" }\n                                            disabled={ false }\n                                            tabIndex={ getBatchActionProps().shouldShowBatchActions ? -1 : 0 }\n                                            onChange={ onInputChange }\n                                        />\n                                        <Button\n                                            kind=\"primary\"\n                                            size=\"field\"\n                                            onClick={ () => {\n                                                setIsManagerOpen(true);\n                                            } } renderIcon={ Download }\n                                            disabled={ !state[0] }\n                                            children={ \"Add Button\" }\n                                        />\n                                        <Button\n                                            kind=\"danger\"\n                                            size=\"field\"\n                                            onClick={ Save } renderIcon={ Download }\n                                            disabled={ !state[0] }\n                                            children={ \"Save\" }\n                                        />\n                                    </TableToolbarContent>\n                                </TableToolbar>\n                                <Table { ... getTableProps() }>\n                                    <TableHead>\n                                        <TableRow>\n                                            <TableExpandHeader\n                                                enableExpando={ true } { ... getExpandHeaderProps() }\n                                                expandIconDescription={ (rows.length === 0 || !rows) ? \"Disabled: Row Data Unavailable\" : \"Select to Expand Row Data\" }\n                                                hidden={ (rows.length === 0 || !rows) }\n                                                colSpan={ 1 }\n                                            />\n                                            <TableSelectAll { ... getSelectionProps() }\n                                                            disabled={ (rows.length === 0 || !rows) }\n                                            />\n                                            <TableHeader colSpan={ 1 }>\n                                                { Headers[0].header }\n                                            </TableHeader>\n                                            <TableHeader colSpan={ 1 }>\n                                                { Headers[1].header }\n                                            </TableHeader>\n                                            <TableHeader\n                                                key={ \"Table-Action-Row-Header\" } id={ \"Table-Row-Header\" }\n                                                style={ { width: \"50px\" } }\n                                            />\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody data-total={ rows.length }>\n                                        { rows.map((row, index) => (\n                                            <React.Fragment key={ row.id }>\n                                                <TableExpandRow\n                                                    expandIconDescription={ \"Select to Expand\" } { ... getRowProps({ row }) }>\n                                                    <TableSelectRow { ... getSelectionProps({ row }) }/>\n                                                    <TableCell\n                                                        key={ String(row.id) + \"Key-Name\" }\n                                                        id={ String(index) + \"-\" + \"Label\" + \"-\" + row.id }\n                                                        colSpan={ 1 }\n                                                    >\n                                                        { row.cells[0].value }\n                                                    </TableCell>\n                                                    <TableCell\n                                                        key={ String(row.id) + \"Key-Name-Redirect\" }\n                                                        id={ String(index) + \"-\" + \"URL\" + \"-\" + row.id }\n                                                        colSpan={ 1 }\n                                                    >\n                                                        { row.cells[1].value.Redirect }\n                                                    </TableCell>\n                                                    <TableCell\n                                                        key={ \"Table-Row-Action\" + \"-\" + String(index) }\n                                                        id={ \"Table-Row-Action\" }\n                                                    >\n                                                        {\n                                                            (\n                                                                <>\n                                                                    <Button\n                                                                        className={ \"io-inline-table-column-button-item io-hidden-assistive-text\" }\n                                                                        size={ \"sm\" }\n                                                                        tooltipAlignment={ \"center\" }\n                                                                        renderIcon={ () => (<Editor/>) }\n                                                                        tooltipPosition={ \"right\" }\n                                                                        iconDescription={ \"...\" }\n                                                                        tabIndex={ 0 }\n                                                                        isExpressive={ false }\n                                                                        kind={ \"secondary\" }\n                                                                        hasIconOnly={ true }\n                                                                        onClick={ () => {\n                                                                            if ( rows !== null ) {\n                                                                                console.debug(\"Editor Open\", \"Field Pre-Population :=\", true);\n                                                                            } else {\n                                                                                console.debug(\"Editor Open\", \"Field Pre-Population\", false);\n                                                                            }\n\n                                                                            setSelectedRow(rows[index]);\n                                                                            setModified(true);\n                                                                            setIsManagerOpen(true);\n                                                                        } }\n                                                                    />\n                                                                </>\n                                                            )\n                                                        }\n                                                    </TableCell>\n                                                </TableExpandRow>\n                                                <TableExpandedRow\n                                                    id={ \"Expanded-Row-ID\" + \"-\" + String(index) }\n                                                    colSpan={ headers.length + 3 }\n                                                >\n                                                    <CodeSnippet\n                                                        type={ \"single\" }\n                                                        className={ \"io-code-snippet-fluid-height\" }\n                                                        feedback={ \"Copied\" }\n                                                        copyButtonDescription={ \"Copy JSON Data\" }\n                                                        copyLabel={ \"Row-ID\" }\n                                                        style={ {\n                                                            background: \"rgba(11, 11, 15, 0.875)\",\n                                                            color: \"white\",\n                                                            borderRadius: \"0.75rem\"\n                                                        } }\n                                                        children={ String(JSON.stringify(row, null, 4)) }\n                                                    />\n                                                </TableExpandedRow>\n                                            </React.Fragment>\n                                        )) }\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                        ) }\n                    />\n                ) : (\n                    (<Placeholder Headers={ 4 } Rows={ 5 } className={ \"io-dashboard-control-primary-content\" }/>)\n                )\n            }\n        </>\n    );\n};\n\nexport default Component;\n","import {default as Rows} from \"./Dynamic-Rows-Table\";\n\nconst Component = ({children, state}) => {\n    return (\n        <Rows state={state}>\n            {\n                children\n            }\n        </Rows>\n    );\n};\n\nexport default Component;\n","import {useEffect} from \"react\";\n\nconst Content = ({ID, state}) => {\n    return (\n        <iframe id={ID} data-state={String(state[0])}/>\n    )\n};\n\n/*****\n *\n * @param previewID {string}\n * @param url {string}\n * @param state\n * @returns {JSX.Element}\n * @constructor\n *\n */\n\nconst Component = ({previewID, url, state}) => {\n    console.debug(\"Page Load Event\", \"I-Frame Component\");\n\n    useEffect(() => {\n        require(\"axios\").get(url).then((response) => {\n            let content;\n\n            const iframe = document.getElementById(previewID);\n\n            content = iframe.contentWindow || (iframe.contentDocument.document || iframe.contentDocument);\n\n            require(\"axios\").get(url).then((data) => {\n                content.document.open();\n                content.document.write(data.data);\n                content.document.close();\n            });\n\n            state[1](true);\n        });\n    }, []);\n\n\n    return (\n        <Content ID={previewID} state={state}/>\n    )\n};\n\nexport default Component;\n","import \"./../SCSS/Index.scss\";\nimport \"./../SCSS/Mobile.scss\";\n\nimport { useState } from \"react\";\n\nimport { Grid, Row, Column } from \"@carbon/react\";\n\nimport { default as Editor } from \"./Mobile-Components/Preview-Editor\";\nimport { default as Frame } from \"./Mobile-Components/Frame\";\n\nimport { default as Shell } from \"./../../../components/Dashboard/Index\";\n\nconst Container = ({ children }) => {\n    return (\n        <section className={ \"io-nexus-mobile-device-container\" }>\n            {\n                children\n            }\n        </section>\n    );\n};\n\nconst Component = ({ children }) => {\n    return (\n        <div className=\"nexus-device iphone-x\">\n            <div className=\"notch\">\n                <div className=\"camera\"/>\n                <div className=\"speaker\"/>\n            </div>\n            <div className=\"top-bar\"/>\n            <div className=\"sleep\"/>\n            <div className=\"bottom-bar\"/>\n            <div className=\"volume\"/>\n            <div className=\"overflow\">\n                <div className=\"shadow shadow--tr\"/>\n                <div className=\"shadow shadow--tl\"/>\n                <div className=\"shadow shadow--br\"/>\n                <div className=\"shadow shadow--bl\"/>\n            </div>\n            <div className=\"inner-shadow\"/>\n            <div className=\"screen\">\n                <section className=\"iphone-x inner-screen-grid\">\n                    {\n                        // (<Loading active={!state[0]} small={true}/>)\n                    }\n                    {/*  ...  */ }\n                    {\n                        children\n                    }\n                    {/*  ...  */ }\n                </section>\n            </div>\n        </div>\n    );\n};\n\nconst Page = () => {\n    const ready = useState(false);\n\n    const Constants = {\n        ID: \"PREVIEW-ID\",\n        URL: process.env.REACT_APP_API_ENDPOINT + \"/API/AWS/S3/Get-Bucket-Content?Bucket=blog.redirecthosting.com&Object=index.html\"\n    };\n\n    return (\n        <Shell>\n            <Grid columns={ 2 }>\n                <Row style={ { \"justifyContent\": \"space-evenly\" } }>\n                    <Column>\n                        <Editor state={ ready }/>\n                    </Column>\n                    <Column style={ { width: \"35%\" } }>\n                        <Container>\n                            <Component state={ ready }>\n                                <Frame previewID={ Constants.ID } url={ Constants.URL } state={ ready }/>\n                            </Component>\n                        </Container>\n                    </Column>\n                </Row>\n            </Grid>\n        </Shell>\n    );\n};\n\nexport default Page;\n"],"sourceRoot":""}