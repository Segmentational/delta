{"version":3,"sources":["pages/GitHub/SCSS/Table.module.scss","pages/GitHub/SCSS/Paginator.module.scss","pages/GitHub/Table.js","pages/GitHub/Paginator.js","pages/GitHub/Skeleton.js","pages/GitHub/Page.js"],"names":["module","exports","Tabular","rows","headers","render","getHeaderProps","getRowProps","getTableProps","getExpandHeaderProps","getSelectionProps","title","description","className","Styles","enableToggle","map","header","row","Fragment","cells","cell","value","id","colSpan","length","Skeleton","join","Component","Data","currentPageSize","setCurrentPageSize","setFirstRowIndex","backwardText","forwardText","itemsPerPageText","pageSize","pageNumberText","pageSizes","totalItems","onChange","page","Table","Rows","Headers","compact","columnCount","rowCount","showHeader","showToolbar","zebra","key","Linker","organization","url","style","display","href","Page","useState","firstRowIndex","useMemo","repositories","i","String","name","stargazers","issues","createdAt","Date","getDate","updatedAt","homepageUrl","generateData","awaiting","setAwaiting","useEffect","a","console","debug","Waiter","Promise","resolve","reject","setTimeout","_","then","Await","finally","stars","issueCount","toLocaleDateString","links","getRowItems","slice"],"mappings":"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","file":"static/js/21.cf335ecd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"repo-page-github-data-table-container\":\"Table_repo-page-github-data-table-container__avOk1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__a1V29\",\"skeleton\":\"Paginator_skeleton__2Cve4\"};","import React from \"react\";\n\nimport * as Styles from \"./SCSS/Table.module.scss\";\n\nimport {\n    DataTable,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableExpandHeader,\n    TableHeader,\n    TableBody,\n    TableExpandRow,\n    TableCell,\n    TableExpandedRow,\n    TableSelectAll,\n    TableSelectRow\n} from \"@carbon/react\";\n\nconst Tabular = ({ rows, headers }) => {\n    const getRowDescription = () => {\n        return \"[Repository Description Placeholder]\";\n    };\n\n    /// const getRowDescription = rowId => {\n    ///     const row = rows.find(({ id }) => id === rowId);\n    ///     return row ? (row.description) : \"[Repository Description Placeholder]\";\n    /// };\n\n    return (\n        <DataTable\n            rows={ rows }\n            headers={ headers }\n            render={ ({\n                          rows,\n                          headers,\n                          getHeaderProps,\n                          getRowProps,\n                          getTableProps,\n                          getExpandHeaderProps,\n                          getSelectionProps\n                      }) => (\n                <TableContainer\n                    title=\"[Title]\"\n                    description=\"[Description]\"\n                    className={ Styles.repoPageGithubDataTableContainer }\n                >\n                    <Table { ... getTableProps() }>\n                        <TableHead>\n                            <TableRow>\n                                <TableExpandHeader enableToggle={ true } { ... getExpandHeaderProps() } />\n                                <TableSelectAll { ... getSelectionProps() } />\n                                <TableExpandHeader { ... getExpandHeaderProps() } />\n                                {\n                                    headers.map(\n                                        (header) => (\n                                            <TableHeader { ... getHeaderProps({ header }) }>\n                                                {\n                                                    header.header\n                                                }\n                                            </TableHeader>\n                                        )\n                                    )\n                                }\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {\n                                rows.map((row) => (\n                                    <React.Fragment key={ row.id }>\n                                        <TableExpandRow { ... getRowProps({ row }) }>\n                                            <TableSelectRow { ... getSelectionProps({ row }) } />\n                                            <TableCell key={ \"expand\" }>{ \"\" }</TableCell>\n                                            {\n                                                row.cells.map((cell) => (\n                                                    <TableCell key={ cell.id }>\n                                                        {\n                                                            cell.value\n                                                        }\n                                                    </TableCell>\n                                                ))\n                                            }\n                                        </TableExpandRow>\n                                        <TableExpandedRow colSpan={ headers.length + 3 }>\n                                            <p>{ getRowDescription(row.id) }</p>\n                                        </TableExpandedRow>\n\n                                    </React.Fragment>\n                                ))\n                            }\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            ) }\n        />\n    );\n};\n\nexport default Tabular;\n","import React from \"react\";\n\nimport * as Styles from \"./SCSS/Paginator.module.scss\";\n\nimport {\n    Pagination,\n    PaginationSkeleton\n} from \"@carbon/react\";\n\nexport const Skeleton = () => {\n    return (\n        <PaginationSkeleton className={[Styles.skeleton, \"cds--pagination--inline--skeleton\"].join(\" \")}/>\n    );\n};\n\n// const Component = ({Pages}) => {\n//     return (\n//         <Pagination\n//             className={Styles.paginator}\n//             backwardText=\"Previous\"\n//             forwardText=\"Next\"\n//             itemsPerPageText=\"Total Paged Items\"\n//             pageNumberText=\"Page Number\"\n//             pageSize={Pages.Size}\n//             /// pageSizes={ [5, 10, 15, 25, 50, 100, 1000] }\n//             pageSizes={[20]}\n//             totalItems={Pages.Total}\n//             page={Pages.Index.Data}\n//             onChange={(Data) => Pages.Index.Setter(Data.page)}\n//         />);\n// };\n\nconst Component = ({Data, currentPageSize, setCurrentPageSize, setFirstRowIndex}) => {\n    return (\n        <Pagination\n            className={Styles.paginator}\n            backwardText={\"Previous\"}\n            forwardText={\"Next\"}\n            itemsPerPageText={\"Total Paged Item(s)\"}\n            pageSize={currentPageSize}\n            pageNumberText={\"Page Number\"}\n            pageSizes={[5, 10, 15, 25, 50, 100, 1000]}\n            totalItems={Data.length}\n            onChange={({page, pageSize}) => {\n                if (pageSize !== currentPageSize) {\n                    setCurrentPageSize(pageSize);\n                }\n                setFirstRowIndex(pageSize * (page - 1));\n            }}\n        />\n    )\n};\n\nexport default Component;\n","import PropTypes from \"prop-types\";\n\nimport {\n    DataTableSkeleton,\n    TableContainer\n} from \"@carbon/react\";\n\nimport { Skeleton } from \"./Paginator\";\n\nconst Table = ({Rows = 20, Headers = 4}) => (\n    <TableContainer>\n        <DataTableSkeleton\n            compact={false}\n            columnCount={Headers}\n            rowCount={Rows}\n            showHeader={true}\n            showToolbar={false}\n            zebra={false}\n        />\n        <Skeleton/>\n    </TableContainer>\n);\n\nTable.propTypes = {\n    Rows: PropTypes.number,\n    Headers: PropTypes.number\n};\n\nexport default Table;\n","import React, { useState, useMemo, useEffect } from \"react\";\n\nimport { default as Table } from \"./Table\";\n\nimport {\n    Link\n} from \"@carbon/react\";\n\nimport { default as Pagination } from \"./Paginator\";\n\nimport { default as Skeleton } from \"./Skeleton\";\n\nconst headers = [\n    {\n        key: \"name\",\n        header: \"Name\"\n    },\n    {\n        key: \"createdAt\",\n        header: \"Created\"\n    },\n    {\n        key: \"updatedAt\",\n        header: \"Updated\"\n    },\n    {\n        key: \"issueCount\",\n        header: \"Open Issues\"\n    },\n    {\n        key: \"stars\",\n        header: \"Stars\"\n    },\n    {\n        key: \"links\",\n        header: \"Links\"\n    }\n];\n\nconst Linker = ({ organization, url }) => (\n    <ul style={ { display: \"flex\" } }>\n        { organization && (\n            <li>\n                <Link href={ organization }>Home</Link>\n            </li>\n        ) }\n        { url && (\n            <li>\n                <span>&nbsp;|&nbsp;</span>\n                <Link href={ url }>URL</Link>\n            </li>\n        ) }\n    </ul>\n);\n\nconst generateData = () => {\n    const repositories = [];\n\n    for (let i = 0; i < 50; i++) {\n        repositories[i] = {\n            id: String(i),\n            name: \"Test\",\n            stargazers: [\n                null,\n                null,\n                null\n            ],\n            issues: [\n                null\n            ],\n            createdAt: new Date().getDate(),\n            updatedAt: new Date().getDate(),\n            url: \"https://localhost\",\n            homepageUrl: \"https://github.com/cloud-hybrid\"\n        };\n    }\n\n    return repositories;\n}\n\n\n/*****\n *\n * @param rows\n *\n * @returns Array[{*, key, stars, issueCount, createdAt, updatedAt, links}]\n *\n */\nconst getRowItems = (rows) => {\n    return rows.map(\n        (row) => ({\n            ...row,\n            key: row.id,\n            stars: row.stargazers.length,\n            issueCount: row.issues.length,\n            createdAt: new Date(row.createdAt).toLocaleDateString(),\n            updatedAt: new Date(row.updatedAt).toLocaleDateString(),\n            links: <Linker organization={ \"https://github.com/cloud-hybrid\" } url={ \"https://github.com/cloud-hybrid\" } />\n        })\n    );\n};\n\nconst Page = () => {\n    const [firstRowIndex, setFirstRowIndex] = useState(0);\n    const [currentPageSize, setCurrentPageSize] = useState(10);\n\n    const Data = useMemo(() => generateData(), []);\n\n    const [awaiting, setAwaiting] = useState(true);\n\n    useEffect(() => {\n        async function Await() {\n            console.debug(\"[Debug]\", \"Instantiating Waiter ...\");\n\n            const Waiter = new Promise((resolve, reject) => setTimeout(\n                (_) => {\n                    setAwaiting(false);\n                    \n                    if (awaiting === false ) resolve(awaiting)\n                },\n                1500\n            ));\n\n            await Waiter.then(() => {\n                console.debug(\"[Debug]\", \"Waiter has Successfully Resolved\");\n\n                setAwaiting(null);\n            });\n        }\n\n        Await().finally();\n    }, []);\n\n    if (awaiting === true) return (<Skeleton/>)\n    else {\n        const rows = getRowItems(Data);\n        return (\n            <>\n                <Table\n                    headers={ headers }\n                    rows={ rows.slice(firstRowIndex, firstRowIndex + currentPageSize) }\n                />\n                <Pagination Data={Data} currentPageSize={currentPageSize} setCurrentPageSize={setCurrentPageSize} setFirstRowIndex={setFirstRowIndex}/>\n            </>\n        );\n    }\n}\n\nexport default Page;\n"],"sourceRoot":""}