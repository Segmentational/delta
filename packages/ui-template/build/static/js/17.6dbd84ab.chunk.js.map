{"version":3,"sources":["pages/Module.js","utilities/Difference.js","components/Notifications/Authentication/Informational.js","pages/Development/Code-Snippet-Awaitable/Page.js","pages/Development/Code-Snippet-Awaitable/SCSS/Snippet.module.scss","pages/Development/Code-Snippet-Awaitable/SCSS/Index.module.scss","pages/Development/Code-Snippet-Awaitable/index.js"],"names":["Component","Page","timeout","description","Properties","lg","md","sm","defaultProps","Utility","source","target","Object","keys","reduce","difference","key","Delimiter","Inline","props","kind","lowContrast","role","title","subtitle","iconDescription","statusIconDescription","hideCloseButton","closeOnEscape","onClose","children","onCloseButtonClick","properties","console","debug","Difference","url","process","duration","join","useState","data","setData","loading","setLoading","error","setError","useEffect","fetchData","a","axios","$","warn","column","line","message","stack","finally","Awaitable","type","Error","style","marginBottom","Data","className","Styles","JSON","stringify","showMoreText","showLessText","maxCollapsedNumberOfRows","wrapText","Requestable","headers","hideCopyButton","module","exports","component"],"mappings":"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","file":"static/js/17.6dbd84ab.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nimport {\n    Grid, Column\n} from \"@carbon/react\";\n\nimport { default as Loader } from \"./../components/Loader\";\n\nconst Component = ({ Page, timeout, description, ... Properties }) => {\n    return (\n        <Loader description={ description } timeout={ timeout }>\n            <Grid { ... Properties }>\n                <Column lg={ 16 } md={ 8 } sm={ 4 }>\n                    <Page/>\n                </Column>\n            </Grid>\n        </Loader>\n    );\n};\n\nComponent.defaultProps = {\n    timeout: 1250\n};\n\nComponent.propTypes = {\n    Page: PropTypes.func.isRequired,\n\n    /**\n     * Forced Delay during Transition (Units in ms)\n     */\n\n    timeout: PropTypes.number.isRequired,\n\n    /***\n     * Loading Screen Context\n     */\n\n    description: PropTypes.string.isRequired\n};\n\nexport default Component;","const Utility = (source, target) => Object.keys(source).reduce((difference, key) => {\n    if ( target[key] === source[key] ) return difference;\n    return {\n        ... difference,\n        [key]: source[key]\n    };\n}, {});\n\nexport default Utility;\n","import PropTypes from \"prop-types\";\n\nimport { InlineNotification, ToastNotification, ActionableNotification } from \"@carbon/react\";\n\nimport { default as Difference } from \"./../../../utilities/Difference.js\";\n\nconst Delimiter = () => (\n    <>\n        {\n            \" \"\n        }\n    </>\n);\n\nexport const Inline = (props) => {\n    const {\n        kind,\n        lowContrast,\n        role,\n        title,\n        subtitle,\n        iconDescription,\n        statusIconDescription,\n        hideCloseButton,\n        closeOnEscape,\n        onClose,\n        onCloseButtonClick,\n        children,\n        ... properties\n    } = props;\n\n    console.debug(\"Properties (Inline-Notification)\", Difference(props, properties));\n\n    console.debug(\"Attributes (Inline-Notification)\", properties);\n\n    return (\n        <InlineNotification\n            kind={ kind }\n            lowContrast={ lowContrast }\n            role={ role }\n            title={ title }\n            subtitle={ subtitle }\n            iconDescription={ iconDescription }\n            statusIconDescription={ statusIconDescription }\n            hideCloseButton={ hideCloseButton }\n            closeOnEscape={ closeOnEscape }\n            children={ children }\n            onClose={ onClose }\n\n            {\n                ... properties\n            }\n\n            /// data-properties={\n            ///     String(JSON.stringify({\n            ///         Properties: JSON.stringify(Difference(props, properties), null, 4),\n            ///         Attributes: JSON.stringify(properties, null, 4)\n            ///     }, null, 4).valueOf())\n            /// }\n        >\n            <span>\n                <strong>\n                    { title }\n                </strong>\n                {\n                    \" - \"\n                }\n                <Delimiter/>\n                { subtitle }\n            </span>\n            <br/>\n        </InlineNotification>\n    );\n};\n\nInline.defaultProps = {\n    kind: \"info\",\n    lowContrast: true,\n    role: \"alert\",\n    title: \"[Title Title]\",\n    subtitle: \"[Subtitle Content]\",\n    iconDescription: \"[Icon Descriptive Content]\",\n    statusIconDescription: \"[Status Icon Descriptive Content]\",\n    hideCloseButton: false,\n    closeOnEscape: true,\n    children: null,\n    properties: null\n};\n\nInline.propTypes = {\n    title: PropTypes.string,\n    subtitle: PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]),\n\n    /**\n     * Specify the content\n     */\n    children: PropTypes.node,\n\n    /**\n     * Specify an optional className to be applied to the notification box\n     */\n    className: PropTypes.string,\n\n    /**\n     * Specify if pressing the escape key should close notifications\n     */\n    closeOnEscape: PropTypes.bool,\n\n    /**\n     * Specify the close button should be disabled, or not\n     */\n    hideCloseButton: PropTypes.bool,\n\n    /**\n     * Provide a description for \"close\" icon that can be read by screen readers\n     */\n    iconDescription: PropTypes.string,\n\n    /**\n     * Specify what state the notification represents\n     */\n    kind: PropTypes.oneOf([ \"error\", \"info\", \"info-square\", \"success\", \"warning\", \"warning-alt\" ]),\n\n    /**\n     * Specify whether you are using the low contrast variant of the ToastNotification.\n     */\n    lowContrast: PropTypes.bool,\n\n    /**\n     * Provide a function that is called when menu is closed\n     */\n    onClose: PropTypes.func,\n\n    /**\n     * Provide a function that is called when the close button is clicked\n     */\n    onCloseButtonClick: PropTypes.func,\n\n    /**\n     * By default, this value is \"alert\". You can also provide an alternate\n     * role if it makes sense from the accessibility-side\n     */\n    role: PropTypes.oneOf([ \"alert\", \"log\", \"status\" ]),\n\n    /**\n     * Provide a description for \"status\" icon that can be read by screen readers\n     */\n    statusIconDescription: PropTypes.string,\n\n    /**\n     * Additional Properties\n     */\n    properties: PropTypes.any\n};\n\nexport const Toast = (props) => {\n    const {\n        kind,\n        lowContrast,\n        role,\n        title,\n        subtitle,\n        iconDescription,\n        statusIconDescription,\n        hideCloseButton,\n        closeOnEscape,\n        timeout,\n\n        ... properties\n    } = props;\n\n    console.debug(\"Properties (Toast-Notification)\", Difference(props, properties));\n\n    console.debug(\"Attributes (Toast-Notification)\", properties);\n\n    return (\n        <ToastNotification\n            kind={ kind }\n            lowContrast={ lowContrast }\n            role={ role }\n            title={ title }\n            subtitle={ subtitle }\n            iconDescription={ iconDescription }\n            statusIconDescription={ statusIconDescription }\n            hideCloseButton={ hideCloseButton }\n            closeOnEscape={ closeOnEscape }\n            timeout={ timeout }\n\n            {\n                ... properties\n            }\n\n            data-properties={\n                String(JSON.stringify({\n                    Properties: JSON.stringify(Difference(props, properties), null, 4),\n                    Attributes: JSON.stringify(properties, null, 4)\n                }, null, 4).valueOf())\n            }\n        >\n            <strong>\n                { title }\n            </strong>\n            <Delimiter/>\n            { subtitle }\n        </ToastNotification>\n    );\n};\n\nToast.propTypes = {\n    /**\n     * Specify the content\n     */\n    children: PropTypes.node,\n\n    /**\n     * Specify an optional className to be applied to the notification box\n     */\n    className: PropTypes.string,\n\n    /**\n     * Specify if pressing the escape key should close notifications\n     */\n    closeOnEscape: PropTypes.bool,\n\n    /**\n     * Specify the close button should be disabled, or not\n     */\n    hideCloseButton: PropTypes.bool,\n\n    /**\n     * Provide a description for \"close\" icon that can be read by screen readers\n     */\n    iconDescription: PropTypes.string,\n\n    /**\n     * Specify what state the notification represents\n     */\n    kind: PropTypes.oneOf([ \"error\", \"info\", \"info-square\", \"success\", \"warning\", \"warning-alt\" ]),\n\n    /**\n     * Specify whether you are using the low contrast variant of the ToastNotification.\n     */\n    lowContrast: PropTypes.bool,\n\n    /**\n     * Provide a function that is called when menu is closed\n     */\n    onClose: PropTypes.func,\n\n    /**\n     * Provide a function that is called when the close button is clicked\n     */\n    onCloseButtonClick: PropTypes.func,\n\n    /**\n     * By default, this value is \"alert\". You can also provide an alternate\n     * role if it makes sense from the accessibility-side\n     */\n    role: PropTypes.oneOf([ \"alert\", \"log\", \"status\" ]),\n\n    /**\n     * Provide a description for \"status\" icon that can be read by screen readers\n     */\n    statusIconDescription: PropTypes.string,\n\n    /**\n     * Specify an optional duration the notification should be closed in\n     */\n    timeout: PropTypes.number,\n\n    /**\n     * Additional Properties\n     */\n    properties: PropTypes.any\n};\n\nToast.defaultProps = {\n    kind: \"info\",\n    lowContrast: true,\n    role: \"alert\",\n    title: \"[Title Title]\",\n    subtitle: \"[Subtitle Content]\",\n    iconDescription: \"[Icon Descriptive Content]\",\n    statusIconDescription: \"[Status Icon Descriptive Content]\",\n    hideCloseButton: false,\n    closeOnEscape: true,\n    timeout: 1000,\n    properties: null\n};\n\nexport const Actionable = (props) => {\n    const {\n        kind,\n        lowContrast,\n        role,\n        title,\n        subtitle,\n        iconDescription,\n        statusIconDescription,\n        hideCloseButton,\n        closeOnEscape,\n        inline,\n        hasFocus,\n        actionButtonLabel,\n        onActionButtonClick,\n        ... properties\n    } = props;\n\n    console.debug(\"Properties (Actionable-Notification)\", Difference(props, properties));\n\n    console.debug(\"Attributes (Actionable-Notification)\", properties);\n\n    return (\n        <ActionableNotification\n            kind={ kind }\n            lowContrast={ lowContrast }\n            role={ role }\n            title={ title }\n            subtitle={ subtitle }\n            iconDescription={ iconDescription }\n            statusIconDescription={ statusIconDescription }\n            hideCloseButton={ hideCloseButton }\n            closeOnEscape={ closeOnEscape }\n            inline={ inline }\n            hasFocus={ hasFocus }\n            actionButtonLabel={ actionButtonLabel }\n            onActionButtonClick={ onActionButtonClick }\n\n            {\n                ... properties\n            }\n\n            data-properties={\n                String(JSON.stringify({\n                    Properties: JSON.stringify(Difference(props, properties), null, 4),\n                    Attributes: JSON.stringify(properties, null, 4)\n                }, null, 4).valueOf())\n            }\n        >\n            <strong>\n                { title }\n            </strong>\n            <Delimiter/>\n            { subtitle }\n        </ActionableNotification>\n    );\n};\n\nActionable.propTypes = {\n    /**\n     * Pass in the action button label that will be rendered within the ActionableNotification.\n     */\n    actionButtonLabel: PropTypes.string,\n\n    /**\n     * Specify the content\n     */\n    children: PropTypes.node,\n\n    /**\n     * Specify an optional className to be applied to the notification box\n     */\n    className: PropTypes.string,\n\n    /**\n     * Specify if pressing the escape key should close notifications\n     */\n    closeOnEscape: PropTypes.bool,\n\n    /**\n     * Specify if focus should be moved to the component when the notification contains actions\n     */\n    hasFocus: PropTypes.bool,\n\n    /**\n     * Specify the close button should be disabled, or not\n     */\n    hideCloseButton: PropTypes.bool,\n\n    /**\n     * Provide a description for \"close\" icon that can be read by screen readers\n     */\n    iconDescription: PropTypes.string,\n\n    /*\n     * Specify if the notification should have inline styling applied instead of toast\n     */\n    inline: PropTypes.bool,\n\n    /**\n     * Specify what state the notification represents\n     */\n    kind: PropTypes.oneOf([ \"error\", \"info\", \"info-square\", \"success\", \"warning\", \"warning-alt\" ]),\n\n    /**\n     * Specify whether you are using the low contrast variant of the ActionableNotification.\n     */\n    lowContrast: PropTypes.bool,\n\n    /**\n     * Provide a function that is called when the action is clicked\n     */\n    onActionButtonClick: PropTypes.func,\n\n    /**\n     * Provide a function that is called when menu is closed\n     */\n    onClose: PropTypes.func,\n\n    /**\n     * Provide a function that is called when the close button is clicked\n     */\n    onCloseButtonClick: PropTypes.func,\n\n    /**\n     * By default, this value is \"alertdialog\". You can also provide an alternate\n     * role if it makes sense from the accessibility-side.\n     */\n    role: PropTypes.string,\n\n    /**\n     * Provide a description for \"status\" icon that can be read by screen readers\n     */\n    statusIconDescription: PropTypes.string,\n\n    /**\n     * Additional Properties\n     */\n    properties: PropTypes.any\n};\n\nActionable.defaultProps = {\n    kind: \"info\",\n    lowContrast: true,\n    role: \"alert\",\n    title: \"[Title Title]\",\n    subtitle: \"[Subtitle Content]\",\n    iconDescription: \"[Icon Descriptive Content]\",\n    statusIconDescription: \"[Status Icon Descriptive Content]\",\n    hideCloseButton: false,\n    closeOnEscape: true,\n    inline: true,\n    hasFocus: true,\n    actionButtonLabel: \"[Button-Label]\",\n    onActionButtonClick: (event) => console.trace(\"[Trace]\", \"Actionable Button Click Event\", event)\n};\n","import PropTypes from \"prop-types\";\n\nimport React, { useState, useEffect } from \"react\";\n\nimport { CodeSnippet, CodeSnippetSkeleton } from \"@carbon/react\";\n\nimport { Inline } from \"./../../../components/Notifications/Authentication/Informational.js\";\n\nimport axios from \"axios\";\n\nimport \"./SCSS/Snippet.scss\";\nimport * as Styles from \"./SCSS/Snippet.module.scss\";\n\n/***\n * @param duration {Number} Total Skeleton Simulated Loading Time (Seconds)\n * @return {JSX.Element}\n * @constructor\n */\n\nconst Component = ({ duration }) => {\n    const url = process.env.REACT_APP_API_ENDPOINT + [ \"/v1/utility/awaitable?duration\", duration ].join(\"=\");\n\n    const [ data, setData ] = useState(false);\n    const [ loading, setLoading ] = useState(false);\n    const [ error, setError ] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setLoading(true);\n\n            try {\n                const $ = await axios(url);\n\n                setData($);\n\n                setError(false);\n\n            } catch ( error ) {\n                console.warn(error);\n                setError({\n                    column: error?.column,\n                    line: error?.line,\n                    message: error?.message,\n                    stack: error?.stack\n                });\n            }\n            finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData().finally(() => {\n            console.debug(\"[Debug] Loading Complete\");\n        });\n    }, [ url ]);\n\n    const Awaitable = () => (loading) && (<CodeSnippetSkeleton type={ \"multi\" }/>);\n\n    const Error = () => (error && !loading) && (\n        <div style={ { marginBottom: \"1.0rem\" } }>\n            <Inline\n                kind={ \"error\" }\n                lowContrast={ true }\n                role={ \"alert\" }\n                statusIconDescription={ \"Status-Icon\" }\n                iconDescription={ \"Close Error Message\" }\n                title={ \"Error\" }\n                subtitle={ error?.message }\n                hideCloseButton={ true }\n            />\n        </div>\n    );\n\n    const Data = () => (data && !loading) && (\n        <CodeSnippet\n            type={ \"multi\" }\n            className={ Styles.snippet }\n            children={\n                JSON.stringify(data, null, 4)\n            }\n            showMoreText={ \"Expand\" }\n            showLessText={ \"Collapse\" }\n            maxCollapsedNumberOfRows={ 15 }\n            wrapText={ false }\n        />\n    );\n\n    return (\n        <>\n            { (<Error/>) }\n            { (<Awaitable/>) }\n            { (<Data/>) }\n        </>\n    );\n};\n\nComponent.defaultProps = {\n    duration: 3\n};\n\nComponent.propTypes = {\n    /*** @type {Number} Total Skeleton Simulated Loading Time (Seconds) */\n    duration: PropTypes.number.isRequired\n};\n\nexport default Component;\n\nexport const Requestable = ({ url, headers }) => {\n    const [ data, setData ] = useState(false);\n    const [ loading, setLoading ] = useState(false);\n    const [ error, setError ] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setLoading(true);\n\n            try {\n                const $ = await axios(url, { headers });\n\n                setData($.data);\n                setError(false);\n\n            } catch ( error ) {\n                console.warn(error);\n                setError({\n                    column: error?.column,\n                    line: error?.line,\n                    message: error?.message,\n                    stack: error?.stack\n                });\n            }\n\n            finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData().finally(() => {\n            console.debug(\"[Debug] Loading Complete\");\n        });\n    }, [ url ]);\n\n    const Awaitable = () => (loading) && (<CodeSnippetSkeleton type={ \"multi\" }/>);\n\n    const Error = () => (error && !loading) && (\n        <Inline\n            kind={ \"error\" }\n            lowContrast={ true }\n            role={ \"alert\" }\n            statusIconDescription={ \"Status-Icon\" }\n            iconDescription={ \"Close Error Message\" }\n            title={ \"Error\" }\n            subtitle={ error?.message }\n            hideCloseButton={ true }\n        />\n    );\n\n    const Data = () => (data && !loading) && (\n        <CodeSnippet\n            type={ \"multi\" }\n            className={ Styles.snippet }\n            children={\n                JSON.stringify(data, null, 4)\n            }\n            showMoreText={ \"Expand\" }\n            showLessText={ \"Collapse\" } hideCopyButton={ true }\n            maxCollapsedNumberOfRows={ 15 }\n            wrapText={ false }\n        />\n    );\n\n    return (\n        <>\n            { (<Error/>) }\n            { (<Awaitable/>) }\n            { (<Data/>) }\n        </>\n    );\n};\n\nRequestable.propTypes = {\n    url: PropTypes.string\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cds--content\":\"Snippet_cds--content__Whbk1\",\"cds--inline-loading\":\"Snippet_cds--inline-loading__1nfoh\",\"cds--css-grid\":\"Snippet_cds--css-grid__2-Sw0\",\"c4p--notifications-panel__container\":\"Snippet_c4p--notifications-panel__container__2M6b9\",\"c4p--notifications-panel__notification-today\":\"Snippet_c4p--notifications-panel__notification-today__33e-4\",\"c4p--notifications-panel__notification-yesterday\":\"Snippet_c4p--notifications-panel__notification-yesterday__3kLJH\",\"c4p--notifications-panel__notification-previous\":\"Snippet_c4p--notifications-panel__notification-previous__2YJWx\",\"c4p--notifications-panel__settings-button\":\"Snippet_c4p--notifications-panel__settings-button__3ksxu\",\"cds--btn__icon\":\"Snippet_cds--btn__icon__2vYBd\",\"c4p--notifications-panel__time-section-label\":\"Snippet_c4p--notifications-panel__time-section-label__39EwI\",\"c4p--notifications-panel__notification\":\"Snippet_c4p--notifications-panel__notification__3GkoC\",\"c4p--notifications-panel__notifications-link\":\"Snippet_c4p--notifications-panel__notifications-link__1KbP3\",\"cds--parent-row\":\"Snippet_cds--parent-row__23_kc\",\"cds--data-table--selected\":\"Snippet_cds--data-table--selected__1348t\",\"cds--expandable-row\":\"Snippet_cds--expandable-row__2J-CC\",\"cds--data-table\":\"Snippet_cds--data-table__af0Xh\",\"cds--table-expand\":\"Snippet_cds--table-expand__1HHDy\",\"cds--table-column-checkbox\":\"Snippet_cds--table-column-checkbox__3bQ5D\",\"cds--snippet--single\":\"Snippet_cds--snippet--single__hBTYj\",\"cds--snippet-container\":\"Snippet_cds--snippet-container__3NJIB\",\"cds--data-table-container\":\"Snippet_cds--data-table-container__3sCBz\",\"cds--pagination\":\"Snippet_cds--pagination__3uKAQ\",\"cds--data-table-header\":\"Snippet_cds--data-table-header__3hR3U\",\"cds--child-row\":\"Snippet_cds--child-row__2HhVI\",\"cds--inline-notification\":\"Snippet_cds--inline-notification__1WEu4\",\"no-select\":\"Snippet_no-select__2zOYF\",\"unselectable\":\"Snippet_unselectable__1oIw9\",\"no-highlight\":\"Snippet_no-highlight__2RU1V\",\"select-all\":\"Snippet_select-all__ffD2m\",\"enable-select-all\":\"Snippet_enable-select-all__3yvDn\",\"snippet\":\"Snippet_snippet__1OfDS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cds--content\":\"Index_cds--content__3mkTf\",\"cds--inline-loading\":\"Index_cds--inline-loading__3eCqU\",\"cds--css-grid\":\"Index_cds--css-grid__3PGpB\",\"c4p--notifications-panel__container\":\"Index_c4p--notifications-panel__container__1QUK0\",\"c4p--notifications-panel__notification-today\":\"Index_c4p--notifications-panel__notification-today__1aej7\",\"c4p--notifications-panel__notification-yesterday\":\"Index_c4p--notifications-panel__notification-yesterday__huAIM\",\"c4p--notifications-panel__notification-previous\":\"Index_c4p--notifications-panel__notification-previous__3BFLK\",\"c4p--notifications-panel__settings-button\":\"Index_c4p--notifications-panel__settings-button__q-DU8\",\"cds--btn__icon\":\"Index_cds--btn__icon__3MB4g\",\"c4p--notifications-panel__time-section-label\":\"Index_c4p--notifications-panel__time-section-label__1xXbW\",\"c4p--notifications-panel__notification\":\"Index_c4p--notifications-panel__notification__2WZNf\",\"c4p--notifications-panel__notifications-link\":\"Index_c4p--notifications-panel__notifications-link__eoPwv\",\"cds--parent-row\":\"Index_cds--parent-row__3us0_\",\"cds--data-table--selected\":\"Index_cds--data-table--selected__q6vbh\",\"cds--expandable-row\":\"Index_cds--expandable-row__3vdeS\",\"cds--data-table\":\"Index_cds--data-table__2JhkW\",\"cds--table-expand\":\"Index_cds--table-expand__3s5QS\",\"cds--table-column-checkbox\":\"Index_cds--table-column-checkbox__3xYrn\",\"cds--snippet--single\":\"Index_cds--snippet--single__3jWyI\",\"cds--snippet-container\":\"Index_cds--snippet-container__HFcsL\",\"cds--data-table-container\":\"Index_cds--data-table-container__-BUrP\",\"cds--pagination\":\"Index_cds--pagination__Bg5SZ\",\"cds--data-table-header\":\"Index_cds--data-table-header___WQoZ\",\"cds--child-row\":\"Index_cds--child-row__u0Mdk\",\"cds--inline-notification\":\"Index_cds--inline-notification__3ggcw\",\"no-select\":\"Index_no-select__HnkO2\",\"unselectable\":\"Index_unselectable__2qWN2\",\"no-highlight\":\"Index_no-highlight__3wGzj\",\"select-all\":\"Index_select-all__3SU2V\",\"enable-select-all\":\"Index_enable-select-all__1JB6V\",\"component\":\"Index_component__2uJtY\"};","import { default as Template } from \"./../../Module.js\";\n\nimport PropTypes from \"prop-types\";\n\nimport { default as Page } from \"./Page.js\";\n\nimport Styles from \"./SCSS/Index.module.scss\";\n\nconst Component = ({ timeout, description }) => {\n    return (\n        <Template Page={ Page } description={ description } timeout={ timeout } className={ Styles.component }/>\n    );\n};\n\nComponent.defaultProps = {\n    timeout: 1250\n};\n\nComponent.propTypes = {\n    /**\n     * Forced Delay during Transition\n     */\n\n    timeout: PropTypes.number.isRequired,\n\n    /***\n     * Loading Screen Context\n     */\n\n    description: PropTypes.string.isRequired\n};\n\nexport default Component;"],"sourceRoot":""}