{"version":3,"sources":["Worker.js"],"names":["isLocalhost","Boolean","location","hostname","match","register","config","URL","process","self","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","navigator","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","info","onupdatefound","installingWorker","installing","onstatechange","state","controller","warn","onUpdate","onSuccess","error","debug","message"],"mappings":"uJAAA,2FAEA,IAAMA,EAAcC,QACM,cAAtBC,SAASC,UACa,YAAtBD,SAASC,UACa,UAAtBD,SAASC,UACTD,SAASC,SACJC,MAAM,2DAGR,SAASC,EAASC,GAGC,IAAIC,IAAIC,GAAwBC,KAAKP,SAASQ,MACjDC,SAAWT,SAASS,QACnCF,KAAKG,iBAAiB,QAAQ,WAC1B,IAAMC,EAAK,UAAOL,GAAP,sBAENR,IA4DjB,SAAiCa,EAAOP,GAEpCQ,MAAMD,EAAO,CACTE,QAAS,CAAE,iBAAkB,YAE5BC,MAAK,SAACC,GAEH,IAAMC,EAAcD,EAASF,QAAQI,IAAI,gBAEjB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CC,UAAUC,cAAcC,MAAMR,MAAK,SAACS,GAChCA,EAAaC,aAAaV,MAAK,WAC3BP,KAAKP,SAASyB,eAKtBC,EAAgBf,EAAOP,MAE5BuB,OAAM,kBAAMC,QAAQC,IAAI,iFAhFnBC,CAAwBnB,EAAOP,GAI/BgB,UAAUC,cAAcC,MAAMR,MAAK,WAC/Bc,QAAQG,KAAK,+CAKjBH,QAAQG,KAAK,gBAAgB,GAE7BL,EAAgBf,EAAOP,OAMvC,SAASsB,EAAgBf,EAAOP,GAC5BgB,UAAUC,cACLlB,SAASQ,GACTG,MAAK,SAACS,GACHA,EAAaS,cAAgB,WACzB,IAAMC,EAAmBV,EAAaW,WACb,MAApBD,IAGLA,EAAiBE,cAAgB,WACG,cAA3BF,EAAiBG,QACbhB,UAAUC,cAAcgB,YAIzBT,QAAQU,KACJ,iEAIClC,GAAUA,EAAOmC,UAClBnC,EAAOmC,SAAShB,KAMpBK,QAAQC,IAAI,sCAGPzB,GAAUA,EAAOoC,WAClBpC,EAAOoC,UAAUjB,WAMtCI,OAAM,SAACc,GAAD,OAAWb,QAAQa,MAAM,2CAA4CA,MA4B/E,SAASjB,IACP,kBAAmBJ,WACpBA,UAAUC,cAAcC,MACnBR,MAAK,SAACS,GACHA,EAAaC,aAAaV,MAAK,SAACC,GAAD,OAAca,QAAQc,MACjD,qCAGPf,OAAM,SAACc,GACJb,QAAQa,MAAMA,EAAME,YAKrBxC","file":"static/js/34.bc7a3e82.chunk.js","sourcesContent":["/* eslint-disable no-restricted-globals */\n\nconst isLocalhost = Boolean(\n    location.hostname === \"localhost\" ||\n    location.hostname === \"0.0.0.0\" ||\n    location.hostname === \"[::1]\" ||\n    location.hostname\n        .match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if ( process.env.NODE_ENV === \"production\" || \"serviceWorker\" in navigator ) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, self.location.href);\n        if ( publicUrl.origin !== location.origin ) return;\n        self.addEventListener(\"load\", () => {\n            const swUrl = `${ process.env.PUBLIC_URL }/Service-Worker.js`;\n\n            if ( isLocalhost ) {\n                // self is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.info(\"Content is Available for Offline Usage\");\n                });\n            } else {\n                // Is not localhost. Just register service worker\n\n                console.info(\"Registration\", true);\n\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if ( installingWorker == null ) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if ( installingWorker.state === \"installed\" ) {\n                        if ( navigator.serviceWorker.controller ) {\n                            // At self point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.warn(\n                                \"Cache is Invalid; Please Refresh Page + Close Applicable Tabs\"\n                            );\n\n                            // Execute callback\n                            if ( config && config.onUpdate ) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At self point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if ( config && config.onSuccess ) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        }).catch((error) => console.error(\"Error During Service-Worker Registration\", error));\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        self.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        }).catch(() => console.log(\"No Public Network Connection Found. Application is Running in Offline-Mode\"));\n}\n\nexport function unregister() {\n    if ( \"serviceWorker\" in navigator ) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister().then((response) => console.debug(\n                    \"Service Worker Unregistered\"\n                ));\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n\nexport default register;\n"],"sourceRoot":""}