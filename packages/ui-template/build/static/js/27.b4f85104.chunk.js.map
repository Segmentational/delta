{"version":3,"sources":["pages/Pipelines/Query.js","pages/Pipelines/Paginator.js","pages/Pipelines/Skeleton.js","pages/Pipelines/Page.js"],"names":["Request","require","Adapter","Forage","STORE","Cancellation","CancelToken","source","Instantiate","Store","createInstance","name","storeName","description","driver","INDEXEDDB","Cache","setupCache","excludeFromCache","debug","process","clearOnStale","ignoreCache","limit","clearOnError","readHeaders","readOnError","maxAge","store","API","create","adapter","cache","cancelToken","token","Methods","Responses","Buffer","Binary","DOM","JSON","Text","Stream","AIO","URL","String","useState","data","setData","loading","setLoading","error","setError","useEffect","ignore","fetch","a","Awaitable","Value","getItem","then","Key","console","catch","Handler","setItem","response","get","timeout","withCredentials","responseType","onUploadProgress","log","onDownloadProgress","finally","Result","Collection","clear","Query","Clear","total","iterator","length","Response","Waiter","Error","Total","State","Skeleton","className","paginator","Component","Pages","backwardText","forwardText","itemsPerPageText","pageNumberText","pageSize","Size","pageSizes","totalItems","page","Index","Data","onChange","Setter","Table","Rows","Headers","compact","columnCount","rowCount","showHeader","showToolbar","zebra","url","home","style","width","display","href","batchActionClick","event","target","id","getAttribute","parse","Refresh","setter","Schema","visibility","last_activity_at","web_url","Tabluar","Projects","Array","slice","forEach","Repository","disabled","isExpanded","isSelected","cells","Object","values","UID","Name","Visibility","toUpperCase","Activity","rows","headers","isSortable","render","getTableProps","getTableContainerProps","getSelectionProps","getExpandHeaderProps","getHeaderProps","overflowMenuOnHover","getRowProps","getToolbarProps","getBatchActionProps","title","tabIndex","shouldShowBatchActions","renderIcon","DICO","onClick","Metrics","CSV","persistent","labelText","placeholder","kind","size","hasIconOnly","Reload","iconDescription","tooltipAlignment","tooltipPosition","type","enableToggle","map","Header","value","header","colSpan","Row","expandIconDescription","row","feedback","copyButtonDescription","hideCopyButton","copyLabel","window","open","setRows","setPage","awaiting","setAwaiting","Promise","_","setTimeout","Await","key","sortable","Sizes","pop"],"mappings":"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","file":"static/js/27.b4f85104.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst Request = require(\"axios\");\nconst Adapter = require(\"axios-cache-adapter\");\nconst Forage =  require(\"localforage\");\n\nconst STORE = \"Gitlab-Project-Pages\";\nconst NAME = \"Nexus-UI\";\nconst DESCRIPTION = \"Cache Key-Value Table for VCS\";\n\nconst Cancellation = Request.CancelToken.source();\n\nCancellation.Instantiate = () => Request.CancelToken.source();\n\nconst Store = Forage.createInstance({\n    name: NAME,\n    storeName: STORE,\n    description: DESCRIPTION,\n    driver: Forage.INDEXEDDB\n});\n\nconst Cache = Adapter.setupCache({\n    excludeFromCache: true, // --> Debugging\n    debug: (process.env.NODE_ENV !== \"production\"),\n    clearOnStale: true,\n    ignoreCache: true,\n    limit: false,\n    clearOnError: true,\n    readHeaders: true,\n    readOnError: true,\n    maxAge: 5 * 60 * 1000,\n    store: Store\n});\n\nconst API = Request.create({\n    adapter: Cache.adapter,\n    cache: Cache,\n    cancelToken: Cancellation.token\n});\n\nexport const Methods = [\n    \"get\",      \"GET\",\n    \"delete\",   \"DELETE\",\n    \"head\",     \"HEAD\",\n    \"options\",  \"OPTIONS\",\n    \"post\",     \"POST\",\n    \"put\",      \"PUT\",\n    \"patch\",    \"PATCH\",\n    \"purge\",    \"PURGE\",\n    \"link\",     \"LINK\",\n    \"unlink\",   \"UNLINK\"\n];\n\nexport const Responses = {\n    Buffer:     \"arraybuffer\",\n    Binary:     \"blob\",\n    DOM:        \"document\",\n    JSON:       \"json\",\n    Text:       \"text\",\n    Stream:     \"stream\"\n};\n\nexport class AIO {\n    static URL = String(process.env.REACT_APP_API_ENDPOINT) + \"/API/Gitlab/Projects\";\n\n    static Request = () => {\n        const Query = () => {\n            const [data, setData] = useState({});\n            const [loading, setLoading] = useState(true);\n            const [error, setError] = useState(null);\n\n            useEffect(() => {\n                let ignore = false;\n\n                const fetch = async () => {\n                    setLoading(true);\n\n                    try {\n                        setError({});\n\n                        const Awaitable = { Value: null };\n\n                        await Store.getItem(STORE).then((Key) => {\n                            if (Key !== null) {\n                                console.debug(\"[DEBUG]\", \"Cache Hit\");\n\n                                setData(Key);\n                                Awaitable[\"Value\"] = Key;\n                                ignore = true;\n                            }\n                            else {\n                                console.debug(\"[DEBUG]\", \"Cache Miss\");\n                            }\n                        }).catch((error) => console.debug(\n                            \"[DEBUG]\",\n                            \"Void Cache-Key Look-Up\",\n                            \"Warning\", error\n                        ));\n\n                        const Handler = async () => {\n                            if (Awaitable.Value !== null) {\n                                await Store.setItem(STORE, Awaitable.Value);\n                            }\n                        }; await Handler().then(async () => {\n                            if (ignore === false) {\n                                const response = API.get(AIO.URL, {\n                                    timeout: 30000,\n                                    withCredentials: false,\n                                    responseType: Responses.JSON,\n                                    onUploadProgress: async () => console.log(\"[DEBUG]\", \"Upload in Progress\"),\n                                    onDownloadProgress: async () => console.debug(\"[DEBUG]\", \"Download in Progress\")\n                                }).catch((error) => (console.debug(\"[DEBUG]\", \"API-Request\", \"Projects\", \"Error\", error))).finally(\n                                    () => {\n                                        console.debug(\"[DEBUG]\", \"Query Awaitable Complete\");\n                                    }\n                                );\n\n                                const Result = await response;\n\n                                const Collection = (Result && Result.data) ? Result.data : null;\n\n                                await Store.setItem(STORE, Collection);\n\n                                if (!ignore) setData(Collection);\n                            }\n                        });\n                    } catch (error) {\n                        console.debug(\"[DEBUG]\", error);\n                        await Store.clear();\n                        console.debug(\"[DEBUG]\", \"Cache\", \"Projects\", \"Cleared\");\n                        ignore = true;\n                    }\n\n                    finally { setLoading(false); };\n\n                };\n\n                return (ignore === false) ? fetch()\n                    : () => {\n                        ignore = true\n                };\n            }, []);\n\n            return { data, loading, error };\n        };\n\n        return Query();\n    };\n\n    static Clear = async () => {\n        await Store.clear();\n    }\n\n    static Awaitable = () => {\n        const { data, loading, error } = AIO.Request();\n\n        let total = 0;\n        if (data !== null) {\n            let iterator = 0;\n            for (iterator; iterator < data.length; iterator++) {\n                total += data[iterator].length;\n            }\n        }\n\n        return {\n            Response: data,\n            Waiter: loading,\n            Error: error,\n            Total: total\n        };\n    };\n};\n\nexport default AIO;\n\nexport const State = AIO.Awaitable;\n","import React from \"react\";\n\nimport { paginator } from \"./SCSS/Index.module.scss\";\n\nimport {\n    Pagination,\n    PaginationSkeleton\n} from \"@carbon/react\";\n\nexport const Skeleton = () => {\n    return (\n        <PaginationSkeleton className={ paginator }/>\n    );\n};\n\nconst Component = ({Pages}) => {\n    return (\n        <Pagination\n            className={ paginator }\n            backwardText=\"Previous\"\n            forwardText=\"Next\"\n            itemsPerPageText=\"Total Paged Items\"\n            pageNumberText=\"Page Number\"\n            pageSize={ Pages.Size }\n            /// pageSizes={ [5, 10, 15, 25, 50, 100, 1000] }\n            pageSizes={[20]}\n            totalItems={ Pages.Total }\n            page={ Pages.Index.Data }\n            onChange={ (Data) => Pages.Index.Setter(Data.page) }\n    />);\n};\n\nexport default Component;\n","import PropTypes from \"prop-types\";\n\nimport {\n    DataTableSkeleton,\n    TableContainer\n} from \"@carbon/react\";\n\nimport { Skeleton } from \"./Paginator\";\n\nconst Table = ({ Rows = 20, Headers = 6 }) => (\n    <TableContainer>\n        <DataTableSkeleton\n            compact={ false }\n            columnCount={ Headers }\n            rowCount={ Rows }\n            showHeader={ true }\n            showToolbar={ true }\n            zebra={ false }\n        />\n        <Skeleton/>\n    </TableContainer>\n);\n\nTable.propTypes = {\n    Rows: PropTypes.number,\n    Headers: PropTypes.number\n};\n\nexport default Table;\n","import React, {\n    Fragment,\n    useState,\n    useEffect\n} from \"react\";\n\nimport \"./SCSS/Cell.scss\";\n\nimport { dataElement } from \"./SCSS/Index.module.scss\";\n\nimport * as Query from \"./Query\";\n\nimport Skeleton from \"./Skeleton\";\n\nimport {\n    DataTable,\n    Table,\n    TableHead,\n    TableRow,\n    TableHeader,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableSelectRow,\n    TableToolbarContent,\n    TableExpandHeader,\n    TableToolbar,\n    TableExpandRow,\n    TableExpandedRow,\n    TableSelectAll,\n    Link,\n    Button,\n    TableBatchActions,\n    TableBatchAction,\n    TableToolbarSearch,\n    CodeSnippet,\n    Tag\n} from \"@carbon/react\";\n\nimport {\n    Renew32 as Reload,\n    Data_132 as DICO,\n    CrossTab32 as CSV,\n    ChartCombo32 as Metrics\n} from \"@carbon/icons-react\";\n\n/// ... import { default as Breadcrumb } from \"./Breadcrumb/Index\";\n\nimport { default as Pagination } from \"./Paginator\";\n\nconst URL = ({ url, home }) => {\n    return (\n        <ul style={ { width: \"max-content\" } }>\n            <li style={ { display: \"inline\" } }>\n                <Link href={ url } className={ \"io--underline-text\" }>\n                    <strong>\n                        Repository\n                    </strong>\n                </Link>\n            </li>\n            { home && (\n                <li style={ { display: \"inline\" } }>\n                    <span>&nbsp;|&nbsp;</span>\n                    <Link href={ home }>Gitlab</Link>\n                </li>\n            ) }\n        </ul>\n    );\n};\n\nfunction batchActionClick(event, rows = null) {\n    if (event) console.debug(\"Batch-Action-Click\", event.target.id);\n    if (event.target.getAttribute(\"dataset-target-row\") !== null) {\n        console.log(JSON.parse(event.target.getAttribute(\"dataset-target-data\")));\n    }\n}\n\nasync function Refresh(setter) {\n    console.debug(\"[DEBUG]\", \"Importing Event-Handler\");\n    const Query = () => require(\"./Query\").AIO;\n    console.debug(\"[DEBUG]\", \"Instantiating Query Object\");\n    const Handler = Query();\n    console.debug(\"[DEBUG]\", \"Removing Session Cache\");\n    await Handler.Clear().then().catch((error) => console.debug(\"[DEBUG]\", \"Error\", error)).finally(\n        () => console.debug(\"[DEBUG]\", \"Successfully Removed Session Cache\")\n    );\n\n    setter(true);\n}\n\nconst Schema = [{\n    id: null,\n    name: null,\n    visibility: null,\n    last_activity_at: null,\n    web_url: null\n}];\n\n/***\n *\n * Rows consist of the datasets -- or tabulars -- that make up\n * the majority content of a given data-table. Headers define\n * the Key-Value look-ups + labels for accessing a given row's\n * indexed objects.\n *\n * @returns {JSX.Element}\n * @constructor\n */\n\n/***\n *\n * @param Headers {Array}\n * @param Data {Map}\n * @param Page {Number}\n * @param Offset {Number}\n * @returns {JSX.Element}\n * @constructor { () =? () }\n *\n *  *-* Project Type *-*\n * ======================\n *\n * @type {function(Number)};\n *\n * >>> const Project = {\n * ...     \"id\":               String(Index),\n * ...     \"ID\":               String(Repository.id),\n * ...     \"Name\":             String(Repository.name),\n * ...     \"Default-Branch\":   String(Repository.visibility).toUpperCase(),\n * ...     \"Last-Activity\":    String(Repository.default_branch),\n * ...     \"Visibility\":       String(Repository.last_activity_at),\n * ...     \"Web-URL\":          String(Repository.web_url),\n * ... };\n *\n */\n\nconst Tabluar = ({ Data = Schema, Headers, State, Pages, Handler }) => {\n    const Home = \"https://gitlab.cloud-technology.io/\";\n\n    const Total = (Data) ? Data.length: 0;\n    const Projects = new Array(Total);\n\n    const Exclusions = 2;\n\n    Headers = Headers.slice(0, Headers.length - Exclusions);\n    Data.forEach((Repository, Index) => {\n        Projects[Index] = {\n            id: String(Index),\n            disabled: false,\n            isExpanded: false,\n            isSelected: false,\n            cells: Object.values({ Repository }),\n            UID: (Repository.id !== null) ? String(Repository.id): 0,\n            Name: (Repository.name !== null) ? String(Repository.name): \"N/A\",\n            Visibility: (Repository.visibility !== null) ? String(Repository.visibility).toUpperCase(): \"Internal\",\n            Activity: (Repository.last_activity_at !== null) ? String(Repository.last_activity_at): \"N/A\",\n            URL: (Repository.web_url !== null) ? String(Repository.web_url): \"N/A\"\n        };\n    });\n\n    return (\n        <DataTable\n            rows={ Projects }\n            headers={ Headers }\n            isSortable={ false }\n            render={\n                ({\n                    rows,\n                    headers,\n                    getTableProps,\n                    getTableContainerProps,\n                    getSelectionProps,\n                    getExpandHeaderProps,\n                    overflowMenuOnHover,\n                    getHeaderProps,\n                    getRowProps,\n                    getToolbarProps,\n                    getBatchActionProps\n                }) => (\n                    <TableContainer title={ \"Cloud-Technology\" } description=\"Cloud-Technology's GitHub Repositories\" { ... getTableContainerProps() }>\n                        <TableToolbar { ... getToolbarProps() }>\n                            <TableBatchActions { ... getBatchActionProps() }>\n                                <TableBatchAction\n                                    id=\"Development-Table-JSON-Trigger-Button\"\n                                    tabIndex={ getBatchActionProps().shouldShowBatchActions ? 0: -1 }\n                                    renderIcon={ DICO }\n                                    onClick={ batchActionClick }\n                                >\n                                    JSON\n                                </TableBatchAction>\n                                <TableBatchAction\n                                    id=\"Development-Table-Metrics-Trigger-Button\"\n                                    tabIndex={ getBatchActionProps().shouldShowBatchActions ? 0: -1 }\n                                    renderIcon={ Metrics }\n                                    onClick={ batchActionClick }\n                                >\n                                    Metrics\n                                </TableBatchAction>\n                                <TableBatchAction\n                                    id=\"Development-Table-Download-Trigger-Button\"\n                                    tabIndex={ getBatchActionProps().shouldShowBatchActions ? 0: -1 }\n                                    renderIcon={ CSV }\n                                    onClick={ batchActionClick }\n                                >\n                                    Download\n                                </TableBatchAction>\n                            </TableBatchActions>\n                            <TableToolbarContent>\n                                <TableToolbarSearch\n                                    persistent={ false }\n                                    labelText={ \"Test-Label-Text\" }\n                                    placeholder={ \"Test-Place-Holder-Text\" }\n                                    tabIndex={ getBatchActionProps().shouldShowBatchActions ? -1: 0 }\n                                    //                                 onChange={ (event) => console.debug(event) }\n                                />\n                                <Button\n                                    kind=\"ghost\"\n                                    size=\"default\"\n                                    hasIconOnly={ true }\n                                    onClick={ async () => await Refresh(State) }\n                                    renderIcon={ Reload }\n                                    tabIndex={ 0 }\n                                    iconDescription={ \"Reload Table & Clear Cache\" }\n                                    tooltipAlignment={ \"center\" }\n                                    tooltipPosition={ \"left\" }\n                                    type={ \"button\" }\n                                />\n                            </TableToolbarContent>\n                        </TableToolbar>\n                        <Table { ... getTableProps() }>\n                            <TableHead>\n                                <TableRow>\n                                    <TableExpandHeader enableToggle={ true } { ... getExpandHeaderProps() } />\n                                    <TableSelectAll { ... getSelectionProps() } />\n                                    {\n                                        Headers.map((Header, Index) => (Header.value === \"Name\")\n                                            ? (\n                                                <TableHeader { ... getHeaderProps({ header: Header }) } colSpan={ 1 }>\n                                                    { Header.value }\n                                                </TableHeader>\n                                            ): (\n                                                <TableHeader { ... getHeaderProps({ header: Header }) } colSpan={ 1 }>\n                                                    { Header.value }\n                                                </TableHeader>\n                                            ))\n                                    }\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                { Projects.map((Row, Index) => {\n                                    Row = { ... Row, ... rows[Index] };\n                                    return (\n                                        <Fragment key={ String(Index) }>\n                                            <TableExpandRow\n                                                expandIconDescription={ \"Select to Expand Repository's Description\" } {\n                                                ... getRowProps({ row: Row })\n                                            } >\n                                                <TableSelectRow { ... getSelectionProps({ row: Row }) } />\n                                                <TableCell\n                                                    key={ String(Index) + \"-\" + \"ID\" + \"-\" + Row.UID } name={ String(\n                                                    Index) + \"-\" + \"ID\" + \"-\" + Row.UID }\n                                                >\n                                                    <CodeSnippet type=\"single\" feedback={ \"Copied\" } copyButtonDescription={ \"Copy Code Snippet Content\" } hideCopyButton={ false } copyLabel={ \"Row-ID\" }>\n                                                        { String(Row.UID) }\n                                                    </CodeSnippet>\n                                                </TableCell>\n                                                <TableCell\n                                                    key={ String(Index) + \"-\" + \"Name\" + \"-\" + Row.UID } name={ String(\n                                                    Index) + \"-\" + \"Name\" + \"-\" + Row.UID }\n                                                >\n                                                    <strong>\n                                                        <CodeSnippet type={ \"single\" } feedback={ \"Saved to Clipboard\" }>\n                                                            { Row.Name }\n                                                        </CodeSnippet>\n                                                    </strong>\n                                                </TableCell>\n                                                <TableCell key={ String(Index) + \"-\" + \"Activity\" } name={ String(Index) + \"-\" + \"Activity\" }>\n                                                    { String(Row.Activity).slice(0, 10) }\n                                                </TableCell>\n                                                <TableCell\n                                                    key={ String(Index) + \"-\" + \"Visibility\" + \"-\" + Row.UID } id={ String(\n                                                    Index) + \"-\" + \"Visibility\" + \"-\" + Row.UID }\n                                                >\n                                                    {\n                                                        (Row.Visibility === \"PUBLIC\") ? (\n                                                                <Tag\n                                                                    id={ \"Visibility-Tag\" + \"-\" + String(Index) }\n                                                                    type=\"green\"\n                                                                    title=\"Public-Visibility-Tag\"\n                                                                    onClick={ () => window.open(Row.URL) }\n                                                                >\n                                                                    <strong>Public</strong>\n                                                                </Tag>)\n                                                            : (Row.Visibility === \"PRIVATE\") ? (\n                                                                    <Tag\n                                                                        id={ \"Visibility-Tag\" + \"-\" + String(Index) }\n                                                                        type=\"red\"\n                                                                        title=\"Private-Visibility-Tag\"\n                                                                        // className={ \"io--tag--red-non-interactive\" }\n                                                                    >\n                                                                        <strong>Private</strong>\n                                                                    </Tag>)\n                                                                : (\n                                                                    <Tag\n                                                                        id={ \"Visibility-Tag\" + \"-\" + String(Index) }\n                                                                        type=\"purple\"\n                                                                        title=\"Internal-Visibility-Tag\"\n                                                                    >\n                                                                        <strong>Internal</strong>\n                                                                    </Tag>)\n                                                    }\n                                                </TableCell>\n                                                <TableCell\n                                                    id={ String(Index) + \"-\" + \"URL\" + \"-\" + Row.UID }\n                                                    key={ String(Index) + \"-\" + \"URL\" + \"-\" + Row.UID }\n                                                >\n                                                    <URL\n                                                        url={ Row.URL } home={ Home } key={ \"VCS-URL-Link-Key\" + \"-\" + String(\n                                                        Index) }\n                                                    />\n                                                </TableCell>\n                                            </TableExpandRow>\n                                            <TableExpandedRow colSpan={ headers.length + 2 }>\n                                                <p>\n                                                    <strong>Description</strong>:&nbsp;\n                                                    { (Data) ? Data[Index].description: \"N/A\" }\n                                                </p>\n                                            </TableExpandedRow>\n                                        </Fragment>\n                                    )\n                                }) }\n                            </TableBody>\n                        </Table>\n                        { (Data) ? (\n                            <Pagination Pages={ Pages }/>\n                        ): (\n                            <></>\n                        ) }\n                    </TableContainer>\n                ) }\n            size={ \"normal\" }\n        />\n    );\n};\n\nconst Component = () => {\n    const [rows, setRows] = useState(20);\n    const [page, setPage] = useState(1);\n    const [awaiting, setAwaiting] = useState(true);\n\n    useEffect(() => {\n        async function Await() {\n            const Waiter = new Promise((_) => setTimeout(\n                (_) => {\n                    console.debug(\"Updating Await := false\");\n                    setAwaiting(false);\n                }\n            ), 1500);\n\n            await Waiter;\n        }\n\n        Await().then((_) => {\n            setAwaiting(false);\n        });\n\n        /// return async () => await setAwaiting(false);\n    }, []);\n\n    const Handler = Query.default.Awaitable();\n\n    const Headers = [ // Total = 8\n        {\n            key: \"ID\",\n            header: \"ID\",\n            sortable: false,\n            value: \"ID\"\n        },\n        {\n            key: \"Name\",\n            header: \"Name\",\n            sortable: false,\n            value: \"Name\"\n        },\n        {\n            key: \"Activity\",\n            header: \"Activity\",\n            sortable: false,\n            value: \"Activity\"\n        },\n        {\n            key: \"Visibility\",\n            header: \"Visibility\",\n            sortable: false,\n            value: \"Visibility\"\n        },\n        {\n            key: \"URL\",\n            header: \"URL\",\n            sortable: false,\n            value: \"URL\"\n        },\n        {\n            key: \"Description\",\n            header: \"Description\",\n            sortable: false,\n            value: \"Description\"\n        },\n\n        {\n            key: \"Git-HTTP-URL\",\n            header: \"Git-HTTP-URL\",\n            sortable: false,\n            value: \"URL\"\n        }\n    ];\n\n    const Pages = {\n        Rows: {\n            Data: rows,\n            Setter: (value) => setRows(value)\n        }, Total: (Handler.Total > rows) ? Handler.Total - rows: rows,\n        Index: {\n            Data: page,\n            Setter: (value) => setPage(value)\n        }, Size: rows,\n        Sizes: [rows]\n    };\n\n    const Awaitable = () => {\n        if (awaiting === true) {\n            return Component();\n        }\n\n        const Data = (Handler && Handler.Response && Handler.Response[page] !== null) ? new Array(\n                Handler.Response[page])\n            : new Array(0);\n\n        return (<Tabluar Headers={ Headers } Data={ Data.pop() } State={ setAwaiting } Pages={ Pages } Handler={Handler}/>);\n    };\n\n    return (Handler.Waiter === false) ? (<Awaitable/>): (<Skeleton/>);\n};\n\nexport default Component;\n"],"sourceRoot":""}