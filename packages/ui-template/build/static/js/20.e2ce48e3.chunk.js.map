{"version":3,"sources":["pages/Module.js","utilities/Difference.js","components/Notifications/Authentication/Informational.js","pages/Template/SCSS/Index.module.scss","pages/Template/Page.js","pages/Template/index.js"],"names":["Component","Page","timeout","description","Properties","lg","md","sm","defaultProps","Utility","source","target","Object","keys","reduce","difference","key","Delimiter","Inline","props","kind","lowContrast","role","title","subtitle","iconDescription","statusIconDescription","hideCloseButton","closeOnEscape","onClose","children","onCloseButtonClick","properties","console","debug","Difference","module","exports","url","process","duration","join","useState","data","setData","loading","setLoading","error","setError","useEffect","fetchData","a","axios","$","warn","column","line","message","stack","finally","Awaitable","Error","style","marginBottom","Data","className","Styles","component"],"mappings":"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","file":"static/js/20.e2ce48e3.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nimport {\n    Grid, Column\n} from \"@carbon/react\";\n\nimport { default as Loader } from \"./../components/Loader\";\n\nconst Component = ({ Page, timeout, description, ... Properties }) => {\n    return (\n        <Loader description={ description } timeout={ timeout }>\n            <Grid { ... Properties }>\n                <Column lg={ 16 } md={ 8 } sm={ 4 }>\n                    <Page/>\n                </Column>\n            </Grid>\n        </Loader>\n    );\n};\n\nComponent.defaultProps = {\n    timeout: 1250\n};\n\nComponent.propTypes = {\n    Page: PropTypes.func.isRequired,\n\n    /**\n     * Forced Delay during Transition (Units in ms)\n     */\n\n    timeout: PropTypes.number.isRequired,\n\n    /***\n     * Loading Screen Context\n     */\n\n    description: PropTypes.string.isRequired\n};\n\nexport default Component;","const Utility = (source, target) => Object.keys(source).reduce((difference, key) => {\n    if ( target[key] === source[key] ) return difference;\n    return {\n        ... difference,\n        [key]: source[key]\n    };\n}, {});\n\nexport default Utility;\n","import PropTypes from \"prop-types\";\n\nimport { InlineNotification, ToastNotification, ActionableNotification } from \"@carbon/react\";\n\nimport { default as Difference } from \"./../../../utilities/Difference.js\";\n\nconst Delimiter = () => (\n    <>\n        {\n            \" \"\n        }\n    </>\n);\n\nexport const Inline = (props) => {\n    const {\n        kind,\n        lowContrast,\n        role,\n        title,\n        subtitle,\n        iconDescription,\n        statusIconDescription,\n        hideCloseButton,\n        closeOnEscape,\n        onClose,\n        onCloseButtonClick,\n        children,\n        ... properties\n    } = props;\n\n    console.debug(\"Properties (Inline-Notification)\", Difference(props, properties));\n\n    console.debug(\"Attributes (Inline-Notification)\", properties);\n\n    return (\n        <InlineNotification\n            kind={ kind }\n            lowContrast={ lowContrast }\n            role={ role }\n            title={ title }\n            subtitle={ subtitle }\n            iconDescription={ iconDescription }\n            statusIconDescription={ statusIconDescription }\n            hideCloseButton={ hideCloseButton }\n            closeOnEscape={ closeOnEscape }\n            children={ children }\n            onClose={ onClose }\n\n            {\n                ... properties\n            }\n\n            /// data-properties={\n            ///     String(JSON.stringify({\n            ///         Properties: JSON.stringify(Difference(props, properties), null, 4),\n            ///         Attributes: JSON.stringify(properties, null, 4)\n            ///     }, null, 4).valueOf())\n            /// }\n        >\n            <span>\n                <strong>\n                    { title }\n                </strong>\n                {\n                    \" - \"\n                }\n                <Delimiter/>\n                { subtitle }\n            </span>\n            <br/>\n        </InlineNotification>\n    );\n};\n\nInline.defaultProps = {\n    kind: \"info\",\n    lowContrast: true,\n    role: \"alert\",\n    title: \"[Title Title]\",\n    subtitle: \"[Subtitle Content]\",\n    iconDescription: \"[Icon Descriptive Content]\",\n    statusIconDescription: \"[Status Icon Descriptive Content]\",\n    hideCloseButton: false,\n    closeOnEscape: true,\n    children: null,\n    properties: null\n};\n\nInline.propTypes = {\n    title: PropTypes.string,\n    subtitle: PropTypes.oneOfType([ PropTypes.string, PropTypes.node ]),\n\n    /**\n     * Specify the content\n     */\n    children: PropTypes.node,\n\n    /**\n     * Specify an optional className to be applied to the notification box\n     */\n    className: PropTypes.string,\n\n    /**\n     * Specify if pressing the escape key should close notifications\n     */\n    closeOnEscape: PropTypes.bool,\n\n    /**\n     * Specify the close button should be disabled, or not\n     */\n    hideCloseButton: PropTypes.bool,\n\n    /**\n     * Provide a description for \"close\" icon that can be read by screen readers\n     */\n    iconDescription: PropTypes.string,\n\n    /**\n     * Specify what state the notification represents\n     */\n    kind: PropTypes.oneOf([ \"error\", \"info\", \"info-square\", \"success\", \"warning\", \"warning-alt\" ]),\n\n    /**\n     * Specify whether you are using the low contrast variant of the ToastNotification.\n     */\n    lowContrast: PropTypes.bool,\n\n    /**\n     * Provide a function that is called when menu is closed\n     */\n    onClose: PropTypes.func,\n\n    /**\n     * Provide a function that is called when the close button is clicked\n     */\n    onCloseButtonClick: PropTypes.func,\n\n    /**\n     * By default, this value is \"alert\". You can also provide an alternate\n     * role if it makes sense from the accessibility-side\n     */\n    role: PropTypes.oneOf([ \"alert\", \"log\", \"status\" ]),\n\n    /**\n     * Provide a description for \"status\" icon that can be read by screen readers\n     */\n    statusIconDescription: PropTypes.string,\n\n    /**\n     * Additional Properties\n     */\n    properties: PropTypes.any\n};\n\nexport const Toast = (props) => {\n    const {\n        kind,\n        lowContrast,\n        role,\n        title,\n        subtitle,\n        iconDescription,\n        statusIconDescription,\n        hideCloseButton,\n        closeOnEscape,\n        timeout,\n\n        ... properties\n    } = props;\n\n    console.debug(\"Properties (Toast-Notification)\", Difference(props, properties));\n\n    console.debug(\"Attributes (Toast-Notification)\", properties);\n\n    return (\n        <ToastNotification\n            kind={ kind }\n            lowContrast={ lowContrast }\n            role={ role }\n            title={ title }\n            subtitle={ subtitle }\n            iconDescription={ iconDescription }\n            statusIconDescription={ statusIconDescription }\n            hideCloseButton={ hideCloseButton }\n            closeOnEscape={ closeOnEscape }\n            timeout={ timeout }\n\n            {\n                ... properties\n            }\n\n            data-properties={\n                String(JSON.stringify({\n                    Properties: JSON.stringify(Difference(props, properties), null, 4),\n                    Attributes: JSON.stringify(properties, null, 4)\n                }, null, 4).valueOf())\n            }\n        >\n            <strong>\n                { title }\n            </strong>\n            <Delimiter/>\n            { subtitle }\n        </ToastNotification>\n    );\n};\n\nToast.propTypes = {\n    /**\n     * Specify the content\n     */\n    children: PropTypes.node,\n\n    /**\n     * Specify an optional className to be applied to the notification box\n     */\n    className: PropTypes.string,\n\n    /**\n     * Specify if pressing the escape key should close notifications\n     */\n    closeOnEscape: PropTypes.bool,\n\n    /**\n     * Specify the close button should be disabled, or not\n     */\n    hideCloseButton: PropTypes.bool,\n\n    /**\n     * Provide a description for \"close\" icon that can be read by screen readers\n     */\n    iconDescription: PropTypes.string,\n\n    /**\n     * Specify what state the notification represents\n     */\n    kind: PropTypes.oneOf([ \"error\", \"info\", \"info-square\", \"success\", \"warning\", \"warning-alt\" ]),\n\n    /**\n     * Specify whether you are using the low contrast variant of the ToastNotification.\n     */\n    lowContrast: PropTypes.bool,\n\n    /**\n     * Provide a function that is called when menu is closed\n     */\n    onClose: PropTypes.func,\n\n    /**\n     * Provide a function that is called when the close button is clicked\n     */\n    onCloseButtonClick: PropTypes.func,\n\n    /**\n     * By default, this value is \"alert\". You can also provide an alternate\n     * role if it makes sense from the accessibility-side\n     */\n    role: PropTypes.oneOf([ \"alert\", \"log\", \"status\" ]),\n\n    /**\n     * Provide a description for \"status\" icon that can be read by screen readers\n     */\n    statusIconDescription: PropTypes.string,\n\n    /**\n     * Specify an optional duration the notification should be closed in\n     */\n    timeout: PropTypes.number,\n\n    /**\n     * Additional Properties\n     */\n    properties: PropTypes.any\n};\n\nToast.defaultProps = {\n    kind: \"info\",\n    lowContrast: true,\n    role: \"alert\",\n    title: \"[Title Title]\",\n    subtitle: \"[Subtitle Content]\",\n    iconDescription: \"[Icon Descriptive Content]\",\n    statusIconDescription: \"[Status Icon Descriptive Content]\",\n    hideCloseButton: false,\n    closeOnEscape: true,\n    timeout: 1000,\n    properties: null\n};\n\nexport const Actionable = (props) => {\n    const {\n        kind,\n        lowContrast,\n        role,\n        title,\n        subtitle,\n        iconDescription,\n        statusIconDescription,\n        hideCloseButton,\n        closeOnEscape,\n        inline,\n        hasFocus,\n        actionButtonLabel,\n        onActionButtonClick,\n        ... properties\n    } = props;\n\n    console.debug(\"Properties (Actionable-Notification)\", Difference(props, properties));\n\n    console.debug(\"Attributes (Actionable-Notification)\", properties);\n\n    return (\n        <ActionableNotification\n            kind={ kind }\n            lowContrast={ lowContrast }\n            role={ role }\n            title={ title }\n            subtitle={ subtitle }\n            iconDescription={ iconDescription }\n            statusIconDescription={ statusIconDescription }\n            hideCloseButton={ hideCloseButton }\n            closeOnEscape={ closeOnEscape }\n            inline={ inline }\n            hasFocus={ hasFocus }\n            actionButtonLabel={ actionButtonLabel }\n            onActionButtonClick={ onActionButtonClick }\n\n            {\n                ... properties\n            }\n\n            data-properties={\n                String(JSON.stringify({\n                    Properties: JSON.stringify(Difference(props, properties), null, 4),\n                    Attributes: JSON.stringify(properties, null, 4)\n                }, null, 4).valueOf())\n            }\n        >\n            <strong>\n                { title }\n            </strong>\n            <Delimiter/>\n            { subtitle }\n        </ActionableNotification>\n    );\n};\n\nActionable.propTypes = {\n    /**\n     * Pass in the action button label that will be rendered within the ActionableNotification.\n     */\n    actionButtonLabel: PropTypes.string,\n\n    /**\n     * Specify the content\n     */\n    children: PropTypes.node,\n\n    /**\n     * Specify an optional className to be applied to the notification box\n     */\n    className: PropTypes.string,\n\n    /**\n     * Specify if pressing the escape key should close notifications\n     */\n    closeOnEscape: PropTypes.bool,\n\n    /**\n     * Specify if focus should be moved to the component when the notification contains actions\n     */\n    hasFocus: PropTypes.bool,\n\n    /**\n     * Specify the close button should be disabled, or not\n     */\n    hideCloseButton: PropTypes.bool,\n\n    /**\n     * Provide a description for \"close\" icon that can be read by screen readers\n     */\n    iconDescription: PropTypes.string,\n\n    /*\n     * Specify if the notification should have inline styling applied instead of toast\n     */\n    inline: PropTypes.bool,\n\n    /**\n     * Specify what state the notification represents\n     */\n    kind: PropTypes.oneOf([ \"error\", \"info\", \"info-square\", \"success\", \"warning\", \"warning-alt\" ]),\n\n    /**\n     * Specify whether you are using the low contrast variant of the ActionableNotification.\n     */\n    lowContrast: PropTypes.bool,\n\n    /**\n     * Provide a function that is called when the action is clicked\n     */\n    onActionButtonClick: PropTypes.func,\n\n    /**\n     * Provide a function that is called when menu is closed\n     */\n    onClose: PropTypes.func,\n\n    /**\n     * Provide a function that is called when the close button is clicked\n     */\n    onCloseButtonClick: PropTypes.func,\n\n    /**\n     * By default, this value is \"alertdialog\". You can also provide an alternate\n     * role if it makes sense from the accessibility-side.\n     */\n    role: PropTypes.string,\n\n    /**\n     * Provide a description for \"status\" icon that can be read by screen readers\n     */\n    statusIconDescription: PropTypes.string,\n\n    /**\n     * Additional Properties\n     */\n    properties: PropTypes.any\n};\n\nActionable.defaultProps = {\n    kind: \"info\",\n    lowContrast: true,\n    role: \"alert\",\n    title: \"[Title Title]\",\n    subtitle: \"[Subtitle Content]\",\n    iconDescription: \"[Icon Descriptive Content]\",\n    statusIconDescription: \"[Status Icon Descriptive Content]\",\n    hideCloseButton: false,\n    closeOnEscape: true,\n    inline: true,\n    hasFocus: true,\n    actionButtonLabel: \"[Button-Label]\",\n    onActionButtonClick: (event) => console.trace(\"[Trace]\", \"Actionable Button Click Event\", event)\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"no-select\":\"Index_no-select__2nVN9\",\"unselectable\":\"Index_unselectable__1Q6MG\",\"no-highlight\":\"Index_no-highlight__q9Hq3\",\"select-all\":\"Index_select-all__2Kf2T\",\"enable-select-all\":\"Index_enable-select-all__4UPkw\",\"component\":\"Index_component__2K80n\"};","import axios from \"axios\";\n\nimport { Inline } from \"./../../components/Notifications/Authentication/Informational.js\";\n\nimport PropTypes from \"prop-types\";\n\nimport React, { useState, useEffect } from \"react\";\n\n/***\n * @param duration {Number} Total Skeleton Simulated Loading Time (Seconds)\n * @return {JSX.Element}\n * @constructor\n */\n\nexport const Page = ({ duration }) => {\n    const url = process.env.REACT_APP_API_ENDPOINT + [ \"/v1/utility/awaitable?duration\", duration ].join(\"=\");\n\n    const [ data, setData ] = useState(false);\n    const [ loading, setLoading ] = useState(false);\n    const [ error, setError ] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setLoading(true);\n\n            try {\n                const $ = await axios(url);\n\n                setData($);\n                setError(false);\n            } catch ( error ) {\n                console.warn(error);\n                setError({\n                    column: error?.column,\n                    line: error?.line,\n                    message: error?.message,\n                    stack: error?.stack\n                });\n            }\n\n            finally { setLoading(false); }\n\n        };\n\n        fetchData().finally(() => {\n            console.debug(\"[Debug] Loading Complete\");\n        });\n    }, [ url ]);\n\n    const Awaitable = () => (loading) && (<span>...</span>);\n\n    const Error = () => (error && !loading) && (\n        <div style={ { marginBottom: \"1.0rem\" } }>\n            <Inline\n                kind={ \"error\" }\n                lowContrast={ true }\n                role={ \"alert\" }\n                statusIconDescription={ \"Status-Icon\" }\n                iconDescription={ \"Close Error Message\" }\n                title={ \"Error\" }\n                subtitle={ error?.message }\n                hideCloseButton={ true }\n            />\n        </div>\n    );\n\n    const Data = () => (data && !loading) && (\n        <>\n            Complete\n        </>\n    );\n\n    return (\n        <>\n            { (<Error/>) }\n            { (<Awaitable/>) }\n            { (<Data/>) }\n        </>\n    );\n};\n\nPage.defaultProps = {\n    duration: 3\n};\n\nPage.propTypes = {\n    /*** @type {Number} Total Skeleton Simulated Loading Time (Seconds) */\n    duration: PropTypes.number.isRequired\n};\n\nexport default Page;","import { default as Template } from \"./../Module.js\";\n\nimport PropTypes from \"prop-types\";\n\nimport { default as Page } from \"./Page.js\";\n\nimport Styles from \"./SCSS/Index.module.scss\";\n\nconst Component = ({ timeout, description }) => {\n    return (\n        <Template Page={ Page } description={ description } timeout={ timeout } className={ Styles.component }/>\n    );\n};\n\nComponent.defaultProps = {\n    timeout: 1250\n};\n\nComponent.propTypes = {\n    /**\n     * Forced Delay during Transition\n     */\n\n    timeout: PropTypes.number.isRequired,\n\n    /***\n     * Loading Screen Context\n     */\n\n    description: PropTypes.string.isRequired\n};\n\nexport default Component;"],"sourceRoot":""}