/***
 * @author      Jacob B. Sanders
 * @package     @cloud-technology
 * @summary     Module Exportable
 *
 * @license     BSD 3-Clause License
 * @copyright   Cloud-Technology LLC. & Affiliates
 */
import Path from "path";
import Module from "module";
import AWS from "@cdktf/provider-aws";
import Random from "@cdktf/provider-random";
import { App, TerraformStack, TerraformAsset, AssetType, TerraformOutput, } from "cdktf";
/***
 * Compatability (ESM) Replacement for `__dirname` (Common-JS)
 *
 * @type {function(): string}
 * @constructor
 *
 * @example
 *
 * const URI = () => Path.normalize(import.meta.url).replace("file" + ":", "");
 *
 * >>> "index.js"
 *
 */
const URI = () => Path.normalize(import.meta.url).replace("file" + ":", "");
const Directory = () => Path.dirname(URI());
const CWD = Directory();
/***
 * Compatability (ESM) Replacement for `require` (Common-JS)
 *
 * @type {NodeRequire}
 * @constructor
 *
 * @example
 *
 * const Import = Module.createImport(URI());
 * const Package = Import("package.json");
 *
 * >>> { "name": "@organization/example", "version": "0.0.1", "...": "..." }
 *
 */
const Import = Module.createRequire(URI());
const Provider = (instance) => {
    new AWS.AwsProvider(instance, "AWS-Provider-ID", {
        region: "us-east-2",
    });
    new Random.RandomProvider(instance, "Random-Provider-ID");
};
const lambdaRolePolicy = {
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": "sts:AssumeRole",
            "Principal": {
                "Service": "lambda.amazon.aws.com",
            },
            "Effect": "Allow",
            "Sid": "",
        },
    ],
};
class LambdaStack extends TerraformStack {
    constructor(scope, name, config) {
        super(scope, name);
        Provider(this);
        // Create random value
        const pet = new Random.Pet(this, "Random-Pet-Name", {
            length: 2,
        });
        // Create Lambda executable
        const asset = new TerraformAsset(this, "AWS-Lambda-Function-Asset", {
            path: Path.resolve(CWD, config.path),
            type: AssetType.ARCHIVE, // if left empty it infers directory and file
        });
        // Create unique S3 bucket that hosts Lambda executable
        const bucket = new AWS.s3.S3Bucket(this, "AWS-S3-Resource", {
            bucketPrefix: `learn-cdktf-${name}`,
        });
        // Upload Lambda zip file to newly created S3 bucket
        const lambdaArchive = new AWS.s3.S3BucketObject(this, "AWS-Lambda-Function-Archive-File", {
            bucket: bucket.bucket,
            key: `${config.version}/${asset.fileName}`,
            source: asset.path, // returns a posix path
        });
        // Create Lambda role
        const role = new AWS.iam.IamRole(this, "AWS-Lambda-IAM-Execution-Role-Permissions", {
            name: `learn-cdktf-${name}-${pet.id}`,
            assumeRolePolicy: JSON.stringify(lambdaRolePolicy),
        });
        // Add execution role for lambda to write to CloudWatch logs
        //        new AWS.iam.IamRolePolicyAttachment(this, "AWS-Lambda-IAM-Managed-Policy-Service-Role", {
        //            policyArn: "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        //            role: role.name,
        //        });
        // Create Lambda function
        const lambda = new AWS.lambdafunction.LambdaFunction(this, "AWS-Lambda-Function", {
            functionName: `learn-cdktf-${name}-${pet.id}`,
            s3Bucket: bucket.bucket,
            s3Key: lambdaArchive.key,
            handler: config.handler,
            runtime: config.runtime,
            role: role.arn,
        });
        // Create and configure API gateway
        const api = new AWS.apigatewayv2.Apigatewayv2Api(this, "AWS-API-Gateway-Version-2", {
            name: name,
            protocolType: "HTTP",
            target: lambda.arn,
        });
        //
        //        new AWS.lambdafunction.LambdaPermission(this, "AWS-API-Gateway-Lambda-Function-Invocation-Permission", {
        //            functionName: lambda.functionName,
        //            action: "lambda:InvokeFunction",
        //            principal: "apigateway.amazonAWS.com",
        //            sourceArn: `${ api.executionArn }/*/*`,
        //        });
        const Permissions = {
            Invocation: new AWS.lambdafunction.LambdaPermission(this, "AWS-API-Gateway-Lambda-Function-Invocation-Permission", {
                functionName: lambda.functionName,
                action: "lambda:InvokeFunction",
                principal: "apigateway.amazonAWS.com",
                sourceArn: `${api.executionArn}/*/*`,
            }),
            Policy: new AWS.iam.IamRolePolicyAttachment(this, "AWS-Lambda-IAM-Managed-Policy-Service-Role", {
                policyArn: "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                role: role.name,
            }),
        };
        const Output = new TerraformOutput(this, "TF-Output-API-Gateway-URL", {
            value: api.apiEndpoint,
        });
    }
}
const app = new App({
    outdir: Path.relative(".", "distribution"),
    skipValidation: false,
    stackTraces: true,
});
new LambdaStack(app, "lambda-hello-world", {
    path: Path.join(CWD, "lambda-hello-world/dist"),
    handler: "index.handler",
    runtime: "nodejs14.x",
    stageName: "hello-world",
    version: "v0.0.2",
});
new LambdaStack(app, "lambda-hello-name", {
    path: Path.join(CWD, "lambda-hello-name/dist"),
    handler: "index.handler",
    runtime: "nodejs10.x",
    stageName: "hello-name",
    version: "v0.0.1",
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7R0FPRztBQUVILE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFHNUIsT0FBTyxHQUFHLE1BQU0scUJBQXFCLENBQUM7QUFDdEMsT0FBTyxNQUFNLE1BQU0sd0JBQXdCLENBQUM7QUFJNUMsT0FBTyxFQUNILEdBQUcsRUFDSCxjQUFjLEVBQ2QsY0FBYyxFQUNkLFNBQVMsRUFDVCxlQUFlLEdBQ2xCLE1BQU0sT0FBTyxDQUFDO0FBRWY7Ozs7Ozs7Ozs7OztHQVlHO0FBRUgsTUFBTSxHQUFHLEdBQUcsR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3BGLE1BQU0sU0FBUyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUM1QyxNQUFNLEdBQUcsR0FBRyxTQUFTLEVBQUUsQ0FBQztBQUV4Qjs7Ozs7Ozs7Ozs7OztHQWFHO0FBRUgsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBRTNDLE1BQU0sUUFBUSxHQUFHLENBQUMsUUFBd0IsRUFBRSxFQUFFO0lBQzFDLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsaUJBQWlCLEVBQUU7UUFDN0MsTUFBTSxFQUFFLFdBQVc7S0FDdEIsQ0FBQyxDQUFDO0lBRUgsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0FBQzlELENBQUMsQ0FBQztBQVVGLE1BQU0sZ0JBQWdCLEdBQUc7SUFDckIs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
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsibWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztHQU9HO0FBQ0gsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLEdBQUcsTUFBTSxxQkFBcUIsQ0FBQztBQUN0QyxPQUFPLE1BQU0sTUFBTSx3QkFBd0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsU0FBUyxFQUFFLGVBQWUsR0FBRyxNQUFNLE9BQU8sQ0FBQztBQUN6Rjs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxNQUFNLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDNUUsTUFBTSxTQUFTLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLE1BQU0sR0FBRyxHQUFHLFNBQVMsRUFBRSxDQUFDO0FBQ3hCOzs7Ozs7Ozs7Ozs7O0dBYUc7QUFDSCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDM0MsTUFBTSxRQUFRLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRTtJQUMxQixJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLGlCQUFpQixFQUFFO1FBQzdDLE1BQU0sRUFBRSxXQUFXO0tBQ3RCLENBQUMsQ0FBQztJQUNILElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztBQUM5RCxDQUFDLENBQUM7QUFDRixNQUFNLGdCQUFnQixHQUFHO0lBQ3JC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