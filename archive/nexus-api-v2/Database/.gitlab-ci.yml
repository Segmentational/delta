#!/usr/bin/env file .

# -*-  Coding: UTF-8  -*- #
# -*-  System: Linux  -*- #
# -*-  Usage:  *.Yaml -*- #

# Owner:    Jacob B. Sanders
# Source:   code.cloud-technology.io
# License:  BSD 2-Clause License

#
# Copyright 2020 Jacob B. Sanders - Cloud Hybrid LLC. & Affiliates
#
# Redistribution and use in source and binary forms, with or without modification, are permitted
# provided that the following conditions are met:
#
# 1.  Redistributions of source code must retain the above copyright notice, this list of
#     conditions and the following disclaimer.
#
# 2.  Redistributions in binary form must reproduce the above copyright notice, this list of
#     conditions and the following disclaimer in the documentation and/or other materials
#     provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.
#

#
# ========================================================================
# --> Pipeline: Continuous Integration & Deployment Configuration(s)
# ========================================================================
#

.Tags: &Runner [ "Cloud-Technology" ]

.Alpine: &Alpine [ "apk add --quiet bash curl git git-lfs jq" ]

.TLS: &TLS [ "apk add openssl openssl-dev py3-cffi --no-cache" ]

.Bionic: &Bionic [ "sudo apt install curl jq --yes" ]

.GCC: &GCC [ "apk add --quiet libc-dev linux-headers build-base" ]

.Debian: &Debian [ "apt install --quiet bash curl git libc-dev gcc" ]

.Sphinx: &Sphinx [ "python3 -m pip --quiet install Sphinx" ]

.PSQL: &PSQL [ "apk add --no-cache postgresql-libs", "apk add --no-cache --virtual .build-deps gcc musl-dev postgresql-dev zlib-dev libffi-dev" ]

# - - - - - - - - - - - - -
# Container Configurations
# - - - - - - - - - - - - -

.Registry: &Login [ "docker login --user $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_REGISTRY" ]

# - - - - - - - - - - - -
# Python Configurations
# - - - - - - - - - - - -

.Python: &Python-3
    - python3 -m pip install --upgrade pip
    - python3 -m pip install setuptools
    - python3 -m pip  install wheel
    - python3 -m pip --quiet install virtualenv
    - python3 -m virtualenv --quiet .venv
    - mkdir -p .cache/pip && source .venv/bin/activate
    - python -m pip --quiet install --upgrade pip

.Setup: &Setup |
    export GLIBC_VER="2.31-r0"
    apk add --update \
        build-base \
        curl    \
        unzip   \
        groff   \
        less    \
        jq      \
        python3-dev \
        python3 \
        libffi-dev \
        libressl-dev \
        py-pip
        curl -O https://bootstrap.pypa.io/get-pip.py
        python3 get-pip.py
        pip install --upgrade pip
        pip install six
        pip install awscli
        apk --no-cache add \
        binutils \
        && curl -sL https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub \
        && curl -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VER}/glibc-${GLIBC_VER}.apk \
        && curl -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VER}/glibc-bin-${GLIBC_VER}.apk \
        && curl -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VER}/glibc-i18n-${GLIBC_VER}.apk \
        && apk add --no-cache \
            glibc-${GLIBC_VER}.apk \
            glibc-bin-${GLIBC_VER}.apk \
            glibc-i18n-${GLIBC_VER}.apk \
        && /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8 \
        && curl -sL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip \
        && unzip awscliv2.zip \
        && aws/install \
    || true

# ------------------------------------------------------------------------
# Primary Entry-Point (Jobs + Stages + Triggers)
# ------------------------------------------------------------------------

image: "python:alpine"
cache: { paths: [ ".cache/pip", "*/**/__pycache__" ] }
variables: { CONTAINER: "nexus-api", TAG: "latest", STACK: "Nexus-API-CFN-Stack", SERVICE: "Nexus-API-Service", CLUSTER: "Nexus-API-Service-Cluster" }
stages: [ "State", "Setup", "Testing", "Unit", "Initialization", "Dependencies", "Code-Quality", "Analysis", "UAT", "Reporting", "Package", "Distribution", "Export", "Release", "Version", "Deployment", "Health-Check" ]

# - - - - - - - - -
# Executable Jobs
# - - - - - - - - -

Compile:
    tags: *Runner
    stage: Setup
    before_script: [ *GCC, *Python-3, *Alpine, *TLS ]
    allow_failure: False
    script:
        - python -m compileall -o 2 -f "${PWD}/API"
        - python -m compileall -o 2 -f "${PWD}/Database"
        - python -m compileall -o 2 -f "${PWD}/Mongo"
        - python -m compileall -o 2 -f "${PWD}/Parser"

Requirements:
    tags: *Runner
    stage: Dependencies
    needs: [
        { job: Compile, artifacts: True }
    ]
    allow_failure: True
    before_script: [ *GCC, *Python-3, *Alpine, *TLS, *PSQL ]
    artifacts: { paths: [ "Dependencies" ], expire_in: "1 hour" }
    script: [
        "python setup.py build",
        "python -m pip install --requirement Requirements --upgrade",
        "python -m pip freeze > Dependencies"
    ]

Source:
    tags: *Runner
    stage: Dependencies
    needs: [
        { job: Compile, artifacts: False },
    ]
    cache: []
    allow_failure: True
    before_script: []
    artifacts: { paths: [ "API" ] }
    script: [ "echo \"See Build for Details\"" ]

Archive:
    tags: *Runner
    stage: Dependencies
    needs: [
        { job: Compile, artifacts: True }
    ]
    allow_failure: False
    before_script: [ *GCC, *Python-3, *Alpine, *TLS ]
    artifacts: { paths: [ "Artifact/Distribution/Source" ] }
    script: [ "python setup.py sdist" ]

Variables:
    tags: *Runner
    stage: Dependencies
    needs: [
        { job: Compile, artifacts: True }
    ]
    allow_failure: True
    before_script: [ *GCC, *Python-3, *Alpine, *TLS ]
    artifacts: { paths: [ "./**/*.env" ], expire_in: "1 hour" }
    cache: []
    script:
        - echo "DATABASE_URL = \"postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DATABASE}\"" > ./Database/.env
        - echo "DATABASE_URL = \"mongodb://${MONGO_DB_USER}:${MONGO_DB_PASSWORD}@${MONGO_DB_HOST}:${MONGO_DB_PORT}/${MONGO_DB_CONNECTION_URI}\"" > ./Mongo/.env
        - echo "GITLAB_URL=\"gitlab.cloud-technology.io\"" >> ./API/Git/.env
        - echo "GITLAB_USERNAME=\"${GITLAB_USERNAME}\"" >> ./API/Git/.env
        - echo "GITLAB_API_TOKEN=\"${GITLAB_API_TOKEN}\"" >> ./API/Git/.env
        - echo "GITLAB_API_TOKEN_READ_ONLY=\"${GITLAB_API_TOKEN_READ_ONLY}\"" >> ./API/Git/.env
        - echo "GITLAB_API_TOKEN_WRITE_ONLY=\"${GITLAB_API_TOKEN_WRITE_ONLY}\"" >> ./API/Git/.env
        - echo "GITLAB_API_TOKEN_REGISTRY=\"${GITLAB_API_TOKEN_REGISTRY}\"" >> ./API/Git/.env
        - echo "GITLAB_API_TOKEN_PACKAGES=\"${GITLAB_API_TOKEN_PACKAGES}\"" >> ./API/Git/.env
        - echo "GITHUB_USERNAME=\"${GITHUB_USERNAME}\"" >> ./API/Git/.env
        - echo "GITHUB_API_TOKEN=\"${GITHUB_API_TOKEN}\"" >> ./API/Git/.env
        - echo "GITHUB_API_TOKEN_READ_ONLY=\"${GITHUB_API_TOKEN_READ_ONLY}\"" >> ./API/Git/.env
        - echo "GITHUB_API_TOKEN_WRITE_ONLY=\"${GITHUB_API_TOKEN_WRITE_ONLY}\"" >> ./API/Git/.env
        - export HASH_KEY="$(python -c "import secrets, sys; sys.stdout.write(secrets.token_urlsafe(32))")"
        - echo "KEY=\"${HASH_KEY}\"" >> ./API/ASGI/Authentication/.env
        - echo "ALGORITHM=\"HS256\"" >> ./API/ASGI/Authentication/.env
        - echo "EXPIRATION=60" >> ./API/ASGI/Authentication/.env

Wheel:
    # @Task --> Zip Up *.whl File
    tags: *Runner
    stage: Package
    needs: [
        { job: Compile, artifacts: True },
        { job: Requirements, artifacts: True },
        { job: Variables, artifacts: True },
        { job: Source, artifacts: False }
    ]
    allow_failure: False
    before_script: [ *GCC, *Python-3, *Alpine, *TLS, *PSQL ]
    resource_group: "Source"
    script:
        - python setup.py bdist_wheel
    artifacts:
        expire_in: "1 hour"
        paths:
            - "Nexus-API-*.*.*-py3-*-any.whl"

.SSM:
    stage: "Package"
    variables: { PRE: "Nexus-API" }
    only: [ "Development" ]
    image: "docker:stable"
    cache: []
    needs: [
        { job: Compile, artifacts: False },
        { job: Requirements, artifacts: False },
        { job: Variables, artifacts: True },
        { job: Source, artifacts: False }
    ]
    script:
        - apk add --quiet --no-cache curl unzip python3 py3-pip jq
        - python3 -m venv .venv && source .venv/bin/activate
        - pip3 install --upgrade pip && pip3 install wheel && pip3 install awscli
        - aws ssm put-parameter --name "${PRE}-Target-VPC"
              --description "Environment VPC-ID"
              --value "vpc-a2fe3dc9"
                  --type "String"
                      --overwrite
              --generate-cli-skeleton
        - aws ssm put-parameter --name "${PRE}-Subnets"
              --description "VPC Dependent Subnet(s)"
              --value "subnet-35fe7679, subnet-61ba9b1b, subnet-4216fd29"
                  --type "StringList"
                      --overwrite
              --generate-cli-skeleton
        - aws ssm put-parameter --name "${PRE}-Target-Subnet-Singleton"
              --description "VPC Default, Singleton Subnet"
              --value "subnet-35fe7679"
                  --type "String"
                      --overwrite
              --generate-cli-skeleton
        - aws ssm put-parameter --name "${PRE}-Subnet-A"
              --description "VPC Dependent Subnet(s) [A]"
              --value "subnet-35fe7679"
                  --type "String"
                      --overwrite
              --generate-cli-skeleton
        - aws ssm put-parameter --name "${PRE}-Subnet-B"
              --description "VPC Dependent Subnet(s) [B]"
              --value "subnet-61ba9b1b"
                  --type "String"
                      --overwrite
              --generate-cli-skeleton
        - aws ssm put-parameter --name "${PRE}-Subnet-C"
              --description "VPC Dependent Subnet(s) [C]"
              --value "subnet-4216fd29"
                  --type "String"
                      --overwrite
              --generate-cli-skeleton
        - aws ssm put-parameter --name "${PRE}-AWS-Account-ID"
              --description "${PRE} Environment Account-ID"
              --value "983281742669"
                  --type "String"
                      --overwrite
              --generate-cli-skeleton
        - aws ssm put-parameter --name "${PRE}-Container-Image-ID"
              --description "${PRE} CI-Deployable"
              --value "983281742669.dkr.ecr.us-east-2.amazonaws.com/nexus-api:latest"
                  --type "String"
                      --overwrite
              --generate-cli-skeleton
        - aws ssm put-parameter --name "${PRE}-Service-Name"
              --description "${PRE} Functional Service Port"
              --value "Nexus-API-Service"
                  --type "String"
                      --overwrite
              --generate-cli-skeleton
        - aws ssm put-parameter --name "${PRE}-Container-Port"
              --description "${PRE} Functional Service Port"
              --value "3000"
                  --type "String"
                      --overwrite
              --generate-cli-skeleton
        - aws ssm put-parameter --name "${PRE}-ALB-Port"
              --description "${PRE} Load-Balancer Connection Port"
              --value "3000"
                  --type "String"
                      --overwrite
              --generate-cli-skeleton
        - aws ssm put-parameter --name "${PRE}-SSL-Certificate"
              --description "${PRE} TLS + SSL Certificate Resource ARN"
              --value "arn:aws:acm:us-east-2:983281742669:certificate/6b219c7f-2741-4757-8126-3babca2ae759"
                  --type "String"
                      --overwrite
              --generate-cli-skeleton

Registry:
    stage: "Distribution"
    only: [ "Development" ]
    image: "docker:stable"
    services: [ "docker:dind" ]
    needs: [ { job: Wheel, artifacts: True } ]
    cache: []
    script:
        - export SRC="${CI_REGISTRY_IMAGE}/${CONTAINER}"
        - export VER="$(printf "%s" "$(cat VERSION)")"
        - export TAR="${SRC}/${VER}"
        - export LAT="${TAR}:latest"
        - docker build --no-cache --tag "${TAR}" --tag "${LAT}" .
        - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
        - docker push "${TAR}" && docker push "${LAT}"

ECR:
    stage: "Distribution"
    only: [ "Development" ]
    image: "docker:stable"
    services: [ "docker:dind" ]
    cache: []
    needs: [
        { job: Wheel, artifacts: True }
    ]
    script:
        - apk add --quiet --no-cache curl unzip python3 py3-pip jq
        - python3 -m venv .venv && source .venv/bin/activate
        - pip3 install --upgrade pip && pip3 install wheel && pip3 install awscli
        - |
            export VERSION="$(printf "%s" "$(cat VERSION)")"

            export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
            export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"

            export BASE="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${CONTAINER}"
            export TARGET="${BASE}:${VERSION}"
            export LATEST="${BASE}:latest"

             docker build --no-cache --tag "${TARGET}" --tag "${LATEST}" .

            export URL="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
            export PASSWORD="$(aws ecr get-login-password --region ${AWS_DEFAULT_REGION})"

            aws ecr create-repository --repository-name "${CONTAINER}" --region "${AWS_DEFAULT_REGION}" &>/dev/null || true
            printf "%s\n" "${PASSWORD}" | docker login "${URL}" --username AWS --password-stdin

            docker push "${TARGET}" && docker push "${LATEST}"

Stack:
    stage: "Deployment"
    only: [ "Development" ]
    image: "docker:stable"
    cache: []
    needs: [
        { job: ECR, artifacts: False },
    ]
    variables:
        FLAG: "CAPABILITY_NAMED_IAM"
    environment:
        deployment_tier: "production"
        action: start
        name: "Production"
        url: "https://api.cloud-technology.io"
    script:
        - apk add --quiet --no-cache curl unzip python3 py3-pip jq
        - python3 -m venv .venv && source .venv/bin/activate
        - pip3 install --upgrade pip && pip3 install wheel && pip3 install awscli
        - cd .CI-CD && echo "Running Deployment Script"
        - aws ecs update-service --service "${SERVICE}"
            --cluster "${SERVICE}-Cluster"
                --force-new-deployment
            && export DEL="false" || export DEL="true"
        - echo "Delete - ${DEL}"
        # ... - \[\[ "${DEL}" == "true" \]\] && aws cloudformation
        # ...     delete-stack --stack-name "${STACK}" && aws cloudformation
        # ...         wait stack-delete-complete --stack-name "${STACK}"
        # ...     || true
        # ... - aws cloudformation create-stack --stack-name
        # ...     "${STACK}" --template-body file://Stack.Yaml
        # ...         --capabilities "${FLAG}" && export PRV="true"
        # ...     || true
        # ... - \[\[ "${PRV}" == "true" \]\] && aws cloudformation
        # ...     wait stack-create-complete
        # ...         --stack-name "${STACK}"
        # ...     || true

Waiter:
    stage: "Health-Check"
    only: [ "Development" ]
    image: "docker:stable"
    cache: []
    needs: [ { job: Stack, artifacts: False } ]
    allow_failure: True
    script:
        - apk add --quiet --no-cache python3 py3-pip
        - python3 -m venv .venv && source .venv/bin/activate
        - pip3 install --upgrade pip && pip3 install wheel && pip3 install awscli
        - aws ecs wait services-stable --cluster "${CLUSTER}" --services "${SERVICE}" || true
        # - aws cloudformation wait stack-create-complete
        # -     --stack-name "${STACK}" || \
        # - aws cloudformation wait stack-update-complete
