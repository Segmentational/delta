AWSTemplateFormatVersion: "2010-09-09"
Description: >-
    Stack-Name: "GitLab-Default-CFN-Stack"
        - GitLab Installation Template
Metadata:
    Validation:     |
        aws cloudformation validate-template file://Stack.Yaml
    Generate-JSON:  |
        cloudformation get-template-summary --template-body "file://Stack.Yaml"
    Create:         |
        aws cloudformation create-stack \
            --stack-name "Development-GitLab-Stack" \
                --template-body "file://Stack.Yaml" \
                --parameters "file://Parameters/Stack.json" \
                    --capabilities CAPABILITY_IAM

        aws cloudformation create-stack             \
            --stack-name "Development-GitLab-Stack" \
                --template-body "file://Stack.Yaml" \
                    --capabilities CAPABILITY_IAM

        aws cloudformation wait stack-create-complete --stack-name "Development-GitLab-Stack"
    Update:         |
        aws cloudformation create-stack                         \
            --stack-name "[Stack-Name]"                         \
                --template-body "file://Stack.Yaml"             \
                    --parameters "file://Parameters/Stack.json" \
                        --capabilities CAPABILITY_IAM

        aws cloudformation create-stack             \
            --stack-name "[Stack-Name]"             \
                --template-body "file://Stack.Yaml" \
                    --capabilities CAPABILITY_IAM

        aws cloudformation wait stack-update-complete --stack-name "Development-GitLab-Stack"
    Decommission:   |
        aws cloudformation delete-stack --stack-name "Development-GitLab-Stack"
        aws cloudformation wait stack-delete-complete --stack-name "Development-GitLab-Stack"
    Wait:           |
        aws cloudformation wait stack-[create|update|delete]-complete --stack-name "[Stack-Name]"
    Documentation:
        Gitlab-Ports: https://docs.gitlab.com/omnibus/package-information/defaults.html
        Gitlab-Install-Scripts: https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce
        Gitlab-Supported-Distributions: https://packagecloud.io/docs#os_distro_version
        Yum-Repositories: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/sec-configuring_yum_and_yum_repositories
        Yum-Variables-($basearch): https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/sec-Using_Yum_Variables
    Creator:    "Jacob B. Sanders"
    License:    "BSD 3-Clause License"
    Copyright:  "Public Domain"
    Date:       "2020-05-21"
    Updated:    "2021-05-23"

Parameters:
    Compute:
        Type: "String"
        Description: "VPS Instance Type"
        Default: "t3.large"
    Storage:
        Type: "String"
        Description: "Storage Size (GB)"
        Default: "150"
    Optimized:
        Type: "String"
        Description: "EBS Optimization for EC2 Instance"
        Default: "True"
    AMI:
        Type: "String"
        Description: "Operating System ID"
        Default: "ami-0d97ef13c06b05a19"
    SSH:
        Type: "AWS::SSM::Parameter::Value<String>"
        Description: "(SSM) SSH Key-Pair Name"
        Default: "GitLab-Stack-Key-Name"
    VPC:
        Type: "String"
        Description: "(SSM) VPC ID"
        Default: "vpc-a2fe3dc9"
    Monitoring:
        Type: "String"
        Description: "(SSM) EC2 Instance Monitoring Enablement"
        Default: "False"
    Zone:
        Type: "String"
        Default: "cloud-technology.io."
    Record:
        Type: "String"
        Default: "development.cloud-technology.io"
    Resolution:
        Type: "String"
        Default: "A"

Resources:
    Logging:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Join [ "-", [ !Sub "${AWS::StackName}", "Log-Group" ] ]

    # ... TLS:
    # ...     Type: AWS::CertificateManager::Certificate
    # ...     Properties:
    # ...         DomainName: !Ref
    # ...         DomainValidationOptions:
    # ...             -   DomainName: !Ref Record
    # ...                 ValidationDomain: !Ref Record
    # ...

    # ... ICMP:
    # ...     Type: "AWS::EC2::SecurityGroupIngress"
    # ...     Properties:
    # ...         GroupId: !Ref Security
    # ...         SourceSecurityGroupId: !GetAtt Security.GroupId
    # ...         Description: "Allow Ping Packets"
    # ...         CidrIp: "0.0.0.0/0"
    # ...         CidrIpv6: "::/0"
    # ...         FromPort: 8
    # ...         ToPort: -1
    # ...         IpProtocol: "icmp"
    # ...
    # ... HTTP:
    # ...     Type: "AWS::EC2::SecurityGroupIngress"
    # ...     Properties:
    # ...         GroupId: !Ref Security
    # ...         SourceSecurityGroupId: !GetAtt Security.GroupId
    # ...         Description: "Allow HTTP Traffic to Instance"
    # ...         CidrIp: "0.0.0.0/0"
    # ...         CidrIpv6: "::/0"
    # ...         FromPort: 80
    # ...         ToPort: 80
    # ...         IpProtocol: "tcp"
    # ...
    # ... HTTPs:
    # ...     Type: "AWS::EC2::SecurityGroupIngress"
    # ...     Properties:
    # ...         GroupId: !Ref Security
    # ...         SourceSecurityGroupId: !GetAtt Security.GroupId
    # ...         Description: "Allow HTTPs Traffic to Instance"
    # ...         CidrIp: "0.0.0.0/0"
    # ...         CidrIpv6: "::/0"
    # ...         FromPort: 443
    # ...         ToPort: 443
    # ...         IpProtocol: "tcp"
    # ...
    # ... Registry:
    # ...     Type: "AWS::EC2::SecurityGroupIngress"
    # ...     Properties:
    # ...         GroupId: !Ref Security
    # ...         SourceSecurityGroupId: !GetAtt Security.GroupId
    # ...         Description: "Allow Registry Traffic to Instance"
    # ...         CidrIp: "0.0.0.0/0"
    # ...         CidrIpv6: "::/0"
    # ...         FromPort: 5000
    # ...         ToPort: 5000
    # ...         IpProtocol: "tcp"
    # ...
    # ... Monitoring:
    # ...     Type: "AWS::EC2::SecurityGroupIngress"
    # ...     Properties:
    # ...         GroupId: !Ref Security
    # ...         SourceSecurityGroupId: !GetAtt Security.GroupId
    # ...         Description: "Allow Monitoring Traffic to Instance"
    # ...         CidrIp: "0.0.0.0/0"
    # ...         CidrIpv6: "::/0"
    # ...         FromPort: 9090
    # ...         ToPort: 9090
    # ...         IpProtocol: "tcp"
    # ...
    # ... Access:
    # ...     Type: "AWS::EC2::SecurityGroupIngress"
    # ...     Properties:
    # ...         GroupId: !Ref Security
    # ...         SourceSecurityGroupId: !GetAtt Security.GroupId
    # ...         Description: "Allow SSH Traffic to Instance"
    # ...         CidrIp: "0.0.0.0/0"
    # ...         CidrIpv6: "::/0"
    # ...         FromPort: 22
    # ...         ToPort: 22
    # ...         IpProtocol: "tcp"
    # ...
    # ... Metrics:
    # ...     Type: "AWS::EC2::SecurityGroupIngress"
    # ...     Properties:
    # ...         GroupId: !Ref Security
    # ...         SourceSecurityGroupId: !GetAtt Security.GroupId
    # ...         Description: "Allow Runner Metrics Tracking"
    # ...         CidrIp: "0.0.0.0/0"
    # ...         CidrIpv6: "::/0"
    # ...         FromPort: 9252
    # ...         ToPort: 9252
    # ...         IpProtocol: "tcp"

    Security:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupName: !Sub "${AWS::StackName}-SG"
            GroupDescription: !Sub "EC2 Egress & Ingress [${AWS::StackName}]"
            VpcId: !Ref "VPC"
            SecurityGroupEgress:
                -   Description: "Default Networking Egress Rule"
                    CidrIp: "0.0.0.0/0"
                    FromPort: -1
                    ToPort: -1
                    IpProtocol: -1
                -   Description: "Default Networking Egress Rule (IPv6)"
                    CidrIpv6: "::/0"
                    FromPort: -1
                    ToPort: -1
                    IpProtocol: -1
            SecurityGroupIngress:
                -   Description: "Allow Forwarded Ping-Packets"
                    CidrIp: "0.0.0.0/0"
                    FromPort: 8
                    ToPort: -1
                    IpProtocol: "icmp"
                -   Description: "Allow Forwarded Ping-Packets (IPv6)"
                    CidrIpv6: "::/0"
                    FromPort: 8
                    ToPort: -1
                    IpProtocol: "icmp"
                -   Description: "Allow Forwarded HTTP Requests"
                    CidrIp: "0.0.0.0/0"
                    FromPort: 80
                    ToPort: 80
                    IpProtocol: "tcp"
                -   Description: "Allow Forwarded HTTP Requests (IPv6)"
                    CidrIpv6: "::/0"
                    FromPort: 80
                    ToPort: 80
                    IpProtocol: "tcp"
                -   Description: "Allow Forwarded HTTPs Requests"
                    CidrIp: "0.0.0.0/0"
                    FromPort: 443
                    ToPort: 443
                    IpProtocol: "tcp"
                -   Description: "Allow Forwarded HTTPs Requests (IPv6)"
                    CidrIpv6: "::/0"
                    FromPort: 443
                    ToPort: 443
                    IpProtocol: "tcp"
                -   Description: "Allow Forwarded Registry Requests"
                    CidrIp: "0.0.0.0/0"
                    FromPort: 5000
                    ToPort: 5000
                    IpProtocol: "tcp"
                -   Description: "Allow Forwarded Registry Requests (IPv6)"
                    CidrIpv6: "::/0"
                    FromPort: 5000
                    ToPort: 5000
                    IpProtocol: "tcp"
                -   Description: "Allow Forwarded Monitoring Requests"
                    CidrIp: "0.0.0.0/0"
                    FromPort: 9090
                    ToPort: 9090
                    IpProtocol: "tcp"
                -   Description: "Allow Forwarded Monitoring Requests (IPv6)"
                    CidrIpv6: "::/0"
                    FromPort: 9090
                    ToPort: 9090
                    IpProtocol: "tcp"
                -   Description: "Allow Forwarded SSH Requests"
                    CidrIp: "0.0.0.0/0"
                    FromPort: 22
                    ToPort: 22
                    IpProtocol: "tcp"
                -   Description: "Allow Forwarded SSH Requests (IPv6)"
                    CidrIpv6: "::/0"
                    FromPort: 22
                    ToPort: 22
                    IpProtocol: "tcp"
                -   Description: "Allow Forwarded Runner Monitoring Requests"
                    CidrIp: "0.0.0.0/0"
                    FromPort: 9252
                    ToPort: 9252
                    IpProtocol: "tcp"
                -   Description: "Allow Forwarded Runner Monitoring Requests (IPv6)"
                    CidrIpv6: "::/0"
                    FromPort: 9252
                    ToPort: 9252
                    IpProtocol: "tcp"
            Tags:
                -
                    Key: Name
                    Value: !Sub "${AWS::StackName}-SG"

    Instance:
        DependsOn: [ "Logging" ]
        CreationPolicy:
            ResourceSignal:
                Timeout: "PT30M"
        Type: "AWS::EC2::Instance"
        Metadata:
            "AWS::CloudFormation::Init":
                configSets:
                    Configuration:
                        - "Configuration"
                    Initialization:
                        - "Initialization"
                    Runtime:
                        - "Initialization"
                        - "Configuration"
                Initialization:
                    files:
                        "/Setup.Bash":
                            mode: "000600"
                            owner: "root"
                            group: "root"
                            content: !Sub |
                                #!/bin/bash -xe

                                sudo dnf install -y curl
                                sudo dnf install -y policycoreutils
                                sudo dnf install -y openssh-server
                                sudo dnf install -y perl
                                sudo dnf install -y firewalld

                                sudo systemctl enable sshd
                                sudo systemctl start sshd

                                sudo firewall-cmd --permanent --add-service "http"
                                sudo firewall-cmd --permanent --add-service "https"

                                sudo firewall-cmd --zone=public --permanent --add-port "5000/tcp" # Registry
                                sudo firewall-cmd --zone=public --permanent --add-port "9252/tcp" # Runners
                                sudo firewall-cmd --zone=public --permanent --add-port "9090/tcp" # Prometheus
                                sudo firewall-cmd --zone=public --permanent --add-port "22/tcp"   # GitLab Shell

                                sudo systemctl reload firewalld

                                # ... sudo dnf install postfix -y
                                # ... sudo systemctl enable postfix
                                # ... sudo systemctl start postfix

                                curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash

                                sudo EXTERNAL_URL="http://${Record}" dnf install -y gitlab-ee
                        "/etc/cfn/cfn-hup.conf":
                            mode: "000400"
                            owner: "root"
                            group: "root"
                            content: !Sub |
                                [main]
                                stack = ${AWS::StackId}
                                region = ${AWS::Region}
                                verbose = true
                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                            mode: "000400"
                            owner: "root"
                            group: "root"
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers = post.update
                                path = Resources.Instance.Metadata.AWS::CloudFormation::Init
                                action = /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Instance --configsets Runtime --region ${AWS::Region}
                        "/etc/gitlab-runner/config.toml":
                            content: |
                                concurrent = 4
                                check_interval = 3
                                listen_address = ":9252"
                                log_format = "json"
                Configuration:
                    commands:
                        I:
                            command: |
                                sudo dnf -y remove docker \
                                docker-client \
                                docker-client-latest \
                                docker-common \
                                docker-latest \
                                docker-latest-logrotate \
                                docker-logrotate \
                                docker-engine
                        II:
                            command: sudo yum -y install yum-utils
                        III:
                            command: sudo yum-config-manager --add-repo "https://download.docker.com/linux/centos/docker-ce.repo"
                        IIII:
                            command: sudo dnf -y install docker-ce docker-ce-cli containerd.io
                        IIIII:
                            command: sudo systemctl start docker
                        # ...   [ID]:
                        # ...     command: sudo dnf -y install wget
                        # ...   [ID]:
                        # ...     command: sudo wget -O /usr/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64
                        # ...   [ID]:
                        # ...     command: sudo chmod a+x /usr/bin/gitlab-runner
                        # ...   [ID]:
                        # ...     command: sudo useradd --comment IO --home-dir /IO --shell /bin/bash --system IO --create-home
                        # ...   [ID]:
                        # ...     command: |
                        # ...         cat << 'EOF' | sudo tee /etc/sudoers.d/IO
                        # ...         IO   ALL=(ALL)   NOPASSWD: ALL
                        # ...         EOF
                        # ...   [ID]:
                        # ...     command: sudo gitlab-runner install --user IO --working-directory /IO
                        # ...   [ID]:
                        # ...     command:
                        # ...         - |
                        # ...             sudo gitlab-runner register \
                        # ...                 --non-interactive \
                        # ...                 --url "https://gitlab.cloud-technology.io" \
                        # ...                 --registration-token "GyJZbKiAhR3w5x2kXzrn" \
                        # ...                 --executor "docker" \
                        # ...                 --docker-image "alpine:latest" \
                        # ...                 --description "IO-Development-Runner" \
                        # ...                 --locked="false" --access-level "not_protected" \
                        # ...                 --docker-volumes "/var/run/docker.sock:/var/run/docker.sock" \
                        # ...                 --tag-list "IO"
                        # ...   [ID]:
                        # ...    command: "sudo gitlab-runner start"
                        IIIIII:
                            command: "sudo bash /Setup.Bash"
        Properties:
            DisableApiTermination: False
            EbsOptimized: !Ref Optimized
            InstanceInitiatedShutdownBehavior: "stop"
            InstanceType: !Ref Compute
            KeyName: !Ref SSH
            Monitoring: !Ref Monitoring
            SourceDestCheck: False
            ImageId: !Ref AMI
            SecurityGroupIds:
                - !Ref Security
            BlockDeviceMappings:
                -
                    DeviceName: "/dev/sda1"
                    Ebs:
                        VolumeSize: !Ref Storage
            Tags:
                -
                    Key: Name
                    Value: !Sub "${AWS::StackName}-Instance"
                -
                    Key: Stack
                    Value: !Sub "${AWS::StackName}"
                -
                    Key: Public-IPv4
                    Value: !Ref IPv4
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash -xe

                    dnf -y install python2
                    alternatives --set python /usr/bin/python2

                    curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
                    tar xvf aws-cfn-bootstrap-latest.tar.gz

                    cd aws-cfn-bootstrap-*/
                    python setup.py build
                    python setup.py install

                    mkdir -p /opt/aws/bin

                    ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup

                    chmod 775 /usr/init/redhat/cfn-hup

                    ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup
                    ln -s /usr/bin/cfn-signal /opt/aws/bin/cfn-signal
                    ln -s /usr/bin/cfn-init /opt/aws/bin/cfn-init
                    ln -s /usr/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event
                    ln -s /usr/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result

                    /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource Instance --configsets Runtime --region ${AWS::Region}

                    /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource Instance --region ${AWS::Region}

    IPv4:
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: "vpc"
            Tags:
                -
                    Key: Name
                    Value: !Sub "${AWS::StackName}-Instance-IPv4"
                -
                    Key: Stack
                    Value: !Sub "${AWS::StackName}"

    Set:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Comment: "Automated Record-Set"
            HostedZoneName: !Ref Zone
            Name:
                Ref: Record
            TTL: "60"
            Type: !Ref Resolution
            ResourceRecords:
                - !Ref IPv4

    Association:
        Type: "AWS::EC2::EIPAssociation"
        Properties:
            EIP: !Ref IPv4
            InstanceId: !Ref Instance
